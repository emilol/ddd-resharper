<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Metadata</name>
    </assembly>
    <members>
        <member name="F:JetBrains.Metadata.Access.CorFileFlags.ffContainsMetaData">
            <summary>
            Indicates that the file is not a resource file
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Access.CorFileFlags.ffContainsNoMetaData">
            <summary>
            Indicates that the file, possibly a resource file, does not contain metadata
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.ILReader.ILReaderMetadataProvider">
            <summary>
            Provides metadata interface for various sources (ILReader version, only managed code)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataProvider.DisposeMetadataAccess(JetBrains.Metadata.Access.IMetadataAccess)">
            <summary>
            You must call DisposeMetadataAccess after every GetFrom* method,
            but if you're loading assemblies via MetadataLoader that will be done for you automatically
            on loader dispose
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.TypeDefProperties">
            <summary>
            Structure for storing typedef properties
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeDefProperties.FullName">
            <summary>
            Gets fully qualified type name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeDefProperties.BaseToken">
            <summary>
            Gets base token
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeDefProperties.TypeDefFlags">
            <summary>
            Gets typedef flags
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.TypeRefProperties">
            <summary>
            Structure for storing typeref properties
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeRefProperties.ResolutionScope">
            <summary>
            Gets type reference resolution scope
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeRefProperties.NamespaceName">
            <summary>
            Gets references type namespace name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeRefProperties.TypeName">
            <summary>
            Gets references type name (without namespace)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.TypeRefProperties.FullName">
            <summary>
            Gets references type name (namespace_name.type_name)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.GenericParamProperties.Name">
            <summary>
            Gets name of generic parameter
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.GenericParamProperties.ParamIndex">
            <summary>
            Gets generic parmeter index
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.GenericParamProperties.OwnerToken">
            <summary>
            Gets owner token
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.GenericParamProperties.GenericParamAttributes">
            <summary>
            Gets generic param attributes
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.GenericParamProperties.Constraints">
            <summary>
            Gets generic param constraints
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.CustomAttributeProperties.TypeToken">
            <summary>
            .ctor method token
            (the owner of that constructor method is the type of the custom attribute)
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.MemberReferenceProperties">
            <summary>
            Stores properties of a member reference
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.IMetadataAccess">
            <summary>
            Interface for accessing metadata in abstract way
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetAssemblyInfo">
            <summary>
            Gets assembly info interface if available
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetModuleRefs">
            <summary>
            Gets array of all available module references
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeDefs">
            <summary>
            Gets array of all available typedef tokens
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeDefProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a typedef
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeRefProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a typeref
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeSpecBlob(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets blob for typeSpec
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetStandaloneSignatureBlob(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets blob for StandAloneSig
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethodSpecProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets blob for typeSpec
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.FindMethodSpecs(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Find all MethodSpec records for concrete method def or ref
            </summary>
            <param name="methodDefOrRef">MethodDefOrRef token</param>
            <returns>Array of corresponding MethodSpec tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetGenericParameters(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of generic parameters fot the specified owner
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetGenericParamProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a generic parameter
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetInterfaceImplementations(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of implemented interfaces tokens for specified type
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMemberName(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets member (field, method, event or property) name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetFields(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of type fields
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetFieldProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets field properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethods(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of type methods
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethodProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets method properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetParameters(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets method parameters
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetParameterByIndex(JetBrains.Metadata.Access.MetadataToken,System.UInt32)">
            <summary>
            Gets parameter by its index in method signature
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetParameterProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets parameter properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of type properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetPropertyProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets property properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetEvents(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of type events
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetEventProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets event properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetEnclosingType(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets enclosing type
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetCustomAttributes(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets array of custom attributes attached to the specified entity
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetCustomAttributeProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets custom attribute properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetCustomAttributeTypeName(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets custom attribute type fully qualified name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetModuleRefProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a module reference
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMemberReferenceProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a member reference
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetManifestResourceProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets properties of a manifest resource
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethodImplementationProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets method implementation map for a type
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetPInvokeProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets PInvoke dispatch information for method 
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMarshalSpec(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets marshalling specification for field or parameter if available, null if not
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeRefs">
            <summary>
            Gets array of type references from the assembly
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetClassLayout(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets class layout if specified, null if not
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetUserString(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets the string from userstring heap
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetDeclSecurity(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Get DeclSecurity rows
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetDeclSecurityProperties(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Get DeclSecurity properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetDeclSecurityTypeNames(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Get DeclSecurity attribute types names (extracted from blob)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.FindTypeRef(JetBrains.Metadata.Access.MetadataToken,System.String)">
            <summary>
            Finds a record in TypeRef table
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetTypeSpecs">
            <summary>
            Enumerates all TypeSpec records
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethodSpecs">
            <summary>
            Enumerates all MethodSpec records
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetStandaloneSigs">
            <summary>
            Enumerates all StandaloneSig records
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethods">
            <summary>
            Enumerates all MethodDef records
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetManifestResources">
            <summary>
            Enumerates all ManifestResource records
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.FindMemberRefs(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Finds all MemberRefs owned by type <paramref name="typeToken"/>
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetMethodRvaMap">
            <summary>
            Returns code RVA for every method in assembly.
            Offset in array corresponds to method RID (at zero position - RID 1)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAccess.GetEmbeddedResourceOffset(System.Int64)">
            <summary>
            Returns embedded resource offset (in PE file) by resource offset from
            metadata table or -1 if not available
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.IMetadataAccess.MetadataProvider">
            <summary>
            Metadata provider used to create metadata access
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.IMetadataAccess.Mvid">
            <summary>
            Gets unique MVID
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.IMetadataAccess.TargetPlatform">
            <summary>
            Gets target platform
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.IMetadataAccess.NestedTypeMap">
            <summary>
            Nested-relation between types
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.IMetadataAccess.TypeName2TokenMapping">
            <summary>
            Mapping between qualified type names and their typedef tokens
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.ExportedTypeProperty.Token">
            <summary>
            Exported type token
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.ExportedTypeProperty.ClrName">
            <summary>
            The name of the exported type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.ExportedTypeProperty.Implementation">
            <summary>
            An mdFile, mdAssemblyRef, or mdExportedType metadata token that contains or allows access to the properties of the exported type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.ExportedTypeProperty.TypeDef">
            <summary>
            mdTypeDef token that represents a type in the file
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.ExportedTypeProperty.ExportedTypeFlags">
            <summary>
            flags that describe the metadata applied to the exported type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.FileReference.Name">
            <summary>
            The simple name of the file
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.FileReference.Token">
            <summary>
            Token of file reference
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Access.FileReference.FileFlags">
            <summary>
            flags that describe the metadata applied to a file
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.IMetadataAssemblyInfo">
            <summary>
            Provides access to assembly metadata info
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAssemblyInfo.GetAssemblyName">
            <summary>
            Gets full assembly name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAssemblyInfo.GetReferencedAssembliesNames">
            <summary>
            Gets names of referenced assemblies
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAssemblyInfo.GetExportedTypes">
            <summary>
            Get the exported types table
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAssemblyInfo.GetReferencedFiles">
            <summary>
            files referenced in the current assembly manifest
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.IMetadataAssemblyInfo.GetToken">
            <summary>
            Gets assembly token
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.ILReader.EncodedTokenType">
            <summary>
            Type of the encoded token in the CIL tables
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.ILReader.ITableReader">
            <summary>
            Metadata tables reader 
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.ILReader.ITableReader.ReadString">
            <summary>
            Read index to the #Strings heap
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.ILReader.ITableReader.ReadGuid">
            <summary>
            Read index to the #GUID heap
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.ILReader.ITableReader.ReadBlob">
            <summary>
            Read index to the #Blob heap
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.ILReader.ILReaderMetadataAccess">
            <summary>
            PE file metadata reader
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Access.ILReader.ILReaderMetadataAccess.SortedByPrimaryKeyTables">
            <summary>
            ECMA-335 p.22
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Access.ILReader.TableManager.CODED_TOKEN_BITS">
            <summary>
            Contains number of bits to represent coded token.
            Indexed by number of possible values in given coded token type
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Access.ILReader.TableManager.TableReader.ReadCodedToken(JetBrains.Metadata.Access.ILReader.EncodedTokenType)">
            <summary>
            Read coded (multi targeting) token
            </summary>
            <param name="type">Set of the token targets</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Metadata.Access.MetadataProviderFactory">
            <summary>
            Provides metadata interface for various sources
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.MetadataTableId">
            <summary>
            Metadata tables
            </summary>
            <remarks>
            Partition II: Metadata Definition and Semantics. 22 Metadata logical format: tables.
            bh - Blob heap,
            sh - String heap,
            gh - GUID heap
            </remarks>
        </member>
        <member name="T:JetBrains.Metadata.Access.Prologs">
            <summary>
            Enumerates prologs for different signatures
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Access.MetadataToken">
            <summary>
            Represents metadata token
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.ExceptionHandler">
            <summary>
            MSIL exception handler record
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.ExceptionHandlerType">
            <summary>
            Exception handler type
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.FlowControl">
            <summary>
             IL Code FlowControl enumeration
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.IInstructionRedirector.Redirect(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Instruction redirection
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.ILMethodFlags">
            <summary>
            IL method body flags
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.SmallCode">
            <summary>
            Small Code 
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.TinyCode">
            <summary>
            Tiny code format
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.FatCode">
            <summary>
            Fat code format
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.CodeMask">
            <summary>
            Mask for extract code type
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.InitLocals">
            <summary>
            Runtime call default constructor on all local vars
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.ILMethodFlags.MoreSects">
            <summary>
            there is another attribute after this one
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.Instruction">
            <summary>
            MSIL instruction.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.IL.Instruction.Offset">
            <summary>
            Instruction offset from the method beginning.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.IL.Instruction.Size">
            <summary>
            Instruction size (in bytes) including the operands.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.IL.Instruction.Code">
            <summary>
            Instruction opcode.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.IL.Instruction.Operand">
            <summary>
            Polymorphic operand whose exact type depends on <see cref="P:JetBrains.Metadata.IL.Opcode.OperandType"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.ILMethodBody">
            <summary>
            MSIL Method body
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.InstructionEx">
            <summary>
            Provides type-safe utilities for extracting <see cref="P:JetBrains.Metadata.IL.Instruction.Operand"/> depending on <see cref="P:JetBrains.Metadata.IL.Opcode.OperandType"/>
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionEx.GetBranchTargetOperand(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Target instruction relative offset (from the beginning of the instruction following the current instruction)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionEx.GetNextInstructionOffset(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Next instruction absolute offset (from the beginning of the method)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionEx.GetBranchTargetInstructionOffset(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Target instruction absolute offset (from the beginning of the method)
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.TargetFrameworkId">
            <summary>
            .kproj (ASP .Net 5.0 projects) may target different frameworks using different project properties and reference sets. 
            The class is used to support it.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.TargetFrameworkId.Default">
            <summary>
            This is a temporary value used while refactoring
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.AssemblyItem.ProgramDatabase">
            <summary>
            Optional program database (PDB) file for this DLL.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.AssemblyItem.XmlDocumentation">
            <summary>
            Optional XmlDoc file for this DLL.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyNameMetadataExtensions.FindAssemblyFile(JetBrains.Util.FileSystemPath,JetBrains.Metadata.Utils.AssemblyNameInfo,System.Boolean)">
            <summary>
            Checks for the existing files and chooses the assembly extension from the list, eg “exe” or “dll”.
            Throws if not found.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyNameMetadataExtensions.FindAssemblyFile(JetBrains.Util.FileSystemPath,System.String,System.Boolean)">
            <summary>
            Checks for the existing files and chooses the assembly extension from the list, eg “exe” or “dll”.
            Throws if not found.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyContentType">
            <summary>
            Provides information about the type of code contained in an assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer">
            <summary>
            Compares assembly identities. 
            Derived types may implement platform specific unification and portability policies.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ReferenceMatchesDefinition(System.String,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            Compares assembly reference name (possibly partial) with definition identity.
            </summary>
            <param name="referenceDisplayName">Partial or full assembly display name.</param>
            <param name="definition">Full assembly display name.</param>
            <returns>True if the reference name matches the definition identity.</returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ReferenceMatchesDefinition(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            Compares assembly reference identity with definition identity.
            </summary>
            <param name="reference">Reference assembly identity.</param>
            <param name="definition">Full assembly display name.</param>
            <returns>True if the reference identity matches the definition identity.</returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.Compare(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            Compares reference assembly identity with definition identity and returns their relationship.
            </summary>
            <param name="reference">Reference identity.</param>
            <param name="definition">Definition identity.</param>
        </member>
        <member name="T:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ComparisonResult">
            <summary>
            A set of possible outcomes of <see cref="T:JetBrains.Metadata.Utils.AssemblyNameInfo"/> comparison.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ComparisonResult.NotEquivalent">
            <summary>
            Reference doesn't match definition.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ComparisonResult.Equivalent">
            <summary>
            Strongly named reference matches strongly named definition (strong identity is identity with public key or token),
            Or weak reference matches weak definition.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyNameInfoComparer.ComparisonResult.EquivalentIgnoringVersion">
            <summary>
            Reference matches definition except for version (reference version is lower or higher than definition version).
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyVersion.op_Explicit(System.Version)~JetBrains.Metadata.Utils.DotNetLegacy.AssemblyVersion">
            <summary>
            Converts <see cref="T:System.Version"/> to <see cref="T:JetBrains.Metadata.Utils.DotNetLegacy.AssemblyVersion"/>.
            </summary>
            <exception cref="T:System.InvalidCastException">Major, minor, build or revision number are less than 0 or greater than 0xFFFF.</exception>
        </member>
        <member name="M:JetBrains.Metadata.Utils.DotNetLegacy.DesktopAssemblyNameComparer.IsFrameworkAssembly(JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <summary>
            Returns true if the identity is a Framework 4.5 or lower assembly.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.ConflictingNamesHelper.GetConflictingNames(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Short names of properties, fields, events, nested types of typeElement which may conflict with names of used types
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.ISequencePointInstructionRedirector.ToSequencePointInstructionIndex(System.Int32)">
            <summary>
            Redirects instructionIndex to associated sequence point instruction index
            (returns -1 in case of error)
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbSource">
            <summary>
            Partial implementation of System.Diagnostics.SymbolStore.ISymbolDocument
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbSource.URL">
            <summary>
            The URL (file name) of the current document
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbSource.DocumentType">
            <summary>
            Gets the type of the current document
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbSource.Language">
            <summary>
            Gets the language of the current document
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbSource.LanguageVendor">
            <summary>
            Gets the language vendor of the current document
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetMinimumStackHeightForCallAndCallvirt(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Gets required number of items that should be on stack before execution of this call/callvirt instruction
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetMinimumStackHeightForNewobj(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Gets required number of items that should be on stack before execution of this newobj instruction
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetMinimumStackHeightForCalli(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Gets required number of items that should be on stack before execution of this calli instruction
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetMinimumStackHeightForRet(JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Gets required number of items that should be on stack before execution of ret instruction in this method
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetMinimumStackHeight(JetBrains.Metadata.IL.Instruction,JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Gets required number of items that should be on stack before execution of this instruction
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetStackPushItemsCount(JetBrains.Metadata.IL.Instruction)">
            <summary>
            Gets number of items that are pushed on stack by this instruction
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.IL.InstructionStackEx.GetRequiredPrefixPushCount(JetBrains.Metadata.IL.Instruction,JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Gets number of items that should be pushed into stack before execution of this instruction 
            </summary>
            <remarks>0 - sequence point associated with this instruction is allowed</remarks>
        </member>
        <member name="T:JetBrains.Metadata.IL.Opcode">
            <summary>
            MSIL opcode value
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.Opcodes">
            <summary>
             OpCodes static definitions
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.OpcodeType">
            <summary>
             OpcodeType enumeration
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.OpcodeValue">
            <summary>
             Operation codes enumeration
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Break">
            <summary>
            Debugging breakpoint
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Br_s">
            <summary>
            The short-parameter form of br.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Brfalse_s">
            <summary>
            Branch if {value} is zero.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Brtrue_s">
            <summary>
            Branch if {value} is nonzero
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Beq_s">
            <summary>
            Branch if {value1} is equal to {value2}.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.IL.OpcodeValue.Bne_un_s">
            <summary>
            Branch if the two values are not equal. Integer values are interpreted as unsigned
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.OperandType">
            <summary>
            Describes the possible types of <see cref="P:JetBrains.Metadata.IL.Instruction.Operand"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.IL.StackBehavior">
            <summary>
             StackBehaviour enumeration
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.AssemblyReferenceWithSource">
            <summary>
            Data class to encapsulate source module's path and the referenced assembly name to be resolved
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IAssemblyResolver">
            <summary>
            Interface for resolving assembly names to assemblies
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IAssemblyResolver.ResolveAssembly(JetBrains.Metadata.Utils.AssemblyNameInfo,JetBrains.Util.FileSystemPath@,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Resolves assembly name to assembly metadata interface
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext.UniqueName">
            <summary>
            Presentable name for diagnostic issues
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext.Originator">
            <summary>
              <para>If we're resolving the reference as originated in some assembly, specifies that assembly.</para>
              <para>This is useful both for diagnostics and for looking up assembly files in folders nearby the originator.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.EmptyResolveContext">
            <summary>
            Suppresses module to module resolution
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.GacAssemblyResolver">
            <summary>
            Searches in gac
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.GacAssemblyResolver.GacResolvePreferences.MatchExact">
            <summary>
            Favors the specific version number and public key.
            TODO: should eventually take publisher policies into account.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.GacAssemblyResolver.GacResolvePreferences.MatchSameOrNewer">
            <summary>
            Prefers the exact match, but also tries to look up a newer assembly with the same name as a fallback.
            This roughly emulates the “unification” e.g. when we're reading a parts catalog on a machine which only has NetFX4+ installed and cannot load “System.Drawing v2.0” for us.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.GacAssemblyResolver.GacResolvePreferences.RedirectGac20ToGac40">
            <summary>
            If the same assembly is present in both GAC20 and GAC40, take the newer one assuming it covers all of the older functionality.
            This is essential if you're running CLR2 assemblies (with references to v2.0 GAC assemblies) on the new CLR.
            TODO: take assembly unification into account, as probably not all of the assemblies should be redirected this way
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IClrTypeName.GetPersistent">
            <summary>
            Since few implementation relies on internal data, <see cref="T:JetBrains.Metadata.Reader.API.IClrTypeName"/> is valid only during single ReadLock session.
            This returns independent implementation
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IEntityPresentations.GetFieldPresentations(JetBrains.Metadata.Reader.API.IMetadataField)">
            <summary>
            Returns field defs or refs that corresponds to <paramref name="field"/> in this assembly
            </summary>
            <returns>Array of field defs or refs tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IEntityPresentations.GetTypePresentations(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Returns type defs, refs or specs that corresponds to <paramref name="typeInfo"/> in this assembly
            </summary>
            <returns>Array of type defs, refs or specs tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IEntityPresentations.GetMethodPresentations(JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Returns method specs, defs or refs that corresponds to <paramref name="method"/> in this assembly
            </summary>
            <returns>Array of method specs, defs, refs tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IEntityPresentations.GetTokenFromTypeInfo(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Find a token that corresponds to <paramref name="typeInfo"/> in this assembly
            </summary>
            <returns>TypeDef or TypeRef or Nil</returns>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataAssembly">
            <summary>
            Interface which is used to access metadata of an assembly
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataEntity">
            <summary>
            Base interface for all metadata entities
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataEntity.GetCustomAttributes(System.String)">
            <summary>
            Gets array of attributes having the specified fully qualified name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataEntity.HasCustomAttribute(System.String)">
            <summary>
            Checks if an entity has a custom attribute
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEntity.Assembly">
            <summary>
            Assembly where this entity is located
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEntity.Token">
            <summary>
            Gets assembly token
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEntity.CustomAttributes">
            <summary>
            Gets array of custom attributes defined for this metadata entity
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEntity.CustomAttributesTypeNames">
            <summary>
            Gets array of custom attributes type names (much faster than getting entire custom attributes)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEntity.IsResolved">
            <summary>
            Returns whether this entity points to existent entity
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityOwner.Security">
            <summary>
            DeclSecurity rows
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityOwner.SecurityAttributesTypeName">
            <summary>
            Qualified names of security attributes
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityOwner.HasSecurity">
            <summary>
            Gets flag indicating whether the method has security attributes
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetTypeInfoFromQualifiedName(System.String,System.Boolean)">
            <summary>
            Gets type info from its qualified name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetTypeInfoFromToken(JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets type info from its token
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetTypeFromQualifiedName(System.String,System.Boolean)">
            <summary>
            Gets type from its qualified name
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetTypes">
            <summary>
            Gets array of types defined in the assembly
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetExportedTypes">
            <summary>
            Gets types exported from other modules
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetForwardedTypes">
            <summary>
            Gets types forwarded to another assembly (TypeForwardedTo)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.GetManifestResources">
            <summary>
            Gets manifest resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.CreateImageBodyReader">
            <summary>
            Returns new image body reader
            It opens module for read and closes it upon Dispose
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataAssembly.CreateUsagesFinder">
            <summary>
            Returns new usages finder
            Note: It reads module into memory upon creation
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataAssembly.AssemblyName">
            <summary>
            Gets assembly name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataAssembly.Mvid">
            <summary>
            Gets assembly mvid
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataAssembly.ReferencedAssembliesNames">
            <summary>
            Gets array of referenced assemblies' names
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataAssembly.Location">
            <summary>
            Gets assembly location
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataAssembly.ModuleAttributes">
            <summary>
            Gets array of custom attributes associated with the main module
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataForwardedTypeInfo.AssemblyName">
            <summary>
            Where the forwarded type is declared (forwarded to)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataForwardedTypeInfo.FullName">
            <summary>
            Forwarded type FQN
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataFunctionPointerType">
            <summary>
            Unmanaged pointer to a function (fnptr)
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataType">
            <summary>
            Represents a type in metadata.
            Use <see cref="T:JetBrains.Metadata.Reader.API.MetadataTypeComparer"/> as comparer
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataType.AssemblyQualifiedName">
            <summary>
            Gets type presentable name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataType.TypeModifiers">
            <summary>
            Gets array of modopts and modreqs
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityAttribute.InitializedFields">
            <summary>
            Gets explicitly initialized fields
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityAttribute.InitializedProperties">
            <summary>
            Gets explicitly initialized properties
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityAttribute.ConstructorArgumentsBlob">
            <summary>
            Not decoded attribute constructor arguments
            </summary>
            <remarks>
            We don't know which constructor is used for creating this attribute (in contrast to custom attribute),
            therefore we don't know parameters types => can't properly decode arguments
            </remarks>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataSecurityAttribute.Action">
            <summary>
            In the normal case it should be equal to DeclaringSecurityRow.Action
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeMember.Name">
            <summary>
            Gets member name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeMember.DeclaringType">
            <summary>
            Gets type which declares the member. Always null for top-level types
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeMember.IsSpecialName">
            <summary>
            Gets flag indicating whether the member has special name flag
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMethodBodyLocalVariable.Method">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMethodBodyLocalVariable.Index">
            <summary>
            Sequence number in method local variables list
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMethodBodyLocalVariable.Type">
            <summary>
            Local variable type
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMethodBodyUsagesFinder.FindUsagesOf(JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Find usages of <paramref name="method"/> in method bodies of current assembly
            (one IMethodBodyUsagesFinder was created from).
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMethodBodyUsagesFinder.FindUsagesOf(JetBrains.Metadata.Reader.API.IMetadataField)">
            <summary>
            Find usages of <paramref name="field"/> in method bodies of current assembly
            (one IMethodBodyUsagesFinder was created from).
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMethodBodyUsagesFinder.FindUsagesOf(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Find explicit usages of <paramref name="typeInfo"/> in method bodies of current assembly
            (one IMethodBodyUsagesFinder was created from).
            </summary>
            <remarks>
            Covered cases of explicit type usage in method body: typeof (including generic instantiation,
            modreq, modopt, function pointers), calls of type's static methods and constructors,
            accessing static fields, casts to type, catch arguments, local variables types
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMethodBodyUsagesFinder.FindUsagesOf(JetBrains.Metadata.Access.MetadataToken,System.String)">
            <summary>
            Find usages of <paramref name="userString"/> in method bodies of current assembly
            (one IMethodBodyUsagesFinder was created from).
            </summary>
            <remarks>
            Find all methods containing ldstr instruction with userStringToken operand
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMethodBodyUsagesFinder.FindDefaultConstructorUsagesOfValueType(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Find usages of default constructor of value type <paramref name="typeInfo"/> in method bodies of current assembly
            (one IMethodBodyUsagesFinder was created from).
            </summary>
            <remarks>
            Find all methods containing initobj instruction with typeInfo.Token operand
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.MetadataFieldEx.IsVolatile(JetBrains.Metadata.Reader.API.IMetadataField)">
            <summary>
            Gets flag indicating whether the field has volatile modifier
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.MetadataLoaderErrors">
            <summary>
            Allows to listen to non-fatal metadata reader errors, such as unresolved type.
            Such errors are expected to happen when you're reading just one assembly without resolving its references, thus they're not reported to the logger as regular exceptions. You can opt in for receiving such error notifications.
            </summary>
            <remarks>A custom implementation of events: allows to know if there're any sinks at all, so that not to fire / prepare eventargs when nobody is listening. This is critical for good PSI performance.</remarks>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.IncompleteAttribute">
            <summary>
            Fires when a Custom Attribute can not be entirely deserialized.
            You cannot read the CA stream to the end without additional info, which info you must get from external assemblies. If those are missing or walking into references is not allowed, you cannot parse the stream because the records size cannot be determined (for values of an Enum type, their size is not specified, you must load the assembly declaring the enum type to read even the knonw arguments).
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.UndeclaredAssemblyReference">
            <summary>
            Fires when an implicit assembly reference is encountered — i.e. to parse metadata, we have to load an external assembly which is not explicitly listed in assembly references.
            An example is reading of the Custom Attribute stream, which might include string representations of assembly-qualified type names pointing to other assemblies. If such assemblies are only used in CA parameters, they would yield no typeref tokens (only a plaintext representation), and CSC would optimize away the assembly references to them.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.UnresolvedType">
            <summary>
            Fires when a type reference can not be resolved.
            Put aside external calls into assembly thru public API, there're two major cases for internal calls from metadata entities of the assembly:
            (1) <see cref="F:JetBrains.Metadata.Access.MetadataToken.TT_TYPEDEF"/> or <see cref="F:JetBrains.Metadata.Access.MetadataToken.TT_TYPEREF"/> token resolution.
            (2) Resolution of a string representation of an assembly-qualified type reference (e.g. a type of the named actual parameter in Custom Attribute stream).
            In the latter case, you're getting <see cref="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.IncompleteAttribute"/> as well.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.UnresolvedTypeArgs.AssemblyTypeQualification">
            <summary>
            <see cref="F:JetBrains.Metadata.Reader.API.MetadataLoaderErrors.UnresolvedTypeArgs.TypeFqn"/> assembly qualification, if available.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.MetadataTypeComparer">
            <summary>
            Compares two metadata types.
            Note: generic argument references are compared by kind and index,
            not actual generic argument entity they are resolved to.
            modopt's and pinned are ignored, modreq's are not.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.MetadataTypeReference">
            <summary>
            Reference to type. Name of the type and assmly where it is declared
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataTypeReference.AssemblyName">
            <summary>
            Assembly name
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataTypeReference.NamespaceName">
            <summary>
            Namespace name of the type
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MetadataTypeReference.TypeName">
            <summary>
            Name of the type without namespace
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.MetadataTypeReference.FullName">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.ReferencesAssemblyResolver">
            <summary>
            Searches in gac and near provided assembly. Note: ignores version redirection, probing path and so on
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.SecurityAction">
            <remarks>
            The values 0–0xFF are reserved for future standards use.
            Values 0x20–0x7F and 0x100–0x07FF are for uses where the action can be ignored if it is not understood or supported.
            Values 0x80–0xFF and 0x0800–0xFFFF are for uses where the action shall be implemented for secure operation; in implementations where the action is not available, no access to the assembly, type, or method shall be permitted.
            </remarks>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.StandardOperatorNames">
            <summary>
            See Paritition I, 10.3.2.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.Impl.CombiningAssemblyResolver">
            <summary>
            Compound resolver. Tries to resolve the assembly thru all of the given resolvers, in order of appearance.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataCustomAttributePropertyInitialization">
            <summary>
            Entity which stores data about initialized property of a custom attribute
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttributePropertyInitialization.Property">
            <summary>
            Gets initialized property
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttributePropertyInitialization.Value">
            <summary>
            Gets value the property is initialized with
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataCustomAttributeFieldInitialization">
            <summary>
            Entity which stores data about initialized field of a custom attribute
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttributeFieldInitialization.Field">
            <summary>
            Gets initialized field
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttributeFieldInitialization.Value">
            <summary>
            Gets value the field is initialized with
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.Impl.FailAssemblyResolver">
            <summary>
            Logs assembly resolution failures.
            If adding to <see cref="T:JetBrains.Metadata.Reader.Impl.CombiningAssemblyResolver"/>, must be the last one.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataTypeInfo">
            <summary>
            Interface for accessing types metadata
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetMemberInfos">
            <summary>
            Get the names of all members (except of nested type names).
            This is fast, not decoding
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetMethods">
            <summary>
            Gets type methods
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetFields">
            <summary>
            Gets type fields
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetProperties">
            <summary>
            Gets type properties
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetEvents">
            <summary>
            Gets type events
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GetNestedTypes">
            <summary>
            Gets nested types
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.FullyQualifiedName">
            <summary>
            Gets fully qualified name of the type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.AssemblyQualifiedName">
            <summary>
            Gets assembly qualified name of the type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.NamespaceName">
            <summary>
            Gets namespace of the type.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.TypeName">
            <summary>
            Gets name of the type. For nested types, it is the combination of (owner name + Name)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.DeclaringAssemblyName">
            <summary>
            Assembly name (if any) where this type is located
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.Base">
            <summary>
            Gets base type
            </summary>
            <remarks>Returns null if there is no base type</remarks>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.Interfaces">
            <summary>
            Gets array of interfaces implemented by this type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.GenericParameters">
            <summary>
            Gets array of generic arguments of this type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsAbstract">
            <summary>
            Gets flag indicating whether the type is abstract
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsSealed">
            <summary>
            Gets flag indicating whether the type is abstract
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsImported">
            <summary>
            Gets flag indicating whether the type is imported
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.Layout">
            <summary>
            Fields layout type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.InteropStringFormat">
            <summary>
            Charset for pinvoke calls
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsClass">
            <summary>
            Gets flag indicating whether the type is a class type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsInterface">
            <summary>
            Gets flag indicating whether the type is an interface
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsSerializable">
            <summary>
            Gets flag indicating whether the type is serializable
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsWindowsRuntime">
            <summary>
            Gets flag indicating whether the type is Windows Runtime type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsPublic">
            <summary>
            Gets flag indicating whether the type is public
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNotPublic">
            <summary>
            Gets flag indicating whether the type is not public
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNested">
            <summary>
            Gets flag indicating whether the type is a nested of any type (i.e. any of IsNested* is true)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedPublic">
            <summary>
            Gets flag indicating whether the type is a nested public type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedPrivate">
            <summary>
            Gets flag indicating whether the type is a nested private type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedFamily">
            <summary>
            Gets flag indicating whether the type is a nested family type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedAssembly">
            <summary>
            Gets flag indicating whether the type is a nested assembly type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedFamilyAndAssembly">
            <summary>
            Gets flag indicating whether the type is a nested family-and-assembly type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.IsNestedFamilyOrAssembly">
            <summary>
            Gets flag indicating whether the type is a nested family-or-assembly type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.PackingSize">
            <summary>
            Packing size for layout process. Positive value if specified
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataTypeInfo.ClassSize">
            <summary>
            Class size. Positive value if specified
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IImageBodyReader.GetMethodBody(JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Returns method body presentation
            </summary>
            <exception cref="T:JetBrains.Metadata.Utils.PE.MetadataReaderException">Throws if method body reader failed</exception>
            <param name="method"></param>
            <returns>Method body presentation if available, null if no method implementation found</returns>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.ElementType">
            <summary>
            Gets element type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.IsVector">
            <summary>
            Returns whether this type is vector
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.Rank">
            <summary>
            Gets array rank
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.Sizes">
            <summary>
            Gets sizes if specified. Note that sizes might be specified not for all dimensions.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.LBounds">
            <summary>
            Gets low bounds if specified. Note that low bounds might be specified not for all dimensions.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataArrayType.TypeInfo">
            <summary>
            Gets type generated for array
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataClassType">
            <summary>
            A type which corresponds to a type or instance of a generic class
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataClassType.Type">
            <summary>
            Gets underlying metadata type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataClassType.Arguments">
            <summary>
            Gets type parameters if applicable
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataCustomAttribute">
            <summary>
            Represents a custom attribute
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttribute.UsedConstructor">
            <summary>
            Gets constructor which is used for instantiating the attribute
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttribute.ConstructorArguments">
            <summary>
            Gets array of values passed as arguments to the used constructor
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttribute.InitializedFields">
            <summary>
            Gets explicitly initialized fields
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataCustomAttribute.InitializedProperties">
            <summary>
            Gets explicitly initialized properties
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataEvent">
            <summary>
            Represents event metadata
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEvent.Type">
            <summary>
            Gets event type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEvent.Adder">
            <summary>
            Gets adder method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEvent.Remover">
            <summary>
            Gets remover method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEvent.Raiser">
            <summary>
            Gets raiser method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataEvent.OtherMethods">
            <summary>
            Gets array of other event methods
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataField">
            <summary>
            Represents field metadata
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataField.GetLiteralValue">
            <summary>
            Gets literal field value
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataField.GetLiteralValueBlob">
            <summary>
            Gets literal field value blob
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.Type">
            <summary>
            Gets field type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.MarshalSpec">
            <summary>
            Gets a marshalling specification if HasMarshalSpec
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.Offset">
            <summary>
            Field offset in type instance. Non-negative value if specified
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.Signature">
            <summary>
            Gets the field signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.InitialValueRva">
            <summary>
            Gets initial value RVA in case value stored in the image itself, not metadata
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsAssembly">
            <summary>
            Gets flag indicating whether the field has assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsPrivate">
            <summary>
            Gets flag indicating whether the field is private
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsPublic">
            <summary>
            Gets flag indicating whether the field is public
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsFamily">
            <summary>
            Gets flag indicating whether the field has family visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsFamilyAndAssembly">
            <summary>
            Gets flag indicating whether the field has family-and-assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsFamilyOrAssembly">
            <summary>
            Gets flag indicating whether the field has family-or-assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsStatic">
            <summary>
            Gets flag indicating whether the field is static
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsInitOnly">
            <summary>
            Gets flag indicating whether the field is readonly
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.IsLiteral">
            <summary>
            Gets flag indicating whether the field is literal
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.HasMarshalSpec">
            <summary>
            Gets flag indicating whether the field has associated marshaling spec
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataField.NotSerialized">
            <summary>
            Gets flag indicating whether the field must not be serialized
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataGenericArgument">
            <summary>
            Represents a generic type argument
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.Kind">
            <summary>
            Gets generic argument kind: whether it is owned by a type or by a method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.Name">
            <summary>
            Gets argument name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.Index">
            <summary>
            Gets generic argument index
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.TypeOwner">
            <summary>
            Gets type owner, if the parameter belongs to a type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.MethodOwner">
            <summary>
            Gets method owner, if the parameter belongs to a method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.TypeConstraints">
            <summary>
            Gets argument type constraints, if specified
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgument.Attributes">
            <summary>
            Gets argument attributes
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataGenericArgumentReferenceType">
            <summary>
            A type which is unbound reference to a generic parameter
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataGenericArgumentReferenceType.Argument">
            <summary>
            Gets referenced generic argument
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataMethod">
            <summary>
            Represents a metadata method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.ReturnValue">
            <summary>
            Get the return value (which is encoded as zero-index parameter)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.Parameters">
            <summary>
            Gets method parameters
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.GenericArguments">
            <summary>
            Gets array of generic arguments of this type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.ImplementedMethods">
            <summary>
            Gets array of explicitly implemented methods
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.Signature">
            <summary>
            Gets method signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.PInvokeInfo">
            <summary>
            PInvoke mapping if IsPInvokeImpl AND signature was successfully decoded
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.MethodImplFlags">
            <summary>
            Gets all impl method flags in one call
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsPInvokeImpl">
            <summary>
            Gets flag indicating whether the method has PInvoke implementation
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.CodeType">
            <summary>
            Returns method implementation platform (IL, native code or runtime embedded)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsForwardRef">
            <summary>
            Indicates the method is defined; used primarily in merge scenarios.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsPreserveSig">
            <summary>
             Indicates method sig is not to be mangled to do HRESULT conversion.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsInternalCall">
            <summary>
            Method is implemented in runtime (?)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsSynchronized">
            <summary>
            Method is single threaded through the body.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.NoInlining">
            <summary>
            Method may not be inlined
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.AggressiveInlining">
            <summary>
            Method should be inlined if possible
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.NoOptimization">
            <summary>
            Method may not be optimized
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsAssembly">
            <summary>
            Gets flag indicating whether the method has assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsPrivate">
            <summary>
            Gets flag indicating whether the method is private
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsPublic">
            <summary>
            Gets flag indicating whether the method is public
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsFamily">
            <summary>
            Gets flag indicating whether the method has family visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsFamilyAndAssembly">
            <summary>
            Gets flag indicating whether the method has family-and-assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsFamilyOrAssembly">
            <summary>
            Gets flag indicating whether the method has family-or-assembly visibility
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsStatic">
            <summary>
            Gets flag indicating whether the method is static
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsAbstract">
            <summary>
            Gets flag indicating whether the method is abstract
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsVirtual">
            <summary>
            Gets flag indicating whether the method is virtual
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsFinal">
            <summary>
            Gets flad indicating whether the method can be overriden
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsHideBySig">
            <summary>
            Gets flag indicating whether the method hides by name and signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsNewSlot">
            <summary>
            Gets flag indicating whether the method is newslot
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsVarArg">
            <summary>
            Gets flag indicating whether the method is vararg
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataMethod.IsUnmanaged">
            <summary>
            Gets flag indicating whether the method is unmanaged
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataParameter">
            <summary>
            Represents a method parameter
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataParameter.GetDefaultValue">
            <summary>
            Gets default field value
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.IMetadataParameter.GetDefaultValueBlob">
            <summary>
            Gets default field value
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.Name">
            <summary>
            Gets parameter name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.Type">
            <summary>
            Gets parameter type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.DeclaringMethod">
            <summary>
            Gets method which declares this parameter
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.MarshalSpec">
            <summary>
            Gets a marshalling specification if HasMarshalSpec
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.IsIn">
            <summary>
            Gets flag indicating whether the parameter is input
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.IsOut">
            <summary>
            Gets flag indicating whether the parameter is output
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.IsParamArray">
            <summary>
            Gets flag indicating whether the parameter is parameter array
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.IsOptional">
            <summary>
            Gets flag indicating whether the parameter is optional
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.HasMarshalSpec">
            <summary>
            Gets flag indicating whether the parameter has associated marshaling spec
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataParameter.HasDefaultValue">
            <summary>
            Gets flag indicating whether the parameter has associated default value
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataPointerType">
            <summary>
            Unmanaged pointer to a type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataPointerType.Type">
            <summary>
            Gets nested type
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataProperty">
            <summary>
            Represents a property metadata
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataProperty.Type">
            <summary>
            Gets property type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataProperty.Getter">
            <summary>
            Gets getter method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataProperty.Setter">
            <summary>
            Gets setter method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataProperty.OtherAccessors">
            <summary>
            Gets all property accessors
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataReferenceType">
            <summary>
            Managed pointer to a type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataReferenceType.Type">
            <summary>
            Gets nested type
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.IMetadataReturnValue">
            <summary>
            Represents a method return value (which is encoded as zero-index parameter)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataReturnValue.DeclaringMethod">
            <summary>
            Gets method which declares this parameter
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataReturnValue.Type">
            <summary>
            Gets parameter type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataReturnValue.MarshalSpec">
            <summary>
            Gets a marshalling specification if HasMarshalSpec
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.IMetadataReturnValue.HasMarshalSpec">
            <summary>
            Gets flag indicating whether the parameter has associated marshaling spec
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.MemberInfo">
            <summary>
            Unified information about type member
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MemberInfo.Name">
            <summary>
            Name of the type member
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Reader.API.MemberInfo.Token">
            <summary>
            Member token
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Reader.API.MetadataLoader">
            <summary>
            Manages metadata loading. 
            Note: loading assembly into metadata loader holds assembly metadata
            for loader lifetime. It's a bad idea to hold loader for your product lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.MetadataLoader.TryLoad(JetBrains.Metadata.Utils.AssemblyNameInfo,System.Func{JetBrains.Metadata.Utils.AssemblyNameInfo,System.Boolean},System.Boolean,JetBrains.Metadata.Reader.API.IMetadataAssembly)">
            <summary>
            Load assembly with the specified name
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Reader.API.MetadataLoader.ErrorNotifications">
            <summary>
            Allows to listen to non-fatal metadata reader errors, such as unresolved type.
            Such errors are expected to happen when you're reading just one assembly without resolving its references, thus they're not reported to the logger as regular exceptions. You can opt in for receiving such error notifications.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.API.MetadataTypeUtil.GetTypeSize(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Returns type size in memory or 0 if can't be calculated for sure
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.EntityPresentations.GetFieldPresentations(JetBrains.Metadata.Reader.API.IMetadataField)">
            <summary>
            Returns field defs or refs that corresponds to <paramref name="field"/> in this assembly
            </summary>
            <returns>Array of field defs or refs tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.EntityPresentations.GetTypePresentations(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Returns type defs, refs or specs that corresponds to <paramref name="typeInfo"/> in this assembly
            </summary>
            <returns>Array of type defs, refs or specs tokens</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.EntityPresentations.GetTokenFromTypeInfo(JetBrains.Metadata.Reader.API.IMetadataTypeInfo)">
            <summary>
            Find a token that corresponds to <paramref name="typeInfo"/> in this assembly
            </summary>
            <returns>TypeDef or TypeRef or Nil</returns>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.EntityPresentations.GetMethodPresentations(JetBrains.Metadata.Reader.API.IMetadataMethod)">
            <summary>
            Returns method specs, defs or refs that corresponds to <paramref name="method"/> in this assembly
            </summary>
            <returns>Array of method specs, defs, refs tokens</returns>
        </member>
        <member name="T:JetBrains.Metadata.Reader.Impl.LoadedAssembliesResolver">
            <summary>
            Resolves to the assemblies in the currently loaded appdomain.
            Not threadsafe.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.MetadataManifestResource.GetDisposition">
            <summary>
            Gets "pointer" to the resource location, independent of ImageBodyReader
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.PermissionSetBlobDecoder.ReadArguments(JetBrains.Metadata.Utils.IBinaryReader,System.Int32,System.Int32,System.Boolean,JetBrains.Metadata.Reader.Impl.CustomAttributeBlobDecoder,System.Collections.Generic.List{JetBrains.Metadata.Reader.API.IMetadataCustomAttributeFieldInitialization},System.Collections.Generic.List{JetBrains.Metadata.Reader.API.IMetadataCustomAttributePropertyInitialization})">
            <summary>
            Reads field and property initializations and not decoded attribute constructor arguments
            </summary>
            <param name="reader"></param>
            <param name="attributeBlobStartPosition"></param>
            <param name="attributeBlobEndPosition"></param>
            <param name="altFormat">indicates alternative format of named arguments number</param>
            <param name="customAttributeBlobDecoder"></param>
            <param name="fields"></param>
            <param name="properties"></param>
            <returns>not decoded attribute constructor arguments or null</returns>
            <remarks>Attribute blob bytes: [attributeBlobStartPosition, attributeBlobEndPosition) = [attributeBlobStartPosition, attributeBlobEndPosition - 1]</remarks>
        </member>
        <member name="M:JetBrains.Metadata.Reader.Impl.PermissionSetBlobDecoder.GetConstructorArgumentsBlob(JetBrains.Metadata.Utils.IBinaryReader,System.Int32,System.Int32)">
            <summary>
            Blob bytes: [fromPosition, toPosition) = [fromPosition, toPosition - 1]
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.AssemblyNameReader">
            <summary>
            Assembly name reader in managed code.
            No .NET framework or Fusion API used.
            Opens files in non-blocking mode.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyNameReader.GetAssemblyNameRaw(JetBrains.Util.FileSystemPath)">
            <summary>
            Assembly name reader in managed code.
            No .NET framework or Fusion API used.
            Opens files in non-blocking mode.
            DOES NOT CHECK FOR THE FILE EXISTENCE!
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyNameReader.GetAssemblyInfoRaw(JetBrains.Util.FileSystemPath)">
            <param name="path"></param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.InstructionReference.IInstructionReference.MethodBody">
            <summary>
            Method which contains original and sequence point instructions
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.InstructionReference.IInstructionReference.Instruction">
            <summary>
            Original instruction
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.InstructionReference.IInstructionReference.SequencePointInstruction">
            <summary>
            Sequence point instruction associated with original instruction 
            (with IL offset less or equal to original instruction IL offset)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.InstructionReference.InstructionReferenceUtil.ChooseFirstSequencePoint(JetBrains.Metadata.Utils.InstructionReference.IInstructionReference,JetBrains.Metadata.Utils.InstructionReference.IInstructionReference)">
            <summary>
            If both sequence point instructions from one method then chooses first of them,
            otherwise returns ir1
            (If one of the instructions is null then choose another)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.InstructionReference.InstructionReferenceUtil.GetInstructionIndex(JetBrains.Metadata.Utils.InstructionReference.IInstructionReference)">
            <summary>
            Gets instruction ir.Instruction index in ir.MethodBody.Instructions array
            (returns -1 in case of error)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.IPdbMethodSequencePointMarker.InstructionReference">
            <summary>
            IL instruction (with corresponding method) of sequence point
            </summary>
        </member>
        <member name="T:System.GAC.ASM_DISPLAY_FLAGS">
            <summary>
            <see cref="M:System.GAC.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,System.GAC.ASM_DISPLAY_FLAGS)"/>
            </summary>
        </member>
        <member name="T:System.GAC.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name. 
            See the .NET Framework SDK for a description of these properties. 
            </summary>
        </member>
        <member name="T:System.GAC.IASSEMBLYCACHE_UNINSTALL_DISPOSITION">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[],System.UInt32@)"/>
            </summary>
        </member>
        <member name="T:System.GAC.QUERYASMINFO_FLAG">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,System.GAC.ASSEMBLY_INFO@)"/>
            </summary>
        </member>
        <member name="T:System.GAC.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            <see cref="M:System.GAC.IAssemblyCache.InstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[])"/>
            </summary>
        </member>
        <member name="T:System.GAC.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            The CREATE_ASM_NAME_OBJ_FLAGS enumeration contains the following values: 
             CANOF_PARSE_DISPLAY_NAME - If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to 
               the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
             CANOF_SET_DEFAULT_VALUES - If this flag is specified, certain properties, such as processor architecture, are set to 
               their default values.
             <see cref="M:System.GAC.AssemblyCache.CreateAssemblyNameObject(System.GAC.IAssemblyName@,System.String,System.UInt32,System.IntPtr)"/>
            </summary>
        </member>
        <member name="T:System.GAC.ASM_CACHE_FLAGS">
            <summary>
            The ASM_CACHE_FLAGS enumeration contains the following values: 
            ASM_CACHE_ZAP - Enumerates the cache of precompiled assemblies by using Ngen.exe.
            ASM_CACHE_GAC - Enumerates the GAC.
            ASM_CACHE_DOWNLOAD - Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:System.GAC.FUSION_INSTALL_REFERENCE">
            <summary>
            The FUSION_INSTALL_REFERENCE structure represents a reference that is made when an application has installed an 
            assembly in the GAC. 
            The fields of the structure are defined as follows: 
               cbSize - The size of the structure in bytes.
               dwFlags - Reserved, must be zero.
               guidScheme - The entity that adds the reference.
               szIdentifier - A unique string that identifies the application that installed the assembly.
               szNonCannonicalData - A string that is only understood by the entity that adds the reference. 
                   The GAC only stores this string.
            Possible values for the guidScheme field can be one of the following: 
               FUSION_REFCOUNT_MSI_GUID - The assembly is referenced by an application that has been installed by using 
                   Windows Installer. The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
                   This scheme must only be used by Windows Installer itself.
               FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID - The assembly is referenced by an application that appears in Add/Remove 
                   Programs. The szIdentifier field is the token that is used to register the application with Add/Remove programs.
               FUSION_REFCOUNT_FILEPATH_GUID - The assembly is referenced by an application that is represented by a file in 
                   the file system. The szIdentifier field is the path to this file.
               FUSION_REFCOUNT_OPAQUE_STRING_GUID - The assembly is referenced by an application that is only represented 
                   by an opaque string. The szIdentifier is this opaque string. The GAC does not perform existence checking 
                   for opaque references when you remove this.
            </summary>
        </member>
        <member name="T:System.GAC.ASSEMBLY_INFO">
            <summary>
            The ASSEMBLY_INFO structure represents information about an assembly in the assembly cache. 
            The fields of the structure are defined as follows: 
               cbAssemblyInfo - Size of the structure in bytes. Permits additions to the structure in future version of the .NET Framework.
               dwAssemblyFlags - Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
               uliAssemblySizeInKB - The size of the files that make up the assembly in kilobytes (KB).
               pszCurrentAssemblyPathBuf - A pointer to a string buffer that holds the current path of the directory that contains the 
                   files that make up the assembly. The path must end with a zero.
               cchBuf - Size of the buffer that the pszCurrentAssemblyPathBug field points to.
             dwAssemblyFlags can have one of the following values: 
               ASSEMBLYINFO_FLAG__INSTALLED - Indicates that the assembly is actually installed. Always set in current version of the 
                   .NET Framework.
               ASSEMBLYINFO_FLAG__PAYLOADRESIDENT - Never set in the current version of the .NET Framework.
            </summary>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyCache(System.GAC.IAssemblyCache@,System.UInt32)">
            <summary>
            The key entry point for reading the assembly cache.
            </summary>
            <param name="ppAsmCache">Pointer to return IAssemblyCache</param>
            <param name="dwReserved">must be 0</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyNameObject(System.GAC.IAssemblyName@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            An instance of IAssemblyName is obtained by calling the CreateAssemblyNameObject API.
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the IAssemblyName pointer that is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is 
            determined by dwFlags. The string representation can be null.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <param name="pvReserved"> Must be null.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyEnum(System.GAC.IAssemblyEnum@,System.IntPtr,System.GAC.IAssemblyName,System.GAC.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateAssemblyEnum API, call the CreateAssemblyNameObject API.
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the IAssemblyEnum pointer.</param>
            <param name="pUnkReserved">Must be null.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pvReserved">Must be NULL.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateInstallReferenceEnum(System.GAC.IInstallReferenceEnum@,System.GAC.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateInstallReferenceEnum API, call the CreateInstallReferenceEnum API.
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the IInstallReferenceEnum pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags"> Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetCachePath(System.GAC.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            The GetCachePath API returns the storage location of the GAC. 
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the pwszCachePath buffer, in Unicode characters.</param>
        </member>
        <member name="M:System.GAC.AssemblyCache.CreateAssemblyCache">
            <summary>
            Use this method as a start for the GAC API
            </summary>
            <returns>IAssemblyCache COM interface</returns>
        </member>
        <member name="M:System.GAC.AssemblyCache.GetNextAssembly(System.GAC.IAssemblyEnum,System.GAC.IAssemblyName@)">
            <summary>
            Get the next assembly name in the current enumerator or fail
            </summary>
            <param name="enumerator"></param>
            <param name="name"></param>
            <returns>0 if the enumeration is not at its end</returns>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            The assembly is referenced by an application that has been installed by using Windows Installer. 
            The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. 
            This scheme must only be used by Windows Installer itself.
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:System.GAC.AssemblyCache.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="T:System.GAC.IAssemblyCache">
            <summary>
            The IAssemblyCache interface is the top-level interface that provides access to the GAC.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[],System.UInt32@)">
            <summary>
            The IAssemblyCache::UninstallAssembly method removes a reference to an assembly from the GAC. 
            If other applications hold no other references to the assembly, the files that make up the assembly are removed from the GAC. 
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. Although this is not recommended, 
               this parameter can be null. The assembly is installed without an application reference, or all existing application 
               references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.</param>
            <returns>The return values are defined as follows: 
               S_OK - The assembly has been uninstalled.
               S_FALSE - The operation succeeded, but the assembly was not removed from the GAC. 
               The reason is described in pulDisposition.</returns>
             <remarks>
             NOTE: If pulDisposition is not null, pulDisposition contains one of the following values:
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED - The assembly files have been removed from the GAC.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE - An application is using the assembly. 
                 This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED - The assembly does not exist in the GAC.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING - Not used.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES - The assembly has not been removed from the GAC because 
                 another application reference exists.
               IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND - The reference that is specified in pRefData is not found 
                 in the GAC.
             </remarks>
        </member>
        <member name="M:System.GAC.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,System.GAC.ASSEMBLY_INFO@)">
            <summary>
            The IAssemblyCache::QueryAssemblyInfo method retrieves information about an assembly from the GAC. 
            </summary>
            <param name="dwFlags">One of QUERYASMINFO_FLAG_VALIDATE or QUERYASMINFO_FLAG_GETSIZE: 
               *_VALIDATE - Performs validation of the files in the GAC against the assembly manifest, including hash verification 
                 and strong name signature verification.
               *_GETSIZE - Returns the size of all files in the assembly (disk footprint). If this is not specified, the 
                 ASSEMBLY_INFO::uliAssemblySizeInKB field is not modified.</param>
            <param name="pszAssemblyName"></param>
            <param name="pAsmInfo"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,System.GAC.IAssemblyCacheItem@,System.String)">
            <summary>
            Undocumented
            </summary>
            <param name="dwFlags"></param>
            <param name="pvReserved"></param>
            <param name="ppAsmItem"></param>
            <param name="pszAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.CreateAssemblyScavenger(System.Object@)">
            <summary>
            Undocumented
            </summary>
            <param name="ppAsmScavenger"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyCache.InstallAssembly(System.UInt32,System.String,System.GAC.FUSION_INSTALL_REFERENCE[])">
            <summary>
            The IAssemblyCache::InstallAssembly method adds a new assembly to the GAC. The assembly must be persisted in the file 
            system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the IASSEMBLYCACHE_INSTALL_FLAG_* values can be specified: 
               *_REFRESH - If the assembly is already installed in the GAC and the file version numbers of the assembly being 
               installed are the same or later, the files are replaced.
               *_FORCE_REFRESH - The files of an existing assembly are overwritten regardless of their version number.</param>
            <param name="pszManifestFilePath"> A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest. 
             Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE that indicates the application on whose behalf the 
            assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the assembly 
            without any application reference.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyName">
            <summary>
            The IAssemblyName interface represents an assembly name. An assembly name includes a predetermined set of name-value pairs. 
            The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyName.SetProperty(System.GAC.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            The IAssemblyName::SetProperty method adds a name-value pair to the assembly name, or, if a name-value pair 
            with the same name already exists, modifies or deletes the value of a name-value pair.
            </summary>
            <param name="propertyId">The ID that represents the name part of the name-value pair that is to be 
            added or to be modified. Valid property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the pvProperty buffer in bytes. If cbProperty is zero, the name-value pair 
            is removed from the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetProperty(System.GAC.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            The IAssemblyName::GetProperty method retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="propertyId">The ID that represents the name of the name-value pair whose value is to be retrieved.
            Specified property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the pvProperty buffer, in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.Finalize">
            <summary>
            The IAssemblyName::Finalize method freezes an assembly name. Additional calls to IAssemblyName::SetProperty are 
            unsuccessful after this method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,System.GAC.ASM_DISPLAY_FLAGS)">
            <summary>
            The IAssemblyName::GetDisplayName method returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the ASM_DISPLAY_FLAGS enumeration: 
               *_VERSION - Includes the version number as part of the display name.
               *_CULTURE - Includes the culture.
               *_PUBLIC_KEY_TOKEN - Includes the public key token.
               *_PUBLIC_KEY - Includes the public key.
               *_CUSTOM - Includes the custom part of the assembly name.
               *_PROCESSORARCHITECTURE - Includes the processor architecture.
               *_LANGUAGEID - Includes the language ID.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:System.GAC.IAssemblyName.BindToObject(System.Guid@,System.Object,System.Object,System.String,System.Int64,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Undocumented
            </summary>
            <param name="refIID"></param>
            <param name="pUnkSink"></param>
            <param name="pUnkContext"></param>
            <param name="szCodeBase"></param>
            <param name="llFlags"></param>
            <param name="pvReserved"></param>
            <param name="cbReserved"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The IAssemblyName::GetName method returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the pwszName buffer (on input). Length of the name (on return).</param>
            <param name="pwzName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:System.GAC.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            The IAssemblyName::GetVersion method returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.IsEqual(System.GAC.IAssemblyName,System.GAC.ASM_CMP_FLAGS)">
            <summary>
            The IAssemblyName::IsEqual method compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison. 
            Values are one or more of the bits defined in the ASM_CMP_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyName.Clone(System.GAC.IAssemblyName@)">
            <summary>
            The IAssemblyName::Clone method creates a copy of an assembly name. 
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyEnum">
            <summary>
            The IAssemblyEnum interface enumerates the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.GetNextAssembly(System.IntPtr,System.GAC.IAssemblyName@,System.UInt32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC. 
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly 
            name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.Reset">
            <summary>
            Undocumented. Best guess: reset the enumeration to the first assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.GAC.IAssemblyEnum.Clone(System.GAC.IAssemblyEnum@)">
            <summary>
            Undocumented. Create a copy of the assembly enum that is independently enumerable.
            </summary>
            <param name="ppEnum"></param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IInstallReferenceItem">
            <summary>
            The IInstallReferenceItem interface represents a reference that has been set on an assembly in the GAC. 
            Instances of IInstallReferenceIteam are returned by the IInstallReferenceEnum interface.
            </summary>
        </member>
        <member name="M:System.GAC.IInstallReferenceItem.GetReference(System.GAC.FUSION_INSTALL_REFERENCE[]@,System.UInt32,System.IntPtr)">
            <summary>
            The IInstallReferenceItem::GetReference method returns a FUSION_INSTALL_REFERENCE structure. 
            </summary>
            <param name="ppRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. The memory is allocated by the GetReference 
            method and is freed when IInstallReferenceItem is released. Callers must not hold a reference to this buffer after the 
            IInstallReferenceItem object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC.
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated. 
            </summary>
        </member>
        <member name="M:System.GAC.IInstallReferenceEnum.GetNextInstallReferenceItem(System.GAC.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly. 
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the IInstallReferenceItem pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:System.GAC.IAssemblyCacheItem">
            <summary>
            Undocumented. Probably only for internal use.
            <see cref="M:System.GAC.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,System.GAC.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.CreateStream(System.UInt32,System.String,System.UInt32,System.UInt32,System.Runtime.InteropServices.ComTypes.IStream@,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pszStreamName"></param>
            <param name="dwFormat"></param>
            <param name="dwFormatFlags"></param>
            <param name="ppIStream"></param>
            <param name="puliMaxSize"></param>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.Commit(System.UInt32,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pulDisposition"></param>
        </member>
        <member name="M:System.GAC.IAssemblyCacheItem.AbortItem">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.AssemblyResolver">
            <summary>
            Helps with looking up the referenced assemblies.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.AssemblyResolver.myBaseDirs">
            <summary>
            The list of base directories to be probed for the assembly being resolved.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.AssemblyResolver.myInstalledOn">
            <summary>
            The list of appdomains we've been installed onto.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyResolver.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath},System.Func{JetBrains.Metadata.Utils.AssemblyNameInfo,System.Boolean})">
            <summary>
            Creates the instance. Call <see cref="M:JetBrains.Metadata.Utils.AssemblyResolver.Install(System.AppDomain)"/> to attach, don't forget to call <see cref="M:JetBrains.Metadata.Utils.AssemblyResolver.Uninstall(System.AppDomain)"/> or <see cref="M:JetBrains.Metadata.Utils.AssemblyResolver.Dispose"/> to detach on shutdown.
            </summary>
            <param name="basedirs">The list of base directories to be probed for the assembly being resolved.</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyResolver.FromAssembly(System.Reflection.Assembly,System.Func{JetBrains.Metadata.Utils.AssemblyNameInfo,System.Boolean})">
            <summary>
            Creates a resolver over the single probing directory that is the home directory of the <param name="assembly"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyResolver.Install(System.AppDomain)">
            <summary>
            Starts listening for failed assembly loads on the given appdomain.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyResolver.Uninstall(System.AppDomain)">
            <summary>
            Stops listening for failed assembly loads on the given appdomain.
            It is not an error to uninstall from a non-installed appdomain.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.AssemblyResolver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.CursorPositionStringBuilder.#ctor(System.Int32)">
            <param name="startLinesCount">Count of lines at document start (before code lines).
             All positions should be shifted after appending lines at document start (e.g. comments in header)</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.ITypesCache.GetNamespacesContainingTypeShortName(JetBrains.Metadata.Reader.API.IClrTypeName)">
            <summary>
            All namespaces with definition of type with short name
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.SequencePointCollection">
            <summary>
            Collection of sequence points for one source file.
            All start/end positions of sequence points from this collection can be shifted into some number of lines.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.SequencePointCollection.GetMethods">
            <summary>
            Gets metadata tokens of methods containing sequence points from this collection
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.TextAndPdbWriterBase.#ctor(System.Boolean,JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent,System.Boolean,System.Int32,System.Int32)">
            <param name="projectionIsUsed"></param>
            <param name="pdbContent"></param>
            <param name="showSequencePointInfoInComments">show IL offset, method token, line and column for each sequence point if true</param>
            <param name="sourceFileIndex">Index of source file generated by this text writer (this index is used to generate debug data)</param>
            <param name="startLinesCount">Count of lines at document start (before code lines). All sequence point positions should be shifted after appending lines at document start (e.g. comments in header)</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.TextAndPdbWriterBase.OptimizeImports(JetBrains.Metadata.Utils.Pdb.CodeTextWriter.ITypesCache,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <param name="typesCache"></param>
            <param name="ownNamespaces"></param>
            <param name="conflictingNames">short names of properties, fields, events, nested types (which may conflict with names of used types)</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.TextAndPdbWriterBase.GetFullTypeName(JetBrains.Metadata.Reader.API.IClrTypeName,System.String)">
            <param name="typeName"></param>
            <param name="namespaceName">namespace should not be global</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.TextAndPdbWriterBase.GetTextWithImports(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Gets code and adds debug data to pdb (sequence points, used namespaces, ...)
            </summary>
            <param name="ownNamespaces"></param>
            <param name="conflictingNames"></param>
            <param name="importFormat">"using {0};" for C# or "Imports {0}" for VB</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.CodeTextWriter.TextAndPdbWriterBase.GetTextWithImports(JetBrains.Metadata.Utils.Pdb.CodeTextWriter.ITypesCache,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Gets code and adds debug data to pdb (sequence points, used namespaces, ...)
            </summary>
            <param name="typesCache"></param>
            <param name="ownNamespaces"></param>
            <param name="conflictingNames"></param>
            <param name="importFormat">"using {0};" for C# or "Imports {0}" for VB</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Generator.PdbFileBuilder.BuildAllStreamsAndTocPointers">
            <remarks> After call this method adding streams is not allowed </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Generator.PdbStreamGenerator.GetStringSizeInBytes(System.String)">
            <summary>
            Calculates size of string s in bytes for UTF8 encoding
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodExtensions.GetScope(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod)">
            <summary>
            Scope that encloses the entire method
            (inside RootScope, with the same bounds)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodExtensions.AddLocalVariable(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod,System.String,System.Int32)">
            <summary>
            Adds local variable to scope that encloses the entire method
            (inside RootScope, with the same bounds)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodExtensions.AddLocalVariable(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds local variable to scopes covering [scopeStartOffest, scopeEndOffset]
            (inside RootScope)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.SequencePointUtils.CheckBranchTarget(JetBrains.Metadata.IL.Instruction[],System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <remarks>
            Branch instruction can be associated with hidden SP 
            if branch target instruction is after this instruction and
            there are regular SP between this instruction and branch target instruction 
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.SequencePointUtils.GetHiddenSequencePointsOffsets(JetBrains.Metadata.IL.Instruction[],System.Collections.Generic.ICollection{System.Int32},JetBrains.Metadata.Utils.Pdb.PdbContent.ISequencePointInstructionRedirector)">
            <summary>
            Returns offsets of all hidden sequence points  
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbUtils.GetMethod(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent,JetBrains.Metadata.Access.MetadataToken)">
            <summary>
            Gets method for the token 
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbUtils.CreateMethod(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent,JetBrains.Metadata.Access.MetadataToken,JetBrains.Metadata.Access.MetadataToken,System.Int32)">
            <summary>
            Creates and adds to content method with token methodToken and [0, codeLength] IL range
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.SymbolWriter.PdbContentWriter.PatchPdb(JetBrains.Util.FileSystemPath,System.Guid,System.UInt32)">
            <summary>
            Replaces signature and age info in PDB header 
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.CreateDocument(System.String)">
            <summary>
            Creates document with given url and adds it to content
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.GetOrCreateDocument(System.String)">
            <summary>
            Gets (or creates and adds to content, if missing) document for the url
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.CreateMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
            <summary>
            Creates and adds to content method with token methodToken and [0, codeLength] IL range
            </summary>
            <param name="methodToken"></param>
            <param name="localVariablesSignatureToken"></param>
            <param name="codeLength">Method IL code length in bytes</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
            <summary>
            Gets method for the token (fails if such method is missing)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.UserEntryPoint">
            <summary>
            Token of the entry point method (null for dll)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbContent.Documents">
            <summary>
            Source files
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable">
            <summary>
            System.Diagnostics.SymbolStore.ISymbolVariable
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable.Name">
            <summary>
            The name of the variable
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable.LocalVariablesSignatureToken">
            <summary>
            The metadata token of the local variables signature for method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable.Attributes">
            <summary>
            The local variable attributes
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable.Signature">
            <summary>
            The local variable signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable.IlIndex">
            <summary>
            see SymAddressKind.ILOffset
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod">
            <summary>
            Partial implementation of System.Diagnostics.SymbolStore.ISymbolMethod
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.GetSequencePointsForSource(System.Int32)">
            <summary>
            Sequence points for the current method in specified source file
            (sorted in the increasing order of IL offsets)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.GetSequencePointByIlOffset(System.Int32)">
            <remarks>Slow!!!</remarks>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.Token">
            <summary>
            The metadata token for the current method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.LocalVariablesSignatureToken">
            <summary>
            The metadata token of the local variables signature for this method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.RootScope">
            <summary>
            The root lexical scope that encloses the entire method.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.IsEmpty">
            <summary>
            Gets if there're no sequence points in the method
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.SequencePoints">
            <summary>
            Sequence points for the current method
            (sorted in the increasing order of IL offsets)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethod.GetSequencePointsSourceIndices">
            <summary>
            Indices of source files in which current method is defined
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope">
            <summary>
            Represents a lexical scope within PdbMethod, 
            providing access to the start and end offsets of the scope, 
            as well as its child and parent scopes.
            (see System.Diagnostics.SymbolStore.ISymbolScope)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.TryGetLocalVariable(System.Int32)">
            <summary>
            Returns local variable with specified index  
            if this variable is presented within the current lexical scope,
            null otherwise
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.TryGetLocalVariableFromParentScopes(System.Int32)">
            <summary>
            Returns local variable with specified index  
            if this variable is presented within parent scopes of current lexical scope,
            null otherwise
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.TryAddLocalVariable(JetBrains.Metadata.Utils.Pdb.PdbContent.PdbLocalVariable)">
            <summary>
            Adds local variable and returns true if local variable with index localVariable.IlIndex is not contained 
            in this, child or parent scopes,
            otherwise returns false
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.GetOrCreateInnerScopes(System.Int32,System.Int32,System.Collections.Generic.ICollection{JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope})">
            <summary>
            Adds obtained inner scopes (existed or created) covering [startOffest, endOffset] to scopes collection
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.Method">
            <summary>
            The method that contains the current lexical scope
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.Parent">
            <summary>
            The parent lexical scope of the current scope
            (null for root scope of the PdbMethod)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.StartOffset">
            <summary>
            The start offset of the current lexical scope
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.EndOffset">
            <summary>
            The end offset of the current lexical scope 
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.SortedChildScopes">
            <summary>
            The child lexical scopes of the current lexical scope
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.LocalVariables">
            <summary>
            The local variables within the current lexical scope
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodScope.UsedNamespaces">
            <summary>
            The namespaces that are used within the current scope
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint">
            <summary>
            Sequence point within the current method. 
            StartLine and StartColumn define the start of a statement within a method in source file with index SourceIndex. 
            EndLine and EndColumn define the end of a statement within a method.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.IlOffset">
            <summary>
            The IL offset of the sequence point measured from the beginning of the method (in bytes)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.StartLine">
            <summary>
            The starting line number of the sequence point
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.StartColumn">
            <summary>
            The starting column number of the sequence point
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.EndLine">
            <summary>
            The ending line number of the sequence point
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.EndColumn">
            <summary>
            The ending column number of the sequence point
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.IsHidden">
            <summary>
            if sequence point is hidden then the debugger will skip over it
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbContent.PdbMethodSequencePoint.SourceIndex">
            <summary>
            Index of source file where statement is located (PdbSource.Index)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbFunction.CodeLength">
            <summary>
            Function IL code length in bytes
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.PEDirectoryBase">
            <summary>
            Base class for PE directory
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.Directories.PEDirectoryBase.Read(JetBrains.Metadata.Utils.IBinaryReader,System.Int32)">
            <summary>
            Read directory
            </summary>
            <param name="rdr">reader</param>
            <param name="size">Size of directory</param>
        </member>
        <member name="T:JetBrains.Metadata.Utils.SdkModuleInfo">
            <summary>
            data class to be used to create SdkModule from it.
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.SdkModuleInfo.ManifestPath">
            <summary>
            Path to SDKManifest.xml file
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.SdkModuleInfo.NestedAssemblies">
            <summary>
            Those content files which are assemblies (not included in ContentFiles hash set)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.SdkModuleInfo.ContentFiles">
            <summary>
            Content files to be processed (i.e. css, js)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.SdkModuleInfo.HierarchyItems">
            <summary>
            All items including folders
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.TargetPlatformData">
            <summary>
            Data class which represents an info about a hardware platform, the selected project is applicable to. 
            I.e.'Windows, 8.0'
            Is necessary to determine which sdk modules might be applicable to the selected project.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.ToolLocationHelper.EnumerateContentRoots(JetBrains.Util.FileSystemPath,System.String,System.String)">
            <summary>
            Enumerates sdk content roots. Can return nulls. The first enumerated not null value will be the most specific content root.
            </summary>
            <param name="sdkRoot">path to a directory containing sdkManifest.xml file</param>
            <param name="targetConfiguration">commonConfiguration, retail, debug</param>
            <param name="targetArchitecture">x64, x86, ARM, neutral</param>
            <returns>Nullable paths. The first enumerated not null value will be the most specific contnet root. Results may be not distinct.</returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.ToolLocationHelper.GetSdkModuleInfo(JetBrains.Util.FileSystemPath,System.Collections.Generic.ICollection{JetBrains.Util.FileSystemPath})">
            <summary>
            Reads sdk manfest file and fills SdkModuleInfo with sdk content files
            see http://msdn.microsoft.com/en-us/library/hh768146(v=vs.110).aspx for more information
            </summary>
            <param name="manifestPath">path to a directory with sdkManifest file</param>
            <param name="contentRoots">most specific path to sdk content files</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.ToolLocationHelper.RetrieveSdkModuleInfo(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,System.Xml.XmlElement)">
            <summary>
            creates the new instance of SdkModuleInfo 
            </summary>
            <param name="contentRoot">The content root path. Sometimes need to resolve relative path references to js files from html</param>
            <param name="manifestPath"></param>
            <param name="fileListElement"></param>
        </member>
        <member name="F:JetBrains.Metadata.Utils.Pdb.Dbi.DbiDbgHeader.HeaderSize">
            <summary>
            Dbg header size in bytes
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Dbi.DbiFileInfo.GetFileInfoSize">
            <summary>
            Size in bytes of file info section of DBI stream
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.Pdb.Dbi.DbiHeader.HeaderSize">
            <summary>
            DBI header size in bytes
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.Dbi.DbiHeader.PdbAge">
            <summary>
            Pdb file age
            (ever-incrementing value, which is initially set to 1 and 
            incremented every time when a part of the PDB file is updated without rewriting the whole file)
            (assembly should have the same age and guid signature as pdb)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Dbi.DbiModuleInfo.GetModuleInfoSizeWithoutAlign">
            <summary>
            Size in bytes of module info without align (but with strings)
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Dbi.DbiModuleInfo.GetModuleInfoSize">
            <summary>
            Module info size in bytes (4 bytes align is taken into account)
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.Pdb.Dbi.DbiSectionContribution.SectionContributionSize">
            <summary>
            DBI section contribution size in bytes
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Common.PackedBitSet.#ctor(System.Int32)">
            <summary>
            Creates bit set where IsSet(index) when index less then num
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Common.PackedBitSet.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Creates bit set where IsSet(index) when index in indices
            </summary>
            <param name="indices"></param>
            <param name="maxIndex">maximum value of index in indices</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Common.PackedBitSet.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Creates bit set where IsSet(index) when index in sortedIndices
            (sortedIndices[i] not greater then sortedIndex[i + 1])
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbHeader">
            <summary>
            PDB 7.0 file header info
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.Pdb.PdbHeader.HeaderSize">
            <summary>
            Pdb header size in bytes
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.BlockSize">
            <summary>
            Size of the file blocks
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.NumPages">
            <summary>
            Count of debug info pages
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.TocSize">
            <summary>
            Size of the Table of Contents
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.TocBlocksPage">
            <summary>
            Index of the TOC Pointers Page
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbHeader.FirstPage">
            <summary>
            First page in PDB
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbRootRecord">
            <summary>
            Root record of the PDB info
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.PdbRootRecord.#ctor(System.IO.BinaryReader)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbRootRecord.Version">
            <summary>
            Symbolic info version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbRootRecord.TimeDateStamp">
            <summary>
            TimeStamp
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbRootRecord.PdbSignature">
            <summary>
            Symbolic info ID (SymId)
            (a unique identifier, which changes with every rebuild of the executable and PDB file)
            (assembly should have the same signature as pdb)
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbRootRecord.PdbAge">
            <summary>
            Pdb file age
            (ever-incrementing value, which is initially set to 1 and 
            incremented every time when a part of the PDB file is updated without rewriting the whole file)
            (assembly should have the same age as pdb)
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.Common.PdbStream">
            <summary>
            PDB stream descriptor
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Common.PdbStream.#ctor(System.UInt32,System.UInt32[])">
            <summary>
            ctor
            </summary>
            <param name="size"></param>
            <param name="blocks"></param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.Common.PdbStream.Size">
            <summary>
            Stream size
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.Common.PdbStream.Blocks">
            <summary>
            Stream blocks
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.Common.PdbStreamInfo">
            <summary>
            PDB (v 2.0) stream information stored in the Table of the Contents
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.Pdb.Common.PdbStreamInfo.#ctor(System.IO.BinaryReader)">
            <summary>
            ctor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.Common.PdbStreamInfo.Size">
            <summary>
            Stream size
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.Common.PdbSubStream">
            <summary>
            Stream for reading sub range of the underlayed stream
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.Pdb.PdbToc">
            <summary>
            PDB File table of the contents
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.Pdb.PdbToc.Streams">
            <summary>
            Streams existed in the PDB File
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Characteristics">
            <summary>
            COFF file characteristics
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.RELOCS_STRIPPED">
            <summary>
            Relocation info stripped from file.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.EXECUTABLE_IMAGE">
            <summary>
            File is executable
            (i.e. file is neither object file nor library file,
            so there are no unresolved external references).
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.LINE_NUMS_STRIPPED">
            <summary>
            Line numbers stripped from file.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.LOCAL_SYMS_STRIPPED">
            <summary>
            Local symbols stripped from file.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.AGGRESIVE_WS_TRIM">
            <summary>
            Aggressively trim working set
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.LARGE_ADDRESS_AWARE">
            <summary>
            Application can handle >2gb addresses
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.BYTES_REVERSED_LO">
            <summary>
            Bytes of machine word are reversed.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.MACHINE_32BIT">
            <summary>
            32 bit word machine.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.DEBUG_STRIPPED">
            <summary>
            Debugging info stripped from file in .DBG file
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.REMOVABLE_RUN_FROM_SWAP">
            <summary>
            If Image is on removable media, copy and run from the swap file.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.NET_RUN_FROM_SWAP">
            <summary>
            If Image is on Net, copy and run from the swap file.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.SYSTEM">
            <summary>
            This flag is used to indicate that the file
            is a system file, such as device driver.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.DLL">
            <summary>
            This flag indicates that the file
            is a dynamic library (DLL).
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.UP_SYSTEM_ONLY">
            <summary>
            File should only be run on a uniprocessor (UP) machine.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Characteristics.BYTES_REVERSED_HI">
            <summary>
            Bytes of machine word are reversed.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.CLIHeader">
            <summary>
            CLI header
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.CLIHeader.#ctor(JetBrains.Metadata.Utils.IBinaryReader,JetBrains.Metadata.Utils.PE.PEFile)">
            <summary>
            ctor
            </summary>
            <param name="reader"></param>
            <param name="file"></param>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.CoffHeader">
            <summary>
            COFF header
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.DataDirectory">
            <summary>
            PE section information record
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.DataDirectory.RVA">
            <summary>
            Data RVA
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.DataDirectory.Size">
            <summary>
            Data size
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory">
            <summary>
            Debug information headers in PE FILE.
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Read(JetBrains.Metadata.Utils.IBinaryReader,System.Int32)">
            <summary>
            Read directory
            </summary>
            <param name="rdr">reader</param>
            <param name="size">Size of directory</param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entries">
            <summary>
            Debug info entries located in directory
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry">
            <summary>
            Debug Directory entry
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.#ctor(JetBrains.Metadata.Utils.IBinaryReader)">
            <summary>
            ctor
            </summary>
            <param name="rdr">Binary reader</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.GetEntry">
            <summary>
            Returns actual info stored in the referencied PE block
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.Characteristics">
            <summary>
            Entry params
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.TimeDateStamp">
            <summary>
            Seconds from 1970
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.MajorVersion">
            <summary>
            Major version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.MinorVersion">
            <summary>
            Minor version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.Type">
            <summary>
            Debug info type
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.SizeOfData">
            <summary>
            Data size
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.AddressOfRawData">
            <summary>
            Address in PE file
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugDirectory.Entry.PointerToRawData">
            <summary>
            Pointer to the data in PE File
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugInfo">
            <summary>
            Base information about debug entry
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugInfo.Age">
            <summary>
            Ever-incrementing value, which is initially set to 1 and
            incremented every time when a part of the PDB file is updated without rewriting the whole file
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugInfo.PdbFile">
            <summary>
            Name of the PDB file.
            It can also contain full or partial path to the file
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugInfo2">
            <summary>
            PDB 2.0 debugging info
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugInfo2.Timestamp">
            <summary>
            The time when debug information was created
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugInfo7">
            <summary>
            PDB 7.0 Debugging info
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.Directories.DebugInfo7.Signature">
            <summary>
            A unique identifier, which changes with every rebuild of the executable and PDB file
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Directories.DebugType">
            <summary>
            Summary description for DebugType.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.ExeSignature">
            <summary>
            Image signatures
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.DOS">
            <summary>
             "MZ"
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.OS2">
            <summary>
            "NE"
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.OS2_LE">
            <summary>
             "LE"
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.VXD">
            <summary>
             "LE"
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.NT">
            <summary>
             "PE", the complete signature is "PE\0\0"
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.ExeSignature.NT2">
            <summary>
            second part of the PE FULL sig
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.MachineId">
            <summary>
            Machine ID in the COFF header
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.UNKNOWN">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.I386">
            <summary>
            Intel 386.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.I486">
            <summary>
            Intel 486.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.PENTIUM">
            <summary>
            Intel Pentium.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.R3000_BE">
            <summary>
            MIPS 3K big-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.R3000">
            <summary>
            MIPS 3K little-endian, 0x160 big-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.R4000">
            <summary>
            MIPS 4K little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.R10000">
            <summary>
            MIPS little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.WCEMIPSV2">
            <summary>
            MIPS little-endian WCE v2
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.ALPHA">
            <summary>
            Alpha_AXP
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.SH3">
            <summary>
            SH3 little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.SH3DSP">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.SH3E">
            <summary>
            SH3E little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.SH4">
            <summary>
            SH4 little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.SH5">
            <summary>
            SH5
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.ARM">
            <summary>
            ARM Little-Endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.THUMB">
            <summary>
             ARM 10 Thumb family CPU.
            </summary>
            <remarks>
            IMAGE_FILE_MACHINE_THUMB
            http://www.arm.com/armtech/ARM10_Thumb?OpenDocument&amp;ExpandSection=2
            </remarks>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.AM33">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.POWERPC">
            <summary>
            IBM PowerPC Little-Endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.POWERPCFP">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.IA64">
            <summary>
            Intel 64
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.MIPS16">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.ALPHA64">
            <summary>
            ALPHA64
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.MIPSFPU">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.MIPSFPU16">
            <summary>
            MIPS
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.AXP64">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.TRICORE">
            <summary>
            Infineon
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.CEF">
            <summary>
            Common Executable Format (Windows CE).
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.EBC">
            <summary>
            EFI Byte Code
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.AMD64">
            <summary>
            AMD64 (K8)
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.M32R">
            <summary>
            M32R little-endian
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.CEE">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.MachineId.ARMNT">
            <summary>
            ARM Thumb-2 Little-Endian
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.Signature">
            <summary>
            Netadata header signature
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.MajorVersion">
            <summary>
            Major version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.MinorVersion">
            <summary>
            Minor version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.VersionString">
            <summary>
            Metadata version
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.Flags">
            <summary>
            Metadat flags
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.MetadataHeader.StreamHeaders">
            <summary>
            Metadata streams information
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.MetadataReaderException">
            <summary>
            Exceptions raised during module IL reading
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.MetadataReaderException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.MetadataReaderException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="message">Exception reason</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.MetadataReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
            <param name="message">Exception reason</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.MetadataReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Special ctor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.OptHeaderSize">
            <summary>
            Standard HT optional header sizes
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.OptHeaderSize.IMAGE_SIZEOF_ROM_OPTIONAL_HEADER">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.OptHeaderSize.IMAGE_SIZEOF_STD_OPTIONAL_HEADER">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.OptHeaderSize.IMAGE_SIZEOF_NT_OPTIONAL32_HEADER">
            <summary>
            
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.OptHeaderSize.IMAGE_SIZEOF_NT_OPTIONAL64_HEADER">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.OptionalNtHeader32">
            <summary>
            NT header
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.OptionalNtHeader64">
            <summary>
            NT header
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.PEDictionaryEntry">
            <summary>
            PE File dictionary entry
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.PEFile">
            <summary>
            Portable Executable file
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.PEFile.#ctor(JetBrains.Metadata.Utils.IBinaryReader)">
            <summary>
            ctor
            </summary>
            <param name="reader">PE file native image reader</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.PEFile.GetDirectory(System.Int32)">
            <summary>
            Read directory from PE File
            </summary>
            <param name="directoryId"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.PEFile.RvaToVa(System.UInt32)">
            <summary>
            Translate Relative Virtual Address (RVA) to the actual Virtual Address (VA)
            </summary>
            <param name="rva">RVA to translate</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.PEFile.CreateDictionary(System.Int32,System.Int32)">
            <summary>
            Create PE directory according its Index
            </summary>
            <param name="directoryId">Directory index</param>
            <param name="dirSize">Size of directory</param>
            <returns>Craeted object or null if:
            <list type="bullet">
             <item>
               <code>Directory type not implemented yet</code>
             </item>
             <item>
               <code>Passed Size of directory less then required</code>
             </item>
             <item>
               <code>Unknown directory index passsed</code>
             </item>
            </list>
            </returns>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.DOSheader">
            <summary>
            PE File DOS stub header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.COFFheader">
            <summary>
            PE File COFF header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.PEHeader">
            <summary>
            PE File PE header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.NTHeader">
            <summary>
            PE File Optional NT header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.Entries">
            <summary>
            PE File directory infos
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.Sections">
            <summary>
            PE file sections dictionary
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.CLIHeader">
            <summary>
            PE File CLI data header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.MetadataHeader">
            <summary>
            CLI Metadata Header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.PEFile.IsValid">
            <summary>
            Returns <c>False</c> if the DOS header was not detected.
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.PEHeader">
            <summary>
            PE file section header
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.PESignature">
            <summary>
            PE Header magic numbers
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.PESignature.PE_32BIT">
            <summary>
            PE Is 32 bit executable
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.PESignature.PE_64BIT">
            <summary>
            PE is 64 bit executable
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.SectionHeader">
            <summary>
            PE File section header
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.StreamHeader">
            <summary>
            Metadata stream information
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.PE.StreamHeader.#ctor(JetBrains.Metadata.Utils.IBinaryReader)">
            <summary>
            ctor
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.StreamHeader.Offset">
            <summary>
            Stream offset in PE file from metadata header
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.StreamHeader.Size">
            <summary>
            Stream size
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.PE.StreamHeader.Name">
            <summary>
            Stream name
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.PE.Subsystem">
            <summary>
            COFF header subsystem entry meanings
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.UNKNOWN">
            <summary>
            Unknown subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.NATIVE">
            <summary>
            Image doesn't require a subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.WINDOWS_GUI">
            <summary>
            Image runs in the Windows GUI subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.WINDOWS_CUI">
            <summary>
            Image runs in the Windows character subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.OS2_CUI">
            <summary>
            Image runs in the OS/2 character subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.POSIX_CUI">
            <summary>
             Image runs in the Posix character subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.NATIVE_WINDOWS">
            <summary>
            Image is a native Win9x driver.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.WINDOWS_CE_GUI">
            <summary>
            Image runs in the Windows CE subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.EFI_APPLICATION">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.EFI_BOOT_SERVICE_DRIVER">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.EFI_RUNTIME_DRIVER">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.EFI_ROM">
            <summary>
            </summary>
        </member>
        <member name="F:JetBrains.Metadata.Utils.PE.Subsystem.XBOX">
            <summary>
            </summary>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.InvalidTypeNameException.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.InvalidTypeNameException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
            <param name="message">Error Message</param>
            <param name="exInner">Exception that cause PE loading error</param>
        </member>
        <member name="P:JetBrains.Metadata.Utils.TypeName.NameToken.Value">
            <summary>
            Token Value
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.TypeName.NameToken.Range">
            <summary>
            Token Range
            </summary>
        </member>
        <member name="T:JetBrains.Metadata.Utils.TypeName.Parser">
            <summary>
            .NET Type names parser
            </summary>
            <remarks>
            Type Name BNF
            AQN                := FULLNAME
                               := FULLNAME ASSEMSPEC
               FULLNAME        := NAME
                               := NAME QUALIFIERS
                               := NAME GENPARAMS                    
                               := NAME GENPARAMS QUALIFIERS
            NAME               := T_NAME
            GENPARAMS          := '[' GENARGS ']'
            QUALIFIERS         := QUALIFIER
                               := QUALIFIER QUALIFIERS
            QUALIFIER          := 
                               := '*' 
                               := '&amp;'
                               := ARRAY
               ARRAY           := '[' ']'                 
                               := '[' '*' ']'                 
                               := '[' RANK ']'                 
            RANK               :=
                               := ',' RANK
            GENARGS            := GENARG
                               := GENARG ',' GENARGS
               GENARG          := FULLNAME
                               := '[' EAQN ']'
               EAQN            := FULLNAME
                               := EASSEMSPEC
               EASSEMSPEC      := FULLNAME ',' ASSEMSPEC
            T_NAME    == \d|_[^\.\,\*\&amp;\{\[\}\]\?\&lt;\&gt;]*
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.START">
            <summary>
            Start state
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.AQN">
            <summary>
            Assembly qualified name
            </summary>
            <returns></returns>
            <remarks>
            /* empty */
            FULLNAME ',' ASSEMSPEC
            FULLNAME
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.ASSEMSPEC">
            <summary>
            Assembly specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.FULLNAME">
            <summary>
            Type fullName
            </summary>
            <returns></returns>
            <remarks>
            NAME GENPARAMS QUALIFIER
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.GENPARAMS">
            <summary>
            Generic parameters
            </summary>
            <returns></returns>
            <remarks>
            *empty*
            '[' GENARGS ']'
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.GENARGS">
            <summary>
            Generic argument
            </summary>
            <returns></returns>
            <remarks>
            GENARG
            GENARG ',' GENARGS
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.EAQN">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            '[' EAQN ']'
            FULLNAME
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.QUALIFIER">
            <summary>
            type qualifier
            </summary>
            <returns></returns>
            <remarks>
            *empty*
            '&amp;'
            '*' QUALIFIER
            ARRAY QUALIFIER
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.ARRAY">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            '[' RANK ']'
            '[' '*' ']'
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.RANK(System.UInt32@)">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            *empty*
            ',' RANK
            </remarks>
        </member>
        <member name="M:JetBrains.Metadata.Utils.TypeName.Parser.NAME">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            id
            </remarks>
        </member>
        <member name="P:JetBrains.Metadata.Utils.TypeName.Parser.TypeName">
            <summary>
            Parsing result;
            </summary>
        </member>
        <member name="P:JetBrains.Metadata.Utils.TypeName.Parser.ParsedName.ElementType">
            <summary>
            Name of the underlaying type
            </summary>
        </member>
    </members>
</doc>
