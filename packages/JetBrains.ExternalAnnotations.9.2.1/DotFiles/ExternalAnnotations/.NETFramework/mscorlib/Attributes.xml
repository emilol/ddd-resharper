<assembly name="mscorlib">
  <member name="M:System.String.IsNullOrEmpty(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
        <argument>null=&gt;true</argument>
        <argument>true</argument>
    </attribute>
  </member>
  <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
        <argument>null=&gt;true</argument>
        <argument>true</argument>
    </attribute>
  </member>

  <member name="M:System.String.Format(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.String.Format(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.String.Format(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.IO.TextWriter.WriteLine(System.String)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.IO.TextWriter.Write(System.String)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.Console.Write(System.String)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.Write(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.Write(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.Console.WriteLine(System.String)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.WriteLine(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.WriteLine(System.String,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>
  <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)"><argument>format</argument></attribute>
  </member>

  <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentNullException.#ctor(System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
    <parameter name="paramName"><attribute ctor="M:JetBrains.Annotations.InvokerParameterNameAttribute.#ctor"/></parameter>
  </member>

  <member name="M:System.Environment.Exit(System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Environment.FailFast(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentException(System.ExceptionResource,System.ExceptionArgument)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentOutOfRangeException">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentOutOfRangeException(System.ExceptionArgument)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowArgumentOutOfRangeException(System.ExceptionArgument,System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowKeyNotFoundException">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowNotSupportedException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowObjectDisposedException(System.String,System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowSecurityException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowSerializationException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowUnauthorizedAccessException(System.ExceptionResource)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowWrongKeyTypeArgumentException(System.Object,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.IO.__Error.WinIODriveError(System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.IO.__Error.WinIODriveError(System.String,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.IO.__Error.WinIOError">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.IO.__Error.WinIOError(System.Int32,System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>

  <member name="T:System.Runtime.InteropServices.ComImportAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor(JetBrains.Annotations.ImplicitUseTargetFlags)">
      <argument>3</argument>
    </attribute>
  </member>
  <member name="T:System.Runtime.InteropServices.GuidAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  
  <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
    <parameter name="converter"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
    <parameter name="action"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
    <parameter name="comparison"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  
  <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
    <parameter name="converter"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
    <parameter name="action"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
    <parameter name="match"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>
  <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
    <parameter name="comparison"><attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/></parameter>
  </member>

  <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>condition:false=&gt;halt</argument>
    </attribute>
  </member>
  <member name="M:System.Diagnostics.Contracts.Contract.ReportFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor"/>
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>=&gt;halt</argument>
    </attribute>
  </member>
  <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>
  <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
    <attribute ctor="M:JetBrains.Annotations.MeansImplicitUseAttribute.#ctor" />
  </member>

  <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
        <argument>a:notnull=&gt;notnull;b:notnull=&gt;notnull;</argument>
    </attribute>
  </member>

  <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
    <parameter name="updateValueFactory">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
    <parameter name="addValueFactory">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
    <parameter name="updateValueFactory">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>
  <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
    <parameter name="valueFactory">
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor"/>
    </parameter>
  </member>

</assembly>
