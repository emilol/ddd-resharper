<?xml version="1.0" encoding="utf-8"?>
<assembly name="System.Windows.Input.Manipulations" version="4.0.0.0">
  <member name="M:System.Windows.Input.Manipulations.Exceptions.ArgumentOutOfRange(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.ArgumentOutOfRange(System.String,System.Object,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="messageFormat">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.CannotChangeParameterDuringInertia(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.Format(System.String,System.Object[])">
    <parameter name="format">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.IllegalPivotRadius(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.IllegialInertiaRadius(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.InertiaParametersUnspecified1and2(System.String,System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.InertiaParametersUnspecified2(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.InvalidTimestamp(System.String,System.Int64)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.IsPropertyName(System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.NoInertiaVelocitiesSpecified(System.String,System.String,System.String,System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.OnlyProportionalExpansionSupported(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.ValueMustBeFinite(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.ValueMustBeFiniteNonNegative(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Exceptions.ValueMustBeFiniteOrNaN(System.String,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaExpansionBehavior2D.CheckRadius(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaParameters2D.ProtectedChangeProperty(System.Func{System.Boolean},System.Action,System.String)">
    <parameter name="isEqual">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="setNewValue">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.CheckOriginalValue(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolationState.#ctor(System.Windows.Input.Manipulations.InertiaProcessor2D.InitialState)">
    <parameter name="initialState">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.GetCumulativeDelta(System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Double)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.GetExtrapolatedValueAndUpdateState(System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolationState,System.Double)">
    <parameter name="state">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.GetIncrementalDelta(System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Windows.Input.Manipulations.InertiaProcessor2D.ExtrapolatedValue,System.Double)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Prepare(System.Windows.Input.Manipulations.InertiaProcessor2D.InitialState,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="initialState">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetBehavior``1(``0@,``0,System.Action{System.Windows.Input.Manipulations.InertiaParameters2D,System.String},System.String)">
    <parameter name="handler">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)">
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationParameters2D.Set(System.Windows.Input.Manipulations.ManipulationProcessor2D)">
    <parameter name="processor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationPivot2D.CheckPivotRadius(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.OnManipulationStarted(System.Object,System.Windows.Input.Manipulations.Manipulation2DStartedEventArgs)">
    <parameter name="sender">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationProcessor2D.SetParameters(System.Windows.Input.Manipulations.ManipulationParameters2D)">
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Manipulations2DUtil.CheckValue(System.Windows.Input.Manipulations.Manipulations2D,System.String)">
    <parameter name="property">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.AddManipulator(System.Windows.Input.Manipulations.ManipulationSequence.ManipulatorState)">
    <parameter name="initialState">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CalculateMovingAverage(System.Collections.Generic.Queue{System.Windows.Input.Manipulations.ManipulationSequence.ManipulationState},System.Windows.Input.Manipulations.ManipulationSequence.PropertyAccessor,System.Single)">
    <parameter name="queue">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="accessor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CalculateMultiManipulatorRotationAndScale(System.Windows.Input.Manipulations.PointF,System.Single@,System.Single@,System.Single@,System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CalculateSingleManipulatorRotation(System.Windows.Input.Manipulations.PointF,System.Windows.Input.Manipulations.PointF,System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CalculateTransforms(System.Int64,System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CalculateWeightedMovingAverage(System.Collections.Generic.Queue{System.Windows.Input.Manipulations.ManipulationSequence.ManipulationState},System.Windows.Input.Manipulations.ManipulationSequence.PropertyAccessor)">
    <parameter name="queue">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="accessor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.CreateManipulatorState(System.Windows.Input.Manipulations.Manipulator2D)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.GetSmoothedDeltas(System.Int64,System.Windows.Input.Manipulations.ManipulationSequence.ISettings,System.Single@,System.Single@,System.Single@)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.GetVelocities">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.GetVelocity(System.Collections.Generic.Queue{System.Windows.Input.Manipulations.ManipulationSequence.ManipulationState},System.Windows.Input.Manipulations.ManipulationSequence.PropertyAccessor)">
    <parameter name="queue">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="accessor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.IsPinned(System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.OnProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D},System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.ProcessManipulators(System.Int64,System.Collections.Generic.IEnumerable{System.Windows.Input.Manipulations.Manipulator2D},System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.ManipulationSequence.SetVectorsFromPoint(System.Windows.Input.Manipulations.PointF,System.Windows.Input.Manipulations.ManipulationSequence.ISettings)">
    <parameter name="settings">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Manipulator2D.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.PointF.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.PointF.ToString">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.ArgumentOutOfRange">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.CannotChangeParameterDuringInertia">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.IllegalPivotRadius">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.InertiaParametersUnspecified1and2">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.InertiaParametersUnspecified2">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.InertiaProcessorInvalidRadius">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.InvalidTimestamp">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.NoInertiaVelocitiesSpecified">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.OnlyProportionalExpansionSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.ValueMustBeFinite">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.ValueMustBeFiniteNonNegative">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Windows.Input.Manipulations.Resources.ValueMustBeFiniteOrNaN">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.Validations.CheckFinite(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Validations.CheckFiniteNonNegative(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Validations.CheckFiniteOrNaN(System.Single,System.String)">
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.Validations.CheckNotNull(System.Object,System.String)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.VectorD.Equals(System.Object)">
    <parameter name="o">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.VectorD.ToString">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.VectorD.ToString(System.IFormatProvider)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Windows.Input.Manipulations.VectorF.Equals(System.Object)">
    <parameter name="o">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Windows.Input.Manipulations.VectorF.ToString">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
</assembly>