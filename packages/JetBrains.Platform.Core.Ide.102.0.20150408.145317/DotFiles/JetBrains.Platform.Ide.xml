<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Ide</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportHtml}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportHtml))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = IdeThemedIcons.ExportHtml.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(IdeThemedIcons.ExportHtml), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;IdeThemedIcons.ExportHtml&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportHtml">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ExportHtml Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportHtml.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportHtml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportHtml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportHtml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportHtml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportHtml.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ExportHtml Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportHtml"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportHtml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportHtml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportHtml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportHtml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportText">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ExportText Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportText.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportText))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportText.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportText.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ExportText Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportText"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportText))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportText.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportXml">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ExportXml Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportXml.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportXml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportXml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportXml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportXml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.ExportXml.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ExportXml Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.ExportXml"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+ExportXml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.ExportXml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.ExportXml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.ExportXml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.HtmlDocument">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlDocument Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.HtmlDocument.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+HtmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.HtmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.HtmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.HtmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.HtmlDocument.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlDocument Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.HtmlDocument"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+HtmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.HtmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.HtmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.HtmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.Ignore">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Ignore Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.Ignore.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Ignore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Ignore))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.Ignore.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.Ignore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.Ignore.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Ignore Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.Ignore"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Ignore}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Ignore))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.Ignore.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.Ignore&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.PreviewToggle">
             <summary>
              <para>
                <para>Autogenerated identifier class for the PreviewToggle Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.PreviewToggle.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+PreviewToggle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.PreviewToggle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.PreviewToggle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.PreviewToggle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.PreviewToggle.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the PreviewToggle Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.PreviewToggle"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+PreviewToggle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.PreviewToggle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.PreviewToggle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.PreviewToggle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.SearchResults">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SearchResults Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.SearchResults.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResults}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResults))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.SearchResults.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResults&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.SearchResults.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SearchResults Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.SearchResults"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResults}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResults))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.SearchResults.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResults&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.SearchResultsWindow">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SearchResultsWindow Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.SearchResultsWindow.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResultsWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResultsWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.SearchResultsWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResultsWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.SearchResultsWindow.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SearchResultsWindow Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.SearchResultsWindow"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+SearchResultsWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.SearchResultsWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.SearchResultsWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.SearchResultsWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.TextDocument">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TextDocument Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.TextDocument.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+TextDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.TextDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.TextDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.TextDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.TextDocument.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TextDocument Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.TextDocument"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+TextDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.TextDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.TextDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.TextDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.Tools">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Tools Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.Tools.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Tools}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Tools))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.Tools.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.Tools&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.Tools.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Tools Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.Tools"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+Tools}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.Tools))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.Tools.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.Tools&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageAll">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageAll Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageAll.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageAll.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageAll Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageAll"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAll}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAll))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageAll.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAll&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageAttribute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageAttribute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageAttribute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageAttribute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageAttribute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageAttribute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageDocumentation">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageDocumentation Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageDocumentation.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageDocumentation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageDocumentation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageDocumentation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageDocumentation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageDocumentation.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageDocumentation Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageDocumentation"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageDocumentation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageDocumentation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageDocumentation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageDocumentation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageInvocation">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageInvocation Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageInvocation.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageInvocation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageInvocation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageInvocation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageInvocation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageInvocation.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageInvocation Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageInvocation"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageInvocation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageInvocation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageInvocation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageInvocation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageOther">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageOther Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageOther.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageOther}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageOther))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageOther.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageOther&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageOther.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageOther Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageOther"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageOther}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageOther))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageOther.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageOther&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageRead">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageRead Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageRead.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageRead}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageRead))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageRead.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageRead&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageRead.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageRead Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageRead"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageRead}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageRead))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageRead.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageRead&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageReadWrite">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageReadWrite Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageReadWrite.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageReadWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageReadWrite))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageReadWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageReadWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageReadWrite.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageReadWrite Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageReadWrite"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageReadWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageReadWrite))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageReadWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageReadWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageString">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageString Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageString.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageString}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageString))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageString.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageString&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageString.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageString Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageString"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageString}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageString))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageString.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageString&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageWrite">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageWrite Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageWrite.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageWrite))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.UsageWrite.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageWrite Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.UsageWrite"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+UsageWrite}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.UsageWrite))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.UsageWrite.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.UsageWrite&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.Ide.Resources.IdeThemedIcons.XmlDocument">
             <summary>
              <para>
                <para>Autogenerated identifier class for the XmlDocument Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.Ide.Resources.IdeThemedIcons.XmlDocument.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+XmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.XmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.XmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.XmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.Ide.Resources.IdeThemedIcons.XmlDocument.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the XmlDocument Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons.XmlDocument"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.Ide.Resources.IdeThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:IdeThemedIcons+XmlDocument}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(IdeThemedIcons.XmlDocument))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = IdeThemedIcons.XmlDocument.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;IdeThemedIcons.XmlDocument&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.IDE.ResultList.UIResultListPublisherBehavior">
            <summary>
            Binds a UI control to its <see cref="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation"/>.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.UIResultListPublisherBehavior.BindToWinForms(JetBrains.DataFlow.Lifetime,JetBrains.IDE.ResultList.UIResultListPublisherAutomation,System.Windows.Forms.Control,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.Application.IUIApplication)">
            <summary>
            Attaches the result list behavior to a WinForms view.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeBrowser.PreviewSupport">
            <summary>
            Enumerates possible types of preview support in <see cref="T:JetBrains.IDE.TreeBrowser.TreeModelBrowser"/>
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.PreviewSupport.NotSupported">
            <summary>
            Preview is not supported at all
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.PreviewSupport.Supported">
            <summary>
            Preview is supported. Control will be created through a call to <see cref="!:TreeModelBrowserDescriptor.PreviewCreateControl"/> and updated
            through calls to <see cref="!:TreeModelBrowserDescriptor.PreviewUpdate"/>. Preview is invisible by default.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.PreviewSupport.SupportedAndVisibleByDefault">
            <summary>
            Preview is supported. Control will be created through a call to <see cref="!:TreeModelBrowserDescriptor.PreviewCreateControl"/> and updated
            through calls to <see cref="!:TreeModelBrowserDescriptor.PreviewUpdate"/>. Preview is visible by default.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.PreviewSupport.Virtual">
            <summary>
            <i>Virtual</i> preview support. No control will be created by <see cref="T:JetBrains.IDE.TreeBrowser.TreeModelBrowser"/>, but calls to <see cref="!:TreeModelBrowserDescriptor.PreviewUpdate"/> will be made
            so the inheritor can dispatch them to a custom preview mechanism.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptorBase.PreviewCreateControl(JetBrains.UI.WindowManagement.WindowFrame)">
            <summary>
            Create a control for the preview area.
            </summary>
            <param name="framePreview">Window frame of the preview area that reflects the preview area visibility, as well as visibility of the tree model browser itself (if hosted in a visibility-aware frame, like a [tabbed] tool window).</param>
        </member>
        <member name="T:JetBrains.IDE.EditorManager">
            <summary>
            Default implementation that is not bound to any specific editor and is appropriate as test and stub implementation.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.AnonymousResultListHandler">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.IResultListHandler">
            <summary>
            Specific action handler for actions typically available on a result list.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.IResultListHandler.GoToNextLocation(JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
              <para>A semantical equivalent of VS's “Edit.GoToNextLocation” action.</para>
              <para>This method should update the action status and yield a non-Null function only if it's ready to execute the action.</para>
            </summary>
            <param name="lifetimeExec">Lifetime for the duration of this action execution. The returned functor will only be valid within this lifetime (and the same guard/readlock).</param>
            <param name="context">Action context.</param>
            <param name="presentation">Current action presentation state.</param>
            <returns>The action executor function, if the action is available.</returns>
        </member>
        <member name="M:JetBrains.IDE.ResultList.IResultListHandler.GoToPrevLocation(JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
              <para>A semantical equivalent of VS's “Edit.GoToPrevLocation” action.</para>
              <para>This method should update the action status and yield a non-Null function only if it's ready to execute the action.</para>
            </summary>
            <param name="lifetimeExec">Lifetime for the duration of this action execution. The returned functor will only be valid within this lifetime (and the same guard/readlock).</param>
            <param name="context">Action context.</param>
            <param name="presentation">Current action presentation state.</param>
            <returns>The action executor function, if the action is available.</returns>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListIdeActions">
            <summary>
            Integration of the result list operations into the IDE. Reqiured to enable overriding in VS environment.
            Executes the given actions on the currently active result list handler.
            Base implementation works on our result list object only.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListManager">
            <summary>
              <para>Allows to publish your “result list” for IDE-global navigation with standard actions (in VS: “Edit.GoToNextLocation”, “Edit.GoToPrevLocation”).</para>
              <para>Do this when you open a tool window with a list which should be walked when user invokes those commands right from the editor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListManager.CurrentResultListHandler">
            <summary>
            Gets the current result list handler.
            To set your own, you should generally use <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.IDE.ResultList.IResultListHandler)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.IDE.ResultList.IResultListHandler)">
            <summary>
            Makes this an active result list in the current IDE.
            </summary>
            <param name="def">Terminates when you request it or when your result list gets pushed out by smb else. Note that termination is NOT guarded here.</param>
            <param name="list"></param>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListValue">
            <summary>
            Implementation backend.
            Call <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.IDE.ResultList.IResultListHandler)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListValue.CurrentResultListHandler">
            <summary>
            The currently active result list, if published.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToNextLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToPrevLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation">
            <summary>
              <para>Helps with publishing result lists from UI components.</para>
              <para>To be used in viewmodels. Bind to the view with a behavior for getting focus and keyboard events.</para>
            </summary>
            <remarks>
            Behavior:
            See <see cref="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState"/> for possible states of publishing the result list.
            Initially, when the control is created, we'd publish the result list and keep it even on focus loss.
            After that, we'd publish our result list on any focus entry, but it would be revoked automatically on focus loss if there were no explicit user actions on items (like using the result list next/prev actions, or executing a node with Enter). But if there were, it's the same way as on control creation once again, until smb else pushes us out.
            This behavior seems to be the most friendly in terms of the implicit modality.
            </remarks>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListByOwner">
            <summary>
            The original result list, as provided by the owner of this object. This is NOT submitted to the <see cref="T:JetBrains.IDE.ResultList.ResultListManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListWrapped">
            <summary>
            The wrapped result list created by this object which reports when an action is executed, so that to switch to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> when it happens.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ToString">
            <summary>
            String representation, for diagnostic needs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin">
            <summary>
            For binding from UI. Tells when actual keyboard focus is within the control. Controls the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ItemExecuted">
            <summary>
            For binding from viewmodel / UI.
            Fire this event when an item has been executed in the control. This means we should enter the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.State">
            <summary>
            The current state. Reflected into the global result list.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished">
            <summary>
            The result list is currently not published.
            Entry: (1) when someone else publishes a result list and pushes out our one, (2) when losing focus in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> state.
            Leave: on any entry event for other states.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished">
            <summary>
            The result list has been published for the time while we have keyboard focus.
            Entry: control got focus (<see cref="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin"/> going high) while in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished"/> state.
            Leave: (1) control lost focus, (2) switched to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> due to an explicit user action.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished">
            <summary>
            The result list has been explicitly published, and should persist even when focus goes to another control (e.g. to text control when navigating to the next location).
            Entry: (1) control with a result list initially created, (2) an explicit user action, like executing result list actions in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> mode, or executing an item in the control with mouse or keyboard.
            Leave: someone has published another result list and pushed ours out.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.PersistableViewManager.CreatePersistableView(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.PersistableDocument.PersistableDocument,JetBrains.UI.CrossFramework.EitherControl)">
            <summary>
            Creates a new document tab and opens it with the given content.
            </summary>
            <param name="lifetimeDefinition">The limiting lifetime definition which will be terminated by the persistable view when its document tab is closed.</param>
            <param name="persistableDocument">Descriptor of the document in this document tab.</param>
            <param name="contentControl">Document tab content.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.IDE.PersistableViewManager.CreateTextControl(JetBrains.UI.PersistableDocument.IPersistableView)">
            <summary>
            Creates a text control specifically sited in a Persistable View.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.src.TreeBrowser.ExportTreeViewResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.src.TreeBrowser.ExportTreeViewResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.src.TreeBrowser.ExportTreeViewResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.ExportTreeViewDialog.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.ExportTreeViewDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.ExportTreeViewDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.TreeBrowser.TreeModelBrowser.TREE_MODEL_NODE">
            <summary>
            The one and only of <see cref="F:JetBrains.IDE.TreeBrowser.TreeModelBrowser.TREE_MODEL_NODES"/>, if single.
            DO NOT supply this rule, only consume.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeBrowser.TreeModelBrowserSettingsUpgrader">
            [GlobalSettingsUpgrader] // , Upgrader makes no sense since WPF impl and it's default has changed
        </member>
        <member name="T:JetBrains.IDE.TreeBrowser.UIOptions">
             <summary>
            Internal options intended to be shared between dotPeek/ReSharper. (dotPeek can not use intertnal assembly)
             </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.UpdateEventArgs.#ctor(JetBrains.IDE.TreeBrowser.UpdateKind,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.TreeModels.TreeModelNode})">
            <summary>
            Constructor
            </summary>
            <param name="kind">Update kind</param>
            <param name="immediate">Should it be performed now or delayed</param>
            <param name="relatedNodes">Nodes to update or null to update all nodes</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.Exporting.TreeModelVisitor.VisitTreeModelNode(System.Int32,JetBrains.TreeModels.TreeModelNode,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Recursive tree model node visiting method
            </summary>
            <param name="level">Level of tree node (root's nodes have level 0)</param>
            <param name="treeModelNode">Current visiting node</param>
            <param name="progress">Progress indicator to track processing progress</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.Exporting.TreeModelVisitor.ProcessTreeModelNode(System.Int32,JetBrains.TreeModels.TreeModelNode,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process tree model node w/ custom logic
            </summary>
            <param name="level">Level of tree node (root's nodes have level 0)</param>
            <param name="treeModelNode">Current processed node</param>
            <param name="progress">Progress indicator to track processing progress</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.Exporting.TreeModelVisitor.Process(JetBrains.TreeModels.TreeModel,System.Collections.Generic.ICollection{JetBrains.TreeModels.TreeModelNode},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Invokes main processing
            </summary>
            <param name="treeModel">Tree model</param>
            <param name="treeModelNodes">Processed nodes (TreeModel.Roots in case of whole model processing)</param>
            <param name="progress">Progress indicator to track processing progress</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.Exporting.TreeModelCellPresentersExportBase.ProcessTreeModelNode(System.Int32,JetBrains.TreeModels.TreeModelNode,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process tree model node w/ custom logic
            </summary>
            <param name="level">Level of tree node (root's nodes have level 0)</param>
            <param name="treeModelNode">Current processed node</param>
            <param name="progress">Progress indicator to track processing progress</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.Exporting.TreeModelCellPresentersExportBase.ProcessCellPresentations(System.Int32,JetBrains.TreeModels.TreeModelNode,JetBrains.CommonControls.IPresentableItem[],JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process presentation of tree model node node w/ custom logic
            </summary>
            <param name="level">Level of tree node (root's nodes have level 0)</param>
            <param name="treeModelNode"></param>
            <param name="cells">Presentaions of the node's cells</param>
            <param name="progress">Progress indicator to track processing progress</param>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.LocallyPendedActionQueue.PendedActionScheduler">
            <summary>
            Gets or sets an optional custom scheduler
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeGridBrowser.NodeCheckedStateChangedEventArgs">
            <summary>
            Arguments for handler of checked state of <see cref="T:JetBrains.TreeModels.TreeModelNode"/> changed
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeGridBrowser.NodeCheckedStateChangedEventHandler">
            <summary>
            Handler of checked state of <see cref="T:JetBrains.TreeModels.TreeModelNode"/> changed
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView">
            <summary>
            View for <see cref="T:JetBrains.TreeModels.TreeModel"/>
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.UpdateVisibilityStates(System.Boolean)">
            <summary>
            Applies current visibility states provided by the controller
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.IsModelNodeAccepted(JetBrains.TreeModels.TreeModelNode,System.String)">
            <summary>
            Returns value indicating if specified modelNode is visible
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.GetCheckedNodes(System.Nullable{System.Boolean})">
            <summary>
            Gets user-checked nodes with required state (note, that if required state 
            is equal to DefaultCheckedState you still be provided by ONLY user affected nodes)
            </summary>
            <param name="requiredCheckState">Required state</param>
            <returns>Nodes</returns>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.SelectedNodesChanged">
            <summary>
            Occures when selected nodes changes
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.FocusedNodeChanged">
            <summary>
            Occures when focused node changes
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.MouseDoubleClick">
            <summary>
            Occurs when user do mouse double click
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.Updating">
            <summary>
            Occurs when update from model started
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.Updated">
            <summary>
            Occurs when update from model completed
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.Filtered">
            <summary>
            Occurs when a new filter is applied
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.CheckedStateChanged">
            <summary>
            Occurs when check state of a node changes
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.AccessBrackets">
            <summary>
            Gets or sets brackets to warp model access
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.Model">
            <summary>
            Gets or sets <see cref="T:JetBrains.TreeModels.TreeModel"/>
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.Presenter">
            <summary>
            Gets or sets <see cref="T:JetBrains.UI.TreeView.StructuredPresenter`2"/>
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.ActionInvocator">
            <summary>
            Gets or sets an action invokator
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.IsCheckable">
            <summary>
            Gets or sets whether check boxes are visible and binded to nodes
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.DefaultCheckedState">
            <summary>
            Gets or sets default check state
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.ColumnsDefinitions">
            <summary>
            Gets column definition collection related to the tree
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.PrimaryColumnDefinition">
            <summary>
            Gets column definition bounded to model entities
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridPresentableView.MaxTraverseDepth">
            <summary>
            Gets or sets how many levels are allowed to traverse in case of searching an item (building a path to an item)
            </summary>
        </member>
        <member name="T:JetBrains.IDE.TreeGridBrowser.TreeModelIteratorHelper">
            <summary>
            Helps to iterate <see cref="T:JetBrains.TreeModels.TreeModel"/> nodes as if they expanded and flattened
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeModelIteratorHelper.Enumerate(JetBrains.TreeModels.TreeModel,System.Func{JetBrains.TreeModels.TreeModelNode,System.Boolean})">
            <summary>
            Enumerates all nodes of the given tree model
            </summary>
            <param name="treeModel">Model</param>
            <param name="predicate">Predicate is required to prevent endless traversing in case of 'infinite' tree model, 
            it defines if we are allowed to get into the given node's children</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeModelIteratorHelper.Next(JetBrains.TreeModels.TreeModel,JetBrains.TreeModels.TreeModelNode,System.Collections.Generic.IList{JetBrains.TreeModels.TreeModelNode},System.Func{JetBrains.TreeModels.TreeModelNode,System.Boolean})">
            <summary>
            Get next node in the tree
            </summary>
            <param name="treeModel">Model</param>
            <param name="node">Node that uses as a base one to calc a next one related to it</param>
            <param name="roots">Roots of the tree</param>
            <param name="predicate">Predicate is required to prevent endless traversing in case of 'infinite' tree model, 
            it defines if we are allowed to get into the given node's children</param>
            <returns>Next node or null if there is no nodes further</returns>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeModelIteratorHelper.Previous(JetBrains.TreeModels.TreeModel,JetBrains.TreeModels.TreeModelNode,System.Collections.Generic.IList{JetBrains.TreeModels.TreeModelNode},System.Func{JetBrains.TreeModels.TreeModelNode,System.Boolean})">
            <summary>
            Get previous node in the tree
            </summary>
            <param name="treeModel">Model</param>
            <param name="node">Node that uses as a base one to calc a previous one related to or null (roots will be used)</param>
            <param name="roots">Roots of the tree</param>
            <param name="predicate">Predicate is required to prevent endless traversing in case of 'infinite' tree model, 
            it defines if we are allowed to get into the given node's children</param>
            <returns>Next node or null if there is no nodes further</returns>
        </member>
        <member name="T:JetBrains.IDE.TreeGridBrowser.TreeModelNodePresenter">
            <summary>
            Presenter for TreeModelNode via <see cref="!:StructuredPresenter&lt;T,V&gt;"/>
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeModelNodePresenter.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks,JetBrains.UI.TreeView.StructuredPresenter{JetBrains.TreeModels.TreeModelNode,JetBrains.CommonControls.IPresentableItem},System.Boolean,JetBrains.UI.TreeGrid.IActionInvocator,JetBrains.IDE.TreeGridBrowser.ITreeModelNodePresenterHost,System.Func{System.IDisposable},System.Boolean,System.Func{JetBrains.TreeModels.TreeModelNode,System.Nullable{System.Boolean}},System.Action{JetBrains.TreeModels.TreeModelNode,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="structuredPresenter">StructuredPresenter</param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.UsingAccessBrackets">
            <summary>
            Gets or sets brackets to warp model access
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.CanSearchOccurenceInto(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Defines predicate to prevent endless traversing in case of 'infinite' tree model, 
            it defines if we are allowed to get into the given node's children
            </summary>
            <param name="treeModelNode">Node</param>
            <returns>Returns true if we are allowed to get into the given node's children</returns>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.OnMoveToOccurence(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Should be overriden in derived panel to perform an additional action
            </summary>
            <param name="occurence"></param>
        </member>
        <member name="M:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.GetCheckedNodes(System.Nullable{System.Boolean})">
            <summary>
            Gets user-checked nodes with required state (note, that if required state 
            is equal to DefaultCheckedState you still be provided by ONLY user affected nodes)
            </summary>
            <param name="requiredCheckState">Required state</param>
            <returns>Nodes</returns>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.SelectedNodesChanged">
            <summary>
            Occures when selected nodes changes
            </summary>
        </member>
        <member name="E:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.FocusedNodeChanged">
            <summary>
            Occures when focused node changes
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.IsCheckable">
            <summary>
            Gets or sets whether check boxes are visible and binded to nodes
            </summary>
        </member>
        <member name="P:JetBrains.IDE.TreeGridBrowser.TreeGridBrowserPanel.DefaultCheckedState">
            <summary>
            Gets or sets default check state
            </summary>
        </member>
        <member name="T:JetBrains.IDE.UI.Options.OptionsPageViewFactorySolution">
            <summary>
            Enables <see cref="T:JetBrains.UI.Options.OptionsPageViewFactoryManager"/> to import Solution components to the ctor (preeempts Shell when a solution is open and it's the current solution).
            </summary>
        </member>
    </members>
</doc>
