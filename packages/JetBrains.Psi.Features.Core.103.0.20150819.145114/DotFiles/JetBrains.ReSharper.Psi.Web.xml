<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Psi.Web</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContent}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContent))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiAspThemedIcons.AspContent.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiAspThemedIcons.AspContent), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContent&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspContent Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContent}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContent))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspContent.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContent&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspContent Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContent"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContent}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContent))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspContent.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContent&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspContentPlaceholder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContentPlaceholder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContentPlaceholder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspContentPlaceholder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContentPlaceholder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspContentPlaceholder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspContentPlaceholder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspContentPlaceholder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspContentPlaceholder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspContentPlaceholder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspContentPlaceholder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspMasterPage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspMasterPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspMasterPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspMasterPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspMasterPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspMasterPage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspMasterPage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspMasterPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspMasterPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspMasterPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspMasterPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspNet Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspNet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspNet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspNet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspNet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspNet Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspNet"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspNet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspNet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspNet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspNet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspTag Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspTag))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspTag.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspTag Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspTag"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspTag))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspTag.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspUserControl Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspUserControl}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspUserControl))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspUserControl.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspUserControl&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspUserControl Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons.AspUserControl"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAspThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAspThemedIcons+AspUserControl}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAspThemedIcons.AspUserControl))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAspThemedIcons.AspUserControl.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAspThemedIcons.AspUserControl&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAsxxThemedIcons+Asxx}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiAsxxThemedIcons.Asxx))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiAsxxThemedIcons.Asxx.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiAsxxThemedIcons.Asxx), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiAsxxThemedIcons.Asxx&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Asxx Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAsxxThemedIcons+Asxx}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAsxxThemedIcons.Asxx))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAsxxThemedIcons.Asxx.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAsxxThemedIcons.Asxx&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Asxx Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons.Asxx"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiAsxxThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiAsxxThemedIcons+Asxx}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiAsxxThemedIcons.Asxx))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiAsxxThemedIcons.Asxx.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiAsxxThemedIcons.Asxx&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+Css}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.Css))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiCssThemedIcons.Css.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiCssThemedIcons.Css), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiCssThemedIcons.Css&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Css Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+Css}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.Css))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.Css.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.Css&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Css Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.Css"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+Css}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.Css))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.Css.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.Css&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssAtRule Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssAtRule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssAtRule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssAtRule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssAtRule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssAtRule Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssAtRule"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssAtRule}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssAtRule))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssAtRule.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssAtRule&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssClass Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssClass}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssClass))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssClass.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssClass&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssClass Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssClass"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssClass}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssClass))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssClass.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssClass&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssFunction Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssFunction Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssFunction"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssId Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssId))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssId.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssId Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssId"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssId))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssId.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssProperty Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssProperty Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssProperty"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssPropertyValue Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPropertyValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPropertyValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssPropertyValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPropertyValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssPropertyValue Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPropertyValue"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPropertyValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPropertyValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssPropertyValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPropertyValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssPseudoElement Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPseudoElement}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPseudoElement))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssPseudoElement.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPseudoElement&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssPseudoElement Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssPseudoElement"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssPseudoElement}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssPseudoElement))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssPseudoElement.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssPseudoElement&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssRuleset Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssRuleset.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssRuleset Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssRuleset.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CssRuleset2 Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssRuleset2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CssRuleset2 Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons.CssRuleset2"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiCssThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiCssThemedIcons+CssRuleset2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiCssThemedIcons.CssRuleset2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiCssThemedIcons.CssRuleset2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiCssThemedIcons.CssRuleset2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+Html}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.Html))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiHtmlThemedIcons.Html.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiHtmlThemedIcons.Html), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.Html&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Html Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+Html}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.Html))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.Html.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.Html&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Html Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.Html"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+Html}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.Html))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.Html.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.Html&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTag Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTag))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTag.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTag Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTag"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTag}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTag))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTag.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTag&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagAttribute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagAttribute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttribute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagAttributeValue"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HtmlTagId Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagId))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagId.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HtmlTagId Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons.HtmlTagId"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiHtmlThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiHtmlThemedIcons+HtmlTagId}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiHtmlThemedIcons.HtmlTagId))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiHtmlThemedIcons.HtmlTagId.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiHtmlThemedIcons.HtmlTagId&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiJavaScriptThemedIcons.Js.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiJavaScriptThemedIcons.Js), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Js Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.Js.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Js Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.Js"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+Js}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.Js))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.Js.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.Js&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsFunction Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsFunction Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsFunction"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsFunction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsFunction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsFunction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsFunction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsLabel Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsLabel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsLabel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsLabel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsLabel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsLabel Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsLabel"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsLabel}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsLabel))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsLabel.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsLabel&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsMsAjaxNs Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsMsAjaxNs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsMsAjaxNs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsMsAjaxNs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsMsAjaxNs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsMsAjaxNs Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsMsAjaxNs"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsMsAjaxNs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsMsAjaxNs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsMsAjaxNs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsMsAjaxNs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsParameter Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsParameter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsParameter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsParameter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsParameter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsParameter Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsParameter"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsParameter}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsParameter))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsParameter.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsParameter&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsProperty Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsProperty Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsProperty"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsProperty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsProperty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsProperty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsProperty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable">
             <summary>
              <para>
                <para>Autogenerated identifier class for the JsVariable Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsVariable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsVariable))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsVariable.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsVariable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the JsVariable Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.JsVariable"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+JsVariable}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.JsVariable))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.JsVariable.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.JsVariable&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TsIndexer Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TsIndexer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TsIndexer))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.TsIndexer.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TsIndexer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TsIndexer Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TsIndexer"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TsIndexer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TsIndexer))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.TsIndexer.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TsIndexer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TypeScript Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TypeScript}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TypeScript))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.TypeScript.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TypeScript&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TypeScript Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons.TypeScript"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiJavaScriptThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiJavaScriptThemedIcons+TypeScript}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiJavaScriptThemedIcons.TypeScript))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiJavaScriptThemedIcons.TypeScript.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiJavaScriptThemedIcons.TypeScript&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorCSharpThemedIcons+RazorCS}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorCSharpThemedIcons.RazorCS))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiRazorCSharpThemedIcons.RazorCS.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiRazorCSharpThemedIcons.RazorCS), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiRazorCSharpThemedIcons.RazorCS&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RazorCS Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorCSharpThemedIcons+RazorCS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorCSharpThemedIcons.RazorCS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorCSharpThemedIcons.RazorCS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorCSharpThemedIcons.RazorCS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RazorCS Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons.RazorCS"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorCSharpThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorCSharpThemedIcons+RazorCS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorCSharpThemedIcons.RazorCS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorCSharpThemedIcons.RazorCS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorCSharpThemedIcons.RazorCS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+Razor}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.Razor))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiRazorThemedIcons.Razor.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiRazorThemedIcons.Razor), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiRazorThemedIcons.Razor&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Razor Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+Razor}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.Razor))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.Razor.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.Razor&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Razor Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.Razor"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+Razor}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.Razor))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.Razor.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.Razor&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RazorHelperMethod Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethod))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RazorHelperMethod Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethod"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethod))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RazorHelperMethodVs Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethodVs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethodVs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethodVs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethodVs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RazorHelperMethodVs Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorHelperMethodVs"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorHelperMethodVs}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorHelperMethodVs))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorHelperMethodVs.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorHelperMethodVs&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RazorSection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorSection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorSection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorSection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorSection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RazorSection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons.RazorSection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiRazorThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiRazorThemedIcons+RazorSection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiRazorThemedIcons.RazorSection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiRazorThemedIcons.RazorSection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiRazorThemedIcons.RazorSection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.Generate.AspCodeBehindGenerator">
            <summary>
            Abstract base class for code generator
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Utils.IComplexTypeParserFactory.CreateParserDelegate(System.Boolean)">
            <summary>
            Returns function that creates parser by: 
              string:        text to parse
              TreeTextRange: tree range of the text being parsed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.AspCodeBehindGeneratedDocumentService">
            <summary>
            Generated document service for C# and VB languages of ASP page.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.Format(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.CodeStyle.CodeFormatProfile,JetBrains.Application.Progress.IProgressIndicator,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.ReSharper.Psi.CodeStyle.IPotentSettingsTracker)">
            <summary>
            Format the given range in the tree. The bounding nodes are random, not siblings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatInsertedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatInsertedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatReplacedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.CodeStyle.HtmlCodeFormatter.GetMinimalSeparator(JetBrains.ReSharper.Psi.Tree.ITokenNode,JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Create the necessary separator between two given tokens (for example. space between identifiers)
             If there is no necessity for separator, then return <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.Generate.AspCodeBehindFileGenerator">
            <summary>
            AspCodeBehindFileGenerator is a utility to generate code-behind-like class for .aspx page.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.Generate.LinqToXsd.LinqToXsdBuilder.CopyFile(JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.IProjectFile,JetBrains.DocumentManagers.DocumentManager)">
            <summary>
            Copies file content to the appropriate location (creates folders if necessary)
            </summary>
            <returns>relative path</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.Generate.Tools.InterruptableProcessRunner.RunProcess(System.String,System.String,JetBrains.Util.FileSystemPath,System.Int32)">
            <summary>
            Runs external process, checks for interrupt and throws ProcessCancelledException if interrupted
            </summary>
            <returns>true if process exited</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.Parsing.HtmlTokenNodeTypes.#ctor">
            <summary>
            Constructor for inheritors - with no init
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.OnProjectFileAdded(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Modules.PsiModuleChangeBuilder,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper})">
            <summary>
            Creates/ updates psi source files if knows what to do with incoming file
            </summary>
            <returns>True if and only if file is processed. False otherwise</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.IWebPsiModuleHandlerHelper.Priority">
            <summary>
            The higher the priority, the sooner the helper is asked to process files.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.WebApp.Modules.SharepointPredefinedFilesModuleBase.InitializeFiles(JetBrains.Util.FileSystemPath,System.String,System.String,JetBrains.DocumentManagers.DocumentManager,JetBrains.ProjectModel.IProjectFileExtensions,JetBrains.ReSharper.Psi.PsiProjectFileTypeCoordinator)">
            <returns>true if loaded from physical folder</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.PsiModules.IWebProjectFileClassifier">
            <summary>
            ProjectFileType-specific 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.Website.Properties.IWebsiteAsxxPsiSourceFilePropertiesFactory">
            <summary>
            Psi language-dependent component
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.PsiModules.Website.Properties.IWebsiteCodeBehindPsiSourceFilePropertiesFactory">
            <summary>
            ProjectFile language-dependent component
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.UniqueIdGenerator">
            <summary>
            UniqueIdGenerator.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceWithinElementBase`1.#ctor(`0,JetBrains.ReSharper.Psi.Html.Tree.IHtmlToken)">
            <param name="owner"></param>
            <param name="token">Unquoted token</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlPathReferenceBase`2.IsServerSideWebRoot">
            <summary>
            Supported web root path
            </summary>
            <returns>
            <value>null</value> - not supported
            <value>false</value> - client-side root
            <value>true</value> - server-side root
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlFileReference`2.#ctor(`0,JetBrains.ReSharper.Psi.Resolve.IQualifier,`1,JetBrains.ReSharper.Psi.TreeTextRange,JetBrains.ProjectModel.ProjectFileType,System.Collections.Generic.ICollection{System.String},System.Boolean,System.Boolean)">
            <param name="owner"></param>
            <param name="qualifier"></param>
            <param name="token"></param>
            <param name="rangeWithin"></param>
            <param name="expectedFileType"></param>
            <param name="expectedExtensions">if null - default extensions for project file type</param>
            <param name="noCircular"></param>
            <param name="allowEmptyName"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.References.TagNameReference">
            <summary>
            Reference should be qualifiable in order that AllNonQualifiableReferenceResolver processes it
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Asp.Impl.References.TagPrefixReference">
            <summary>
            Reference should be qualifiable in order that AllNonQualifiableReferenceResolver processes it
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Tree.IWebCodeBlock">
            <summary>
            C# or VB code block or expression inside web page (ASP or Razor)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeBefore(`0,`0)">
            <summary>
            Adds attribute before the anchor. If anchor == null, the attribute is inserted after the last attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttributeContainer`1.AddAttributeAfter(`0,`0)">
            <summary>
            Adds attribute after the anchor. If anchor == null, the attribute is inserted before the first attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Tree.IWebAttribute.AttributeNameEqualsTo(System.String)">
            <summary>
            Fast check for AttributeName to reduce memory traffic
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer.AddTagBefore``1(``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag before then anchor. If anchor == null, the tag is inserted after the last tag
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer.AddTagAfter``1(``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag after ther anchor. If anchor == null, the tag is inserted before the first tag
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagName.GetDeclaration">
            <summary>
            Returns declaration from which the TagName is built
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.ITagPrefix.GetDeclaration">
            <summary>
            Returns declaration from which the TagPrefix is built
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Parsing.AspElementFactory.WrapChildrenAndCreateHead(JetBrains.ReSharper.Psi.Html.Tree.IHtmlFile)">
            <summary>
            
            </summary>
            <param name="aspFile"></param>
            <returns>Triple of html, head, body tags</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlTreeBuilderBase`5">
            <summary>
            HtmlTreeBuilder
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5">
            <summary>
            WebTreeBuilder
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Parsing.IWebTreeBuilder.CanHaveServerSideNodes">
            <summary>
            For optimization in case of HTML which does not have server-side nodes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.ParseAdditionalConstruct(JetBrains.ReSharper.Psi.Html.Parsing.HtmlTokenNodeType{`3}@,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement@)">
            <summary>
            
            </summary>
            <param name="tokenType"></param>
            <param name="compositeElement">Current tree parent, can be changed.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.AppendParsedTag(JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlTag,JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlTagHeader,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement,JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.CompositeElement)">
            <summary>
            Adds just parsed tag to the tree and returns composite element used and current for further parsing
            </summary>
            <param name="tag">Parsed tag</param>
            <param name="originalParent">Default parent tag for just parsed one</param>
            <param name="compositeElement">Element being current for parsing (for spaces etc.)</param>
            <param name="tagHeader"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Parsing.WebTreeBuilder`5.HandlingTokens">
            <summary>
            Token types, thouse are handled by tree builder
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Asp.Tree.AspTagExtensions.IsAffectedByCustomControlBuilder(JetBrains.ReSharper.Psi.Asp.Tree.IAspTag)">
            <summary>
            HACK HACK HACK!!!
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.Properties.IWebsiteAppCodePsiSourceFilePropertiesFactory">
            <summary>
            ProjectFile language-dependent component
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Html.CssFromHtmlGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.HtmlProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Asp.CssFromAspGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.AspProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.BrowserCompatibility.BrowserCompatibility.Parse(System.String,JetBrains.ReSharper.Psi.Css.Definitions.ICssDefinitionsStorage)">
            <summary>
            Parse browser names with optional version range.
            </summary>
            <param name="text">IE10-11, IE10+, IE10, IE</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.CodeStyle.CssCodeFormatter.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Css.CodeStyle.CssCodeStyleSettings">
            <summary>
            Used for storing and managing of code style settings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.CssConstantValuesExtensions.GetConstantValueAndUnits(JetBrains.ReSharper.Psi.Css.Tree.ICssPropertyValueExpression)">
            <summary>
            Returns numeric value and units of literal in case literal represents number
            Value parsed using double.TryParse
            </summary>
            <param name="propertyValueExpression"></param>
            <returns>pair of value and units or null</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.All">
            <summary>
            All of them must occur, in the given order.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.And">
            <summary>
            All of which must occur, in any order
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Any">
            <summary>
             One or more of them must occur, in any order
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Or">
            <summary>
            Exactly one of them must occur.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.Default">
            <summary>
            <see cref="F:JetBrains.ReSharper.Psi.Css.Definitions.CssValueGroupType.All"/> is default value.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Razor.CssFromRazorGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.RazorProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Css.Razor.CSharp.CssFromRazorCSharpGeneratedDocumentService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.ProjectModel.RazorCSharpProjectFileType)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserChrome}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserChrome))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = BrowsersThemedIcons.BrowserChrome.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(BrowsersThemedIcons.BrowserChrome), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserChrome&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserChrome">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BrowserChrome Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserChrome.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserChrome}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserChrome))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserChrome.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserChrome&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserChrome.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BrowserChrome Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserChrome"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserChrome}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserChrome))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserChrome.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserChrome&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserFirefox">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BrowserFirefox Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserFirefox.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserFirefox}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserFirefox))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserFirefox.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserFirefox&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserFirefox.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BrowserFirefox Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserFirefox"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserFirefox}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserFirefox))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserFirefox.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserFirefox&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserIExplorer">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BrowserIExplorer Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserIExplorer.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserIExplorer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserIExplorer))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserIExplorer.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserIExplorer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserIExplorer.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BrowserIExplorer Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserIExplorer"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserIExplorer}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserIExplorer))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserIExplorer.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserIExplorer&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserOpera">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BrowserOpera Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserOpera.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserOpera}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserOpera))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserOpera.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserOpera&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserOpera.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BrowserOpera Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserOpera"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserOpera}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserOpera))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserOpera.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserOpera&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserSafari">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BrowserSafari Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserSafari.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserSafari}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserSafari))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserSafari.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserSafari&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserSafari.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BrowserSafari Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons.BrowserSafari"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Src.Css.Resources.BrowsersThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BrowsersThemedIcons+BrowserSafari}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BrowsersThemedIcons.BrowserSafari))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BrowsersThemedIcons.BrowserSafari.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BrowsersThemedIcons.BrowserSafari&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Css.Services.MinifiedFilesFilter">
            <summary>
            Filter out not documented files (preferes bare .css to .min.css)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiWebThemedIcons.AspDirective.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiWebThemedIcons.AspDirective), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspDirective Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirective.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspDirective Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirective"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirective}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirective))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirective.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirective&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspDirectiveAttribute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirectiveAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirectiveAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirectiveAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirectiveAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspDirectiveAttribute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspDirectiveAttribute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspDirectiveAttribute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspDirectiveAttribute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspDirectiveAttribute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspDirectiveAttribute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AspHtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspHtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspHtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspHtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspHtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AspHtmlTagAttributeValue Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons.AspHtmlTagAttributeValue"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Psi.Resources.PsiWebThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiWebThemedIcons+AspHtmlTagAttributeValue}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiWebThemedIcons.AspHtmlTagAttributeValue))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiWebThemedIcons.AspHtmlTagAttributeValue.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiWebThemedIcons.AspHtmlTagAttributeValue&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.Loose">
            <summary>
            Don't account for AllowIdentityLoss
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.StrongTyped">
            <summary>
            Treat all dynamic types as equals
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsTypeComparer`1.IgnoreSubstitution">
            <summary>
            Ignore substitution while comparing
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Html.IHtmlEnumAttributeValueType.Strict">
            <summary>Additional values mode</summary>
            <remarks>False, if additional attributes are allowed, not listed in attribute's definition</remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Impl.PredefinedControls.HtmlTagInfo.AttributeTypes">
            <summary>
            Tag's attrbute types
            <remarks>Can contains not all attributes</remarks>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceToIdInsidePath.GetStaticness">
            <summary>
            Determines whether static members are accessible in this context.
             Staticness should be consistent with qualifier kind of access context.
             All qualifier 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Html.Impl.References.HtmlReferenceToIdInsidePath.FileQualifier.Resolved">
            <summary>
            False means failed to resolve
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlDocumentRangeTranslator">
            <summary>
            HtmlDocumentRangeTranslator maps tree ranges of IHtmlFile to ranges of html/aspx/razor file and all included files
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlInclude">
            <summary>
            The node, that represents include
            if include file is resolved, the node has no children
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Impl.Tree.HtmlIncludeEnd">
            <summary>
            End of include empty node
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlCompoundIncrementalLexer`1">
            <summary>
            Incremental composite lexer for HTML-inherited files (ASPX, Razor).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Html.Parsing.HtmlCompoundLexer`1">
            <summary>
            Composite lexer for HTML-inherited files (ASPX, Razor).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlAttributeContainerUtil.AddAttributeBefore``3(``0,``1,JetBrains.ReSharper.Psi.Tree.ITreeNode,``2)">
            <summary>
            Adds attribute before the anchor. If anchor == null, the attribute is inserted after the last attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlAttributeContainerUtil.AddAttributeAfter``3(``0,``1,JetBrains.ReSharper.Psi.Tree.ITreeNode,``2)">
            <summary>
            Adds attribute after the anchor. If anchor == null, the attribute is inserted before the first attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlPathReferenceUtil.ExpandRootName(System.String,JetBrains.ProjectModel.IProject,System.Boolean)">
            <summary>
            Expand root symbol in path (~) to real path in project
            </summary>
            <param name="path">Original path with ~</param>
            <param name="project">Project to calculate root</param>
            <param name="clientSide">Treat ~ path for client-side</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Html.Utils.HtmlTagContainerUtil.AddTagAfter``1(JetBrains.ReSharper.Psi.Html.Tree.IHtmlTagContainer,``0,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Adds tag after ther anchor. If anchor == null, the tag is inserted before the first tag
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol">
            <summary>
            Customization point for javascript properties
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsExplicit">
            <summary>
            Returns true for intentionally declared symbols (like var, {sss:} not just e = ???)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.SourceFile">
            <summary>
            Owner PSI source file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.NavigationOffset">
            <summary>
            Offset where name of symbol is specified
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsPrimaryFileSymbol">
            <summary>
            Symbol was declared/used in a global java script file (not in HTML)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptSymbol.IsFrameworkDeclaration">
            <summary>
            Symbol belongs to framework
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindAllPropertyRules(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,JetBrains.ReSharper.Psi.IPsiSourceFile,System.Boolean)">
            <summary>
            Returns property rules for file
            </summary>
            <param name="context"></param>
            <param name="consumer"></param>
            <param name="file"></param>
            <param name="filterOutNonJs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindAllPropertyRules(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,System.Boolean)">
            <summary>
            Works slow because iterates over whole cache. Use overload with IPsiSourceFile when possible,
            or, to obtain all dynamic properties use <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.GetAllDeclarationsSymbolTable(JetBrains.ReSharper.Psi.IPsiSourceFile)"/> or <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.GetAllMeaningPropertyNames"/>
            </summary>
            <param name="context"></param>
            <param name="consumer"></param>
            <param name="filterOutNonJs"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.CheckIfRuleCouldExist(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,System.Boolean)">
            <summary>
            Checks only via hash code, so false positives are possible
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Caches.IJavaScriptTypeCache.FindRulesWithParent(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitive,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Caches.IJsRuleConsumer,System.Boolean)">
            <summary>
            Filters only by hash code, so could give consumer more rules than needed, please check for equality in Consume
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Caches.JsFilteringElementList">
            <summary>
            JsResolveImplUtil.ShouldAddElementToDeclaredElementList casts to the base collection class to perfrom optimal enumerating 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.JavaScriptCodeFormatterBase.FormatDeletedNodes(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Format code during WritePSI action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.CodeStyle.SettingsUpgrade.JavaScriptCodeStyleSettings">
            <summary>
            Used for storing and managing of code style settings
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsMemberElement">
            <summary>
            Any element that could be inside module/class/interface, local or exported, private or public
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsMemberElement.GetParentElement">
            <summary>
            Can be null if parent type is object literal, global module or for local classes/interfaces/modules
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleMember">
            <summary>
            Module member
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement.GetExtendedBaseElements(System.Boolean,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>Returns elements under 'extended' clause</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement.GetAllBaseElements(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns elements under all hierarchy clauses - under 'extends' for interfaces, under 'extends' and 'implements' for classes. 
            Only immediate bases is returned. Use <see cref="T:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil"/> for full hierarchy.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsTypeMember">
            <summary>
            Class/interface member - public or private
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsStaticTypedProperty">
            <summary>
            Type member that can used in structural search - any type member and TS literal property
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsConstructor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsLocalModuleMember">
            <summary>
            Local (not exported) module members, except types
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExportedModuleMember">
            <summary>
            Exported module members, except types
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleElement.HasUsableName">
            <summary>
            Returns true if module name can be used in code. False will be returned if a module isn't declared by user and corresponding to a ts-file.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptAnyLocalElement.GetOwnerScopeOffset(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsDocumentOffsetProvider)">
            <summary>
            Position of the beginning of the owner scope in the document.
            It should be valid and != -1 even in case of doc comment parameter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptAnyLocalElement.GetOwnerScope">
            <summary>
            Can be null in case of parameter from doc comment signature
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptLocalElement">
            <summary>
            Local variable of function...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptArgumentsVariable">
            <summary>
            Local 'arguments' variable
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Html.GeneratedDocuments.JavaScriptGeneratedLanguageService.#ctor(JetBrains.ReSharper.Psi.ILanguageManager)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Html.GeneratedDocuments.JavaScriptInWebLexer.myAlienTokenPositions">
            <summary>
            List of (x,y):
            where x - location in the projected buffer
                  y - range in the original buffer
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Caches.LruDictionary`2">
            <summary>  
            On new element addition evicts the least recently used element if full. Not thread-safe.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType.FindSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsSignatureKind,JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature}@)">
            <summary>
            Don't use this method directly, use extension method GetSignatures instead
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.Parser.FunctionAnnotationParser.ParseValueExpression">
            <summary>
            </summary>
            <remarks>
            Grammar for ValueExpression(expr):
            
            expr :: term ('|' term)*
            term :: factor ('&amp;' factor)*
            factor :: '(' expr ')'
            factor :: !factor
            factor :: VALUE
            </remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ContractAnnotations.PreparedAnnotation.WriteArrayElements(JetBrains.Util.PersistentMap.UnsafeWriter,JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Values.JsVariableStateExtended[])">
            <summary>
            Note: doesn't write array length.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHiveExt.FilterHive(JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemoryHive,System.Predicate{JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.DependentAnalysis.JsMemorySnapshot})">
            <summary>
            
            </summary>
            <param name="hive"></param>
            <param name="filterPredicate"></param>
            <remarks>filterPredicate should not modify snapshot, passed to it!</remarks>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableBinaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized before its' call.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.Rules.TableUnaryOpRules.InitTable">
            <summary>
            Should initialize a table used for futher calculations. Please note that this method is being called
            from constructor and, hence, should not assume Derived class will be initialized upon its' call.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.ControlFlow.Inspections.ValueAnalysis.ValueAnalysisPreprocessingData.DataBuilder.BuildData">
            <summary>
            Returns built ValueAnalysisPreproccessingData. Invalidates builder.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.jQuery.JQueryNotDocumentedFilesFilter">
            <summary>
            Filter out not documented files (preferes -vsdoc.js to bare .js and .min.js)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Framework.MicrosoftAjax.NotDebugFilesFilter">
            <summary>
            Filter out not debugging files (preferes .debug.js to bare .js)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ITsType.GetIndexSignatureType(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.IndexerKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo)">
            <summary>
            Returns result type for index signature. If there is no index signature of the given type, returns struct with ResolvedType == null.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsProxyTypeBase`1">
            <summary>
            When we have a type params invocation for type with several possible signatures, we cannot immediately match
            type paramaters with type arguments to create an instantiation, so we store it in this class
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsResolveImplUtil.IsRooted(System.String)">
            <summary>
            Method taken from tsc source, doesn't work on Win
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsResolveImplUtil.GetParameterType(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo[],System.Int32,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.StrongTypeMode)">
            <summary>
            Returns Error if index is out of range when there are no rest params, or rest param is not Array type or has wrong instantiation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsResolveImplUtil.GetFormalParameterType(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo[],System.Int32,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.StrongTypeMode,System.Boolean)">
            <summary>
            Doesn't check for rest params, only checks range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsSignatureSearcher.Run(JetBrains.Util.dataStructures.FrugalLocalList{JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsPrimitiveWithTypeParams}@)">
            <summary>
            If myStopAfterFirstTypeWithSignatures, returns if signatures were found in the first (our) type. False means that they were found in base types.
            Otherwise returns true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.TypeScript.TsUnionType.#ctor(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType[],JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsInitialResolveContext)">
            <summary>
            Please don't use directly, use TsResolveImplUtil.GetUnionOrPlainType
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.CaseSensitiveMultipleFilterSymbolTable">
            TODO: Remove. Created just to fix 
            TODO: http://youtrack.jetbrains.com/issue/RSRP-396750RSRP-396750 
            TODO: Intellisense shouldn't replace class name by variable name, but should provide both of them instead 
            <summary>
            Case sensitive filtering!
            Filters symbol table with multiple filters
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsInvocationInfo.InvocationType">
            <summary>
            Return, element or constructed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext.FindCalculationIdentifier(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.ICalculationIdentifier)">
            <summary>
            Returns calculation depth of given identifier or -1 if identifier is not found in current calculation stack
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsRootResolveContextForCalculations">
            <summary>
            First child context stores non-thread-safe cache with temporary values
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveLoggerWithTextWriter">
            <summary>
            For tests and internal logging features
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType.ToSinglePrimitiveForm(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsDocumentOffsetProvider)">
            <summary>
            Would return primitive with PrimitiveType.Unknown if empty or complex
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType.BuiltinTypeID">
            <summary>
            Return 0 if not a built-in type
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature.DocSignature">
            <summary>
            Associated Doc comment signature.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature.SourceFile">
            <summary>
            Source file where signature owner is declared. Used for presentation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.BetterSourceFilesFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Impl.SymbolFilters.DocCommentsOwnerFilter">
            <summary>
            Filters out elements that don't have doc comments (when there are elements with doc comments)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IBlockScope">
            <summary>
            Parent for local elements which has block. Could be function, lambda or module.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.GetDirectives">
            <summary>
            Returns all directives from this node
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.HasUseStrictDirective">
            <summary>
            Indcates that this node has 'use strict' directive
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.ThisOrParentHasUseStrictDirective">
            <summary>
            Indicates that this node or some of parents has 'use strict'
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDirectiveOwner.GetStatementsOwner">
            <summary>
            Returns statements owner to add or remove directives
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptDeclaredElementProvider">
            <summary>
            Tree nodes that provide names to the parent scope, such as variables, function statement,
            TS modules, classes and interfaces
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJsModuleScope.IsGlobal">
            <summary>
            Module is file without exports and imports (part of global module)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.IJsModuleScope.IsExternal">
            <summary>
            Module is declared as: declare module "ExternalName" {} or is file with exports and imports
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsModuleDeclaration.PresentableFullName">
            <summary>
            Full name of a module or external module name; 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITsModuleDeclarationName.PresentableFullName">
            <summary>
            Full name of a module or external module name;
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.IArrayLikePattern`1.GetAllArgumentsWithGaps(System.Boolean)">
            <summary>
            All pattern arguments, including "holes" between commas represented by "null"
            </summary>
            <param name="includeElided">Include elided elements (gaps-only sequence at the end of pattern which has no semantic sense) into the list</param>
            <returns>List of nodes and nulls for gaps</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptDeclaredElementFunctionUtil.ElementIsNewable(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.IJavaScriptTypeOwner,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns true if element is a class element or if its type has construct signatures
            </summary>
            <param name="element"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Impl.Util.JavaScriptPsiImplUtil.ourWellKnownSymbols">
            <summary>
            ECMAScript 6 well-known symbols
            (https://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-symbols)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.LanguageImpl.JavaScriptLanguageService.CodeFormatter">
            <summary>
            Get the code formatter
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.JavaScriptNamingLanguageService.GetConflictedElements(System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind)">
            <summary>
            Finds all conflicting by specified name declarations in specified context with specified kind of scope.    
            </summary>       
            <param name="context">    
            Expected contexts in common scope:
              1) objectLiteral member - search among owner's members    
              2) otherwise - search among all enclosing scopes and all nested scopes
            </param>
            <param name="kind">
            common scope - namespace which includes names of symbols
            type and namespace scope - unsupported
            local self scoped - unsupported
            </param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.TypeScript.TsNamingLanguageService.GetConflictedElements(System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Naming.Impl.ScopeKind)">
            <summary>
            Finds all conflicting by specified name declarations in specified context with specified kind of scope.    
            </summary>
            <param name="name"> checking name </param>
            <param name="context">    
            Expected contexts in common scope:
              1) class/interface/objectType/objectLiteral/enum member - search among owner's members
              2) context is not last overload signature's or call signature's or index signature's child - search among this overload's params
              3) otherwise - search among all enclosing scopes and all nested scopes
            
            Expected context in type and namespace scope(symbol's namespace and type's namespace):
              1) any node - search among all enclosing scopes and all nested scopes
            </param>
            <param name="kind">
            common scope - namespace which includes names of symbols only
            type and namespace scope - namespace which includes names of symbols, types, modules
            local self scoped - unsupported
            </param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Naming.JavaScriptNamingUtil.IsValidJsPropertyName(System.String)">
            <summary>
            True if valid identifier or has quotes
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Parsing.JavaScriptTreeBuilder.ParseOtherStatementAfterDotAndNewline">
            <summary>
            Checks whether we need to treat the expression on new line after dot as a new expression
            instead of previous expression countinuation, e.g. "myVar.\r\nfor()" should be treated as function
            but "myVar.\r\nfor(;;)" should be treated as for-loop at the new line
            </summary>
            <returns>Whether we should treat newline statement as a different statement</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TsResolveUtil.GetNumericIndexFromPropertyName(System.String)">
            <summary>
            Returns -1 if not
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareTypes(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS types for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="type1">Source type</param>
            <param name="type2">Target type</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareTypes(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveResult,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS types for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="type1">Source type</param>
            <param name="type2">Target type</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS signatures for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="signature1">Source signature</param>
            <param name="signature2">Target signature</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns>Comparison result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.TypeRelationsUtil.CompareSignatureSets(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature},System.Collections.Generic.IList{JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature},JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonKind,JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext)">
            <summary>
            Compares two TS signature sets for identity, subtyping or assignability
            </summary>
            <param name="context">Resolve context</param>
            <param name="targetSignatures">Target signatures</param>
            <param name="sourceSignatures">Source signatures</param>
            <param name="comparisonKind">Identity, subtyping or assignability</param>
            <param name="comparisonContext">If null, creates empty context without preserving errors. If provided, uses provided options.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext">
            <summary>
            Context for type comparison operations
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SkipExplicitDerivedCheck">
            <summary>
            By default, subtyping check uses a short-cut: if a type is derived, just returns true.
            Set this flag to not use this short-cut
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SkipSignatureReturnCheck">
            <summary>
            Set this flag to compare signatures without taking their return types into account
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.SubTypingForOverloadsSort">
            <summary>
            This flag is only for use within TopoSignatureComparer
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.HasMissingMembers">
            <summary>
            If there are missing members, this flag will be set to true
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.RequestFullInfo">
            <summary>
            By default, check will interrupt at the first error
            Set this flag to go deeper
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.ResolveInfo">
            <summary>
            Merged status of types resolved during comparison
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.AddResult(JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.IComparisonResult,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Add comparison error result
            </summary>
            <param name="result">Result</param>
            <param name="resolveContext">Resolve context (if null, no logging)</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetMainResult">
            <summary>
            Get the top-level comparison error result
            </summary>
            <returns>Main comparison error</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetSingleDeepResult">
            <summary>
            Returns full hierarchy for errors if there is only single error chain
            Otherwise, returns null
            </summary>
            <returns>Full error hierarchy (0 is top-level, further is deeper) or null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.HasErrorInfo">
            <summary>
            Returns true if there exist any error messages (so that string error should be available)
            </summary>
            <returns>Error messages exist or not</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.GetErrorText">
            <summary>
            Creates error message text for all the errors at all levels
            Levels are specified by indenting from the left
            </summary>
            <returns>Text</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.myDepth">
            <summary>
            Current context depth
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IsInitialCheck">
            <summary>
            Use this to ensure that the check is initial for original types, and is not a nested level check
            </summary>
            <returns>Whether the check is initial</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IsSecondaryCheck">
            <summary>
            Use this to ensure that the check is the first nested after the initial for original types, and is not a nested level check
            </summary>
            <returns>Whether the check is initial</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.mySilentByDepth">
            <summary>
            If context depth exceeds some reasonable level, switch to silent mode to not store 100500 error messages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.PushDepth">
            <summary>
            Make deeper
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.PopDepth">
            <summary>
            Make shallower
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.Silent">
            <summary>
            Set this flag to not save errors if you don't need them - preserves memory and improves performance
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.ExtraMembers">
            <summary>
            If there are extra members, and this is not null, save them here
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.MissingMembers">
            <summary>
            If there are missing members, and this is not null, save them here
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ComparisonContext.IdenticalSignatureReturns">
            <summary>
            If this is a signature comparison, and signatures are identical, and this is not null, save return types for signatures
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.JsFunctionSignatureTopoComparer">
            <summary>
            Use to sort overloads in order in which more specific signature is the first.
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.JsFunctionSignatureTopoComparer.Compare(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsFunctionSignature)"/> for <see cref="M:JetBrains.Util.SortUtil.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Nullable{System.Int32}},System.Collections.Generic.IEqualityComparer{``0})"/>.   
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.Dynamic">
            <summary>Only use this rule when doing dynamic type resolve</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ImplicitTyping">
            <summary>Implicit could only be used after checking that there is explicit. Example: var a = expr;</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ExplicitTyping">
            <summary>Example: var a: type;</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypingType.ConditionalAlias">
            <summary>Can only use property after checking that associated type resolves</summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Object">
            <summary>
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKindExtensions.HasObject(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKind)"/> for full info
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.ParameterIndex">
            <summary>
            For return types (invocations) and parameters
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.TypeList">
            <summary>
            For storing parameter types in invocations, constructions, element types, combined types, etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Offset">
            <summary>
            For local types (symbols, obj or func literals, etc)
            Also used for primitives to store ID - should be remade
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeDescriptionOpInfo.Name">
            <summary>
            For symbols, types, scopes
            <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKindExtensions.HasName(JetBrains.ReSharper.Psi.JavaScript.Resolve.JsPrimitiveKind)"/> for full info
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetReturnType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,System.Int32,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray)">
            <summary>
            When type is a function returns type of the function return value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetTypePredicateType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray,System.Int32)">
            <summary>
            When type is a type predicate (user-defined type guard) on an invocation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetConstructedType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsUnresolvedTypeArray)">
            <summary>
            If type is an object constructor returns type of the constructed object
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetElementType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType,JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsUnresolvedType)">
            <summary>
            If type is instance of Array returns type of element of array
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetProperties(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Boolean,JetBrains.ReSharper.Psi.IPsiSourceFile,System.Int32,System.Boolean,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsTypeResolveInfo)">
            <summary>
            Properties of this object...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetTsProperties(JetBrains.ReSharper.Psi.JavaScript.Resolve.TypeScript.ITsType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.Boolean,System.Boolean)">
            <summary>
            Properties of this object...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.GetSignatures(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.JavaScript.Resolve.JsSignatureKind)">
            <summary>
            Returns signatures of all possible overloads
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.IsStandardJsType(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,System.String)">
            <summary>
            If fullType is standart type returns true, otherwise false
            TODO: remake everything
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JavaScriptTypeEx.IsJsFunction(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            If fullType is function type returns true, otherwise false
            TODO: remake everything
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsDynamicCompositeType.HasSignatures(JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns it this symbol can be used as a function (this check is much faster then Signatures.Any())
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo.Name">
            <summary>
            In case of ES 6.0 destructuring parameters, like function ({p1, p2}),
            one positional parameter could encompass several named parameters.
            In this case name for positional parameter is null.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.JavaScript.Resolve.JsParameterInfo.JsAnnotatedType">
            <summary>
            Raw unresolved type as supplied by a user. Don't use unless sure. Use GetResolvedType instead.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.JavaScript.Services.MinifiedFilesFilter">
            <summary>
            Filter out not documented files (preferes bare .js to .min.js)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsModifiersOwnerExtensions.IsAmbient(JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.ITypeScriptModifiersOwner)">
            <summary>
            Declaration or it's owner module has 'declare' modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsParametersOwnerClassification.Declaration">
            <summary>
            Ambient declarations, overloads.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.TypeScript.TsParametersOwnerClassification.Implementation">
            <summary>
            Implementation declarations.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.JavaScriptStatementExtensions.ReplaceBy``1(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptStatement,``0)">
            <summary>
            Replace this statement in the tree by the copy of the given statement
            </summary>
            <param name="stmt"></param>
            <returns>The clone of the original statement which was added into the tree </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Tree.JavaScriptExpressionExtentions.GetExpressionToReplace(JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression)">
            <summary>
            Calculates outer expression which can be redundant parentheses wrapper of <paramref name="expression"/>
            </summary>
            <param name="expression"></param>
            <returns>Wrapper if found, or <paramref name="expression"/> itself otherwise</returns>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Export">
            <summary>
            Modifier for export declarations in modules.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Declare">
            <summary>
            Ambient declaration in module modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.JavaScript.Tree.JsModifiers.Default">
            <summary>
            ECMAScript 6 'export default' thing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstSameNamedDeclarationFor``1(``0)">
            <summary>
            Returns first declaration for given member. Used e.g. to get the first function member overload in interface declaration.
            <code>
            interface A {
              /** 
               * doc
               */
              get(x : Number);
              get(x : String);
              get(x : Boolean);
            }
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="declaration"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstDeclarationFor``1(``0,System.Predicate{``0})">
            <summary>
            Works like <see cref="M:JetBrains.ReSharper.Psi.JavaScript.Util.JsDoc.JsDocCommentNodeOwnerUtil.FindFirstSameNamedDeclarationFor``1(``0)"/> but operates on nameless members (call and construct signatures)
            <code>
            interface A {
              /** 
               * doc
               */
              (x : Number);
              (x : String);
              (x : Boolean);
            }
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="declaration"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil.GetBaseTypesWithLevelsRecursively(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns pairs of base types with level
            </summary>
            <param name="typeElement"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.HierarchyUtil.GetBaseTypesWithInstantiationsRecursively(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Returns pairs of base types with instantiations
            </summary>
            <param name="typeElement"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsBindUtil.CreateReplacementReference(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.JavaScript.Impl.Services.TypeScript.TsElementFactory,System.String)">
            <summary>
            We shouldn't break the tree, so we replace original references only by corresponding types of references
            </summary>
            <param name="reference">Original reference</param>
            <param name="factory">Factory</param>
            <param name="format">Format string for replacement</param>
            <returns>Created replacement</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTreeUtil.GetPossibleIdentifierExpression(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Gets possible identifier for an expression, if failed - returns expression itself
            Please don't use this for decorators - they are processed specially here
            </summary>
            <param name="decl">expression</param>
            <returns>identifier or original when failed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.IsFromTheSameInheritanceHierarchyWith(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsExtendableTypeElement,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext)">
            <summary>
            Checks whether both items are from the same hierarchy
            (i.e., el1 extends/implements el2, or el2 extends/implements el1)
            </summary>
            <param name="el1">The first item</param>
            <param name="el2">The second item</param>
            <param name="jsResolveContext">Resolve context</param>
            <returns>Items are from the same hierarchy</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.GetTypeDefaultValue(JetBrains.ReSharper.Psi.JavaScript.Resolve.IJsResolvedType,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Provides default values for common types
            (to use as placeholders in e.g. generate)
            </summary>
            <param name="type"></param>
            <param name="context"></param>
            <param name="contextNode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.TypeScript.TsTypeUtil.IsDefinedInContextOfNode(JetBrains.ReSharper.Psi.JavaScript.DeclaredElements.TypeScript.ITsModuleMember,JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.JavaScript.Impl.Resolve.JsResolveContext,System.String@,System.String@)">
            <summary>
            Checks whether specified element is defined in context of specified node.
            Calculates qualifier and new name if needed (for example, if we locally have an alias for that element, name will differ actually)
            </summary>
            <param name="de">Declared element to check</param>
            <param name="contextNode">Context in which to check</param>
            <param name="context">Resolve context</param>
            <param name="qualifier">Qualifier for our element in our context</param>
            <param name="newName">New name for out element in our context (e.g., if it was aliased)</param>
            <returns>Whether it's possible to reference specified element in specified tree context</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForBinding(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleNameBinding)">
            <summary>
            Gets value node from initializer corresponding to binding element at left
            </summary>
            <param name="binding">Binding</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForPattern``2(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleItemPattern,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression)">
            <summary>
            Gets value node from an initializer/default value which corresponds to the specified binding/assignment pattern node
            </summary>
            <param name="singleItemPattern">Target binding / assignment pattern</param>
            <param name="valueExpression">Initializer or default value</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptExpressionUtil.GetValueNodeForPattern``2(JetBrains.ReSharper.Psi.JavaScript.Tree.ISingleItemPattern,JetBrains.ReSharper.Psi.JavaScript.Tree.IJavaScriptExpression,JetBrains.ReSharper.Psi.JavaScript.Tree.IDestructuringPattern)">
            <summary>
            Gets value node from an initializer/default value which corresponds to the specified binding/assignment pattern node
            </summary>
            <param name="singleItemPattern">Target binding / assignment pattern</param>
            <param name="valueExpression">Initializer or default value</param>
            <param name="fullPattern">Full pattern containing target binding</param>
            <returns>Value node, or null if nothing found</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.JavaScript.Util.JavaScriptReferenceUtil.TryResolveSmart(JetBrains.ReSharper.Psi.Resolve.IReference)">
            <summary>
            If reference is JS ReferenceExpressionReference resolves it via FullJavaScriptType
            </summary>
            <param name="reference">reference to resolve</param>
            <returns>resolve result</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Generate.RazorCSharpCodeGenerator.#ctor(JetBrains.ReSharper.Psi.ILanguageManager,JetBrains.Application.IApplicationHost,JetBrains.ReSharper.Psi.CSharp.Impl.CSharpDeclaredElementPresenter)">
            <remarks><see cref="T:JetBrains.ReSharper.Psi.ILanguageManager"/> is marker interface, to get dependencies initialized (psi language instances)</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.IRazorPsiServices.SplitCodebehindNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Splits comments and error elements attached to the end
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.IRazorPsiServices.GetOriginalAnchorAndType(JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Predicate{JetBrains.Util.Pair{JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Razor.Impl.CustomHandlers.OriginalStatementType}})">
            <summary>
            If original node not found (for synthetic or empty statements), iterate until it would be found.
            If first == true, iterate forward, otherwise, backward
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.CustomHandlers.RazorCSharpPsiServices.IsSpecialStatementDelimeter(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Detect code generated by <see cref="P:JetBrains.ReSharper.Psi.Razor.CSharp.Generate.RazorCSharpCodeGenerator.StatementEnd"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.CustomHandlers.RazorCSharpPsiServices.IsMethodWithRazorMarkup(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Does method can contain markup (Execute or helper)?
            </summary>
            <param name="declaration"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Impl.RazorCodeBehindGeneratedDocumentService">
            <summary>
            Generated document service for C# and VB languages of Razor page.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.Regenerator.CodeToRegenerate">
            <summary>
            C# statement, either escapable with @ (like @if) or with @{...}
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.CSharp.Impl.Regenerator.HtmlOutputToRegenerate">
            <summary>
            Either HTML or Razor implicit or explicit expression (like @aaa)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Parsing.RazorTreeBuilder">
            <summary>
            RazorTreeBuilder
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.RazorElementTypes.RazorModelDirectiveNodeType">
            <remarks>
            Applied only for MVC
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Model">
            <remarks>
            Only for ASP.NET MVC Razor
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Psi.Razor.RazorKeywords.Inject">
            <remarks>
            Only for ASP.NET MVC 6 Razor
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassPartialTemplateEnd">
             <summary>
               Looks up a localized string similar to     }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassPartialTemplateStart">
             <summary>
               Looks up a localized string similar to 
                {1}
                partial class {0} {{
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassTemplateEnd">
             <summary>
               Looks up a localized string similar to     }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ClassTemplateStart">
            <summary>
              Looks up a localized string similar to     
               {3}
               public partial class {0} : {1}{2} {{
                 [{4}] private static void {5}(object value) {{}}
                 [{4}] private static void {5}(System.Web.WebPages.HelperResult result) {{}}
                 [{4}] private static void {6}(System.IO.TextWriter writer, object content) {{}}
                 [{4}] private static void {6}(System.IO.TextWriter writer, System.Web.WebPages.HelperResult content) {{}}
                 [{4}] private static void {7}(object value) {{}}
                 [{4}] private static void {8}(System.IO.TextWriter wri [rest of string was truncated]&quot;;.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteAsyncStart">
            <summary>
              Looks up a localized string similar to [{1}] public override async Task ExecuteAsync() {{.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteEnd">
            <summary>
              Looks up a localized string similar to }}.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.ExecuteStart">
            <summary>
              Looks up a localized string similar to [{1}] public override void Execute() {{.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileHeader">
             <summary>
               Looks up a localized string similar to //------------------------------------------------------------------------------
             // &lt;auto-generated&gt;
             //     This code was generated by a tool.
             //     Generator: {0,-42}
             //     Runtime Version: {1,-23}
             //
             //     Changes to this file may cause incorrect behavior and will be lost if
             //     the code is regenerated.
             // &lt;/auto-generated&gt;
             //------------------------------------------------------------------------------
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileTemplateEnd">
             <summary>
               Looks up a localized string similar to }}
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.FileTemplateStart">
             <summary>
               Looks up a localized string similar to namespace {0} {{
            .
             </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.StaticExecuteStart">
            <summary>
              Looks up a localized string similar to [{0}, {1}] private void Execute() {{.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.WriteEnd">
            <summary>
              Looks up a localized string similar to );.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.src.Razor.CSharp.resources.Texts.WriteStart">
            <summary>
              Looks up a localized string similar to {0}({1}.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Razor.Impl.Generate.RazorCodeGeneratorProcessor.WriteHtml(JetBrains.ReSharper.Psi.Web.Generation.GenerationResults,System.Boolean)">
            <summary>
            Throw all cumulative html if any
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorBaseTypeDirective">
            <summary>
            Common interface for @inherits and @model directives
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorBlockMarkup">
            <summary>
            &lt;text&gt;..&lt;/text&gt; block (for HTML inside code blocks)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorHtmlMarkup">
            <summary>
            Special syntax for inserting HTML inside code blocks, such as &lt;text&gt;..&lt;/text&gt; or @:
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorLineMarkup">
            <summary>
            @: (for HTML line inside code block)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Razor.Tree.IRazorTagHelper">
            <summary>
            @addTagHelper, @removeTagHelper, @tagHelperPrefix
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.RebuildWebsite">
            <summary>
            Builds website async (sync in tests)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesDirectory">
            <summary>
            Directory, to which generated files are copied after build
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuilder.GeneratedFilesChanged">
            <summary>
            Signal is fired when new files are created
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.BeforeBuildStarted">
            <summary>
            Called before build started to perform clean-up of cached values
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is a source of some generated data (i.e. file for custom build provider)
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file produces content.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            Checks whether file in question is necessary to compile primary files.
            Called while collecting files.
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns>True if the file matches.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSignificantFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)">
            <summary>
            If the change in a file requires website to be rebuilt, the file is significant. 
            Normally, it returns <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsPrimaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/> or <see cref="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.IsSupplementaryFile(JetBrains.ProjectModel.IProjectFile,JetBrains.ReSharper.Psi.Web.Impl.BuildProviders.WebFolders)"/>
            </summary>
            <param name="file">File to be checked</param>
            <param name="folders">Cached frequently used folders. In the sake of performance only</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.OnBuildFinished(System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},System.Collections.Generic.Dictionary{JetBrains.Util.FileSystemPath,System.Int64},JetBrains.ReSharper.Psi.Web.BuildProviders.WebsiteBuildResult,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath,JetBrains.Util.FileSystemPath)">
            <summary>
            Called when build succeded to process content.
            </summary>
            <param name="primaryFiles">Primary files with their timestamps</param>
            <param name="supplementaryFiles">Supplementary files with their timestamps</param>
            <param name="buildResult">Build result</param>
            <param name="targetPath">Path of the website being built</param>
            <param name="outputPath">Path to compiled output</param>
            <param name="tempDirPath">Path to debug files produced while build</param>
            <returns>Map of generated files to be copied to a folder relative to root.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.Project">
            <summary>
            Project being built
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.BuildProviders.IWebsiteBuildRequestor.LogName">
            <summary>
            Logger string to identify build trace
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.IWebAppCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppPsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="!:IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.WebApp.WebAppModuleReferencer">
            <remarks>Temporary solution for RSRP-375600</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsiteCommonReferenceProviderFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsiteCommonReferenceProviderFactory"/> impls.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.WebsitePsiModuleHandlerHelperFactoryAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.ReSharper.Psi.Web.Impl.PsiModules.Website.IWebsitePsiModuleHandlerHelperFactory"/> impls.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetSourceFiles(System.String)">
            <summary>
            Returns project files, that may contain holders if tagPrefix declarations
            </summary>
            <param name="tagPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.TagPrefixes.TagPrefixCache.GetGlobalTagPrefixes(JetBrains.ProjectModel.IModule,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            Tagprefixes for a module, that are defined in framework's web.config or sharepoint's web.config
            </summary>
            <param name="module"></param>
            <param name="resolveContext"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Impl.WebConfig.PsiModules.Website.Modules.IWebConfigModule.GetCommonReferences">
            <summary>
            Common assembly references defined by current web.config and all above
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Psi.Web.WebConfig.Tree.IAddCodeSubDirectoryTag.DirectoryName">
            <summary>
            Relative to the \App_Code or staring with /
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil">
            <summary>
            Code behind (target language of asp generator) language util.
            Note: works with CS and VB but not with JS and other secondary languages.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindFileViaPsiFast(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind file via generated PSI
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindProjectFileLanguage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguageDefinedInFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Evaluates code-behind language by projectFile text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebFileWithCodeBehind)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.CodeBehindLanguageUtil.GetCodeBehindLanguage(JetBrains.ReSharper.Psi.Web.Tree.IWebTreeNode)">
            <summary>
            Evaluates code-behind language committed PSIs
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.ReferencedAssembliesServiceEx.IsProjectReferencingMvc(JetBrains.ProjectModel.IProjectElement,JetBrains.Metadata.Reader.API.TargetFrameworkId,System.Version@)">
            <summary>Is project referencing MVC assembly?</summary>
            <param name="projectElement"></param>
            <param name="targetFrameworkId"></param>
            <param name="version">Version of MVC, if referenced</param>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.ReferencedAssembliesServiceEx.IsProjectReferencingMvc3(JetBrains.ProjectModel.IProjectElement,JetBrains.Metadata.Reader.API.TargetFrameworkId)">
            <summary>
            Is project referencing MVC assembly version >= 3
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ReSharper.Psi.IPathDeclaredElement,JetBrains.ProjectModel.IProject)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.Util.WebPathReferenceUtil.GetVirtualPathInWebsite(JetBrains.ProjectModel.IProjectItem)">
            <returns>Relative virtual path relative to website root or FileSystemPath.Empty if fails</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHolders(JetBrains.ReSharper.Psi.Tree.IFile)">
            <summary>
            Finds all relevant tagPrefix/Name holder.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetRelevantHoldersBeforeFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all relevant tagPrefix/Name holder in all files except current.
            The latter items in the enumerable take precedence over the previous ones
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.Util.TagPrefixUtil.GetHoldersInFile(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.Util.FileSystemPath)">
            <summary>
            Finds all holder within file specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Psi.Web.WebConfig.WebExtensions.IsHtmlPage(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Is html or inherited page except ASP
            </summary>
            <param name="psiSourceFile"></param>
            <returns></returns>
        </member>
    </members>
</doc>
