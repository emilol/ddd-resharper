<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Feature.Services</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:StructuralSearchServicesThemedIcons+EditPattern}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(StructuralSearchServicesThemedIcons.EditPattern))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = StructuralSearchServicesThemedIcons.EditPattern.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(StructuralSearchServicesThemedIcons.EditPattern), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;StructuralSearchServicesThemedIcons.EditPattern&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern">
             <summary>
              <para>
                <para>Autogenerated identifier class for the EditPattern Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:StructuralSearchServicesThemedIcons+EditPattern}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(StructuralSearchServicesThemedIcons.EditPattern))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = StructuralSearchServicesThemedIcons.EditPattern.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;StructuralSearchServicesThemedIcons.EditPattern&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the EditPattern Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons.EditPattern"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.StructuralSearchServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:StructuralSearchServicesThemedIcons+EditPattern}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(StructuralSearchServicesThemedIcons.EditPattern))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = StructuralSearchServicesThemedIcons.EditPattern.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;StructuralSearchServicesThemedIcons.EditPattern&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Actions.ThrowManyExceptionsView">
            <summary>
            ThrowManyExceptionsView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Actions.ThrowManyExceptionsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Execute(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl)">
            <summary>
            Invoked when the user executes this bulb item.
            </summary>
            <param name="solution">The currently open solution.</param>
            <param name="textControl">The text control that is currently open</param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbAction.Text">
            <summary>
            The text rendered directly on the bulb item.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteBeforeProgressAndTransaction(JetBrains.ProjectModel.ISolution)">
            <summary>
            Called to prepare QuickFix or ContextAction execution.
            </summary>
            <param name="solution"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteBeforePsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.DocumentManagers.Transactions.IProjectModelTransactionCookie,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Called to prepare QuickFix or ContextAction execution.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecutePsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Executes QuickFix or ContextAction. Returns post-execute method.
            </summary>
            <returns>
            Action to execute after document and PSI transaction finish.
            Use to open TextControls, navigate caret, etc.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.ExecuteAfterPsiTransaction(JetBrains.ProjectModel.ISolution,JetBrains.DocumentManagers.Transactions.IProjectModelTransactionCookie,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
             Executes after PSI transaction under Project/Document transaction
            </summary>
            <returns>
             Action to execute after document and PSI transaction finish. Use to open TextControls, navigate caret, etc.
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.BulbActionBase.Text">
            <summary>
            Popup menu item text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesNavigationThemedIcons.FinalRec), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.FinalRec">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FinalRec Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.FinalRec.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.FinalRec.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FinalRec Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.FinalRec"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+FinalRec}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.FinalRec))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.FinalRec.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.FinalRec&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestBaseMethodCall Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestBaseMethodCall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestBaseMethodCall))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestBaseMethodCall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestBaseMethodCall Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestBaseMethodCall"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestBaseMethodCall}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestBaseMethodCall))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestBaseMethodCall.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestBaseMethodCall&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestInterfaceQualification Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInterfaceQualification}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInterfaceQualification))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInterfaceQualification&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestInterfaceQualification Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInterfaceQualification"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInterfaceQualification}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInterfaceQualification))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInterfaceQualification.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInterfaceQualification&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestInvocationUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInvocationUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInvocationUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInvocationUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestInvocationUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestInvocationUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestInvocationUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestInvocationUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestInvocationUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestInvocationUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestReadUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestReadUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestReadWriteUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestReadWriteUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestReadWriteUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestReadWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestReadWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestReadWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestReadWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UnitTestWriteUsage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UnitTestWriteUsage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UnitTestWriteUsage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UnitTestWriteUsage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UnitTestWriteUsage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UnitTestWriteUsage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UnitTestWriteUsage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageBase Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageBase}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageBase))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageBase.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageBase&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageBase Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageBase"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageBase}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageBase))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageBase.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageBase&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageInterface Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInterface}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInterface))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageInterface.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInterface&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageInterface Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageInterface"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageInterface}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageInterface))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageInterface.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageInterface&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsageTest Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTest))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageTest.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsageTest Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons.UsageTest"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesNavigationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesNavigationThemedIcons+UsageTest}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesNavigationThemedIcons.UsageTest))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesNavigationThemedIcons.UsageTest.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesNavigationThemedIcons.UsageTest&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem">
            <summary>
            Represents a lookup item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Match(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PrefixMatcher,JetBrains.TextControl.ITextControl)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            nameRange is a part of a corresponding document range, not a tree!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Placement">
            <summary>
            Determines how the item should be placed in code completion list.
            <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemPlacement"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.CanShrink">
            <summary>
            Determines whether the item can decrease its width
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Multiplier">
            <summary>
            Gets or sets the code completion multiplier used with this lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.Mode">
            <summary>
            Gets or sets evaluation mode used with this lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.IsDynamic">
            <summary>
            Indicates whether this item is dynamic and needs to be re-calculated on typing
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.IgnoreSoftOnSpace">
            <summary>
            Indicates whether this lookup item does not require soft lookup on space
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.ILookupItem.IsStable">
            <summary>
            Indicates whether given lookup item should not change its position in Lookup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBehavior.AcceptIfOnlyMatched(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemAcceptanceContext)">
            <summary>
            Gets flag indicating whether this item should be automatically completed if it is the only in a list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemBehavior.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Accepts the item at the specified range.
            nameRange is a part of a corresponding document range, not a tree!
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfo.Multiplier">
            <summary>
            Gets or sets the code completion multiplier used with this lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfo.EvaluationMode">
            <summary>
            Gets or sets evaluation mode used with this lookup item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemInfo.IsDynamic">
            <summary>
            Indicates whether this item is dynamic and needs to be re-calculated on typing
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher.Match(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.PrefixMatcher,JetBrains.TextControl.ITextControl)">
            <summary>
            Returns value indicating whether the item matches a given prefix
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemMatcher.IgnoreSoftOnSpace">
            <summary>
            Indicates whether this lookup item does not require soft lookup on space
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Shrink">
            <summary>
            Shrinks lookup item presentation
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Unshrink">
            <summary>
            Restores unshrinked lookup item presentation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.Image">
            <summary>
            Gets lookup item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.DisplayName">
            <summary>
            Gets lookup item display name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.DisplayTypeName">
            <summary>
            Gets type display name 
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.AspectLookupItems.BaseInfrastructure.ILookupItemPresentation.CanShrink">
            <summary>
            Determines whether the item can decrease its width
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IParameterInfoCandidatesProvider">
            <summary>
            Interface for providing parameter info contexts from lookup lists or other places
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.SpecificCodeCompletionContext.Language">
            Language for item provider for this context.
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Filters.IAggregateCompletionListFilter">
            <summary>
              Marker interface to distinguish aggregate filters
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.IDescriptionProvidingLookupItem">
            <summary>
            Interface for providing descriptions from lookup lists or other places
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase">
            <summary>
            Class for implementing advanced lookup items
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Shrink">
            <summary>
            Shrinks the name of the item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Unshrink">
            <summary>
            Cancels shrink of the name
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.Image">
            <summary>
            Gets item image
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItemBase.DisplayTypeName">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem">
            <summary>
            Declared element code completion context item
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem`2.CustomCaretOffset">
            <summary>
            Where to move caret after completion. Leave equal to -1 to allow default behavior.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.DeclaredElementLookupItem`2.Suffix">
            <summary>
            Suffix to playback. Is set only after completion.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.IKeywordLookupItem">
            <summary>
            Marker interface mainly for overriding of keywords by live templates.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TextLookupItem">
            <summary>
            Code completion result item which simply completes some text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeLookupItem">
            <summary>
            Lookup item for type
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.Impl.TypeNameCodeCompletionLookupItem">
            <summary>
            Code completion result item for type name completion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.LookupItems.LookupItemRelevance">
            <summary>
              Indicates lookup item relevance. First 16 bits and last 16 bits are reserved for general relevance properties,
            while 32 bit in the middle are reserved for language-specific relevance properties
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.Match.MatchingResult.AdjustedScore">
            <summary>
            Usually to equals to  <code>0 - (int)</code> <see cref="T:JetBrains.Text.MatcherScore"/> with some adjustements
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.AsyncLookupParameterInfoHandler">
            <summary>
            Parameter info handler for lookup lists
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider">
            <summary>
            Interface for creating parameter info handlers for different contexts
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.CreatePopupWindowContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a popup window context.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.Context">
            <summary>
            Gets the current context provided by the handler.
            </summary>
            <value>
            The current context or <c>null</c> if the context is not available and session 
            is finished.
            </value>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.ContextChanged">
            <summary>
            Event which is raised when context changes
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoProvider.HideFlags">
            <summary>
            Gets flags indicating when to close the window
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter">
            <summary>
            Paints code completion items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.IListItemPainter`1">
            <summary>
            Interface for painters used in conjunction with ListForm
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myItems">
            <summary>
            List of items
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myLeftAlign">
            <summary>
            The flag indicating whether to align types to the left
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myMaxNameWidth">
            <summary>
            Maximum left size width
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.myRenderParams">
            <summary>
            The lookup item text rendering aspect.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.ShrinkLookupListItemNameToWidth(JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem,System.Int32,System.Drawing.Graphics)">
            <summary>
            Shrinks name text to the given width.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.LeftAlign">
            <summary>
            Gets or sets the left align flag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemPainter.RenderParams">
            <summary>
            Gets the rendering aspect for the lookup list items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.CurrentItemBounds">
            <summary>
            Gets bounds of the current item, in client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.Bounds">
            <summary>
            Gets bounds of the window
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.ShowBefore">
            <summary>
            Event which is raised immediately before the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.ShowAfter">
            <summary>
            Event which is raised immediately after the lookup window is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowClose">
            <summary>
            Event which is raised before the lookup window closes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowHidden">
            <summary>
            Event which is raised before the lookup window is hidden
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.Scrolled">
            <summary>
            Event which is raised when lookup window is scrolled
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.ILookupWindow.WindowResized">
            <summary>
            Event which is raised when lookup window is resized
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LazyLookupItemPainter">
            <summary>
            Represents lazy item painter, which doesn't measure, shrink ALL items, 
            but do it for visible only. Side effect of this painter is MaxItemWidth occurs 
            to be determined during user operations, so it's required to track current 
            MaxItemWidth provided by this painter to accomadate realted UI.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.Lookup">
            <summary>
            Form which is used to display list of lookup items
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ILookup">
            <summary>
            Interface for creating lookup windows
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Solution">
            <summary>
            Solution the window is executed within
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.BeforeShownItemsUpdated">
            <summary>
            Event is raised before items list is shown
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.CurrentItemChanged">
            <summary>
            Event which is raised when the current item changes
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Closed">
            <summary>
            Raised when the window is closed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ILookup.Typing">
            <summary>
            Raised when typing happens
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase.myItemsByLocation">
            <summary>
            The complete list of lookup items sorted by name
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase.ItemCompleted">
            <summary>
            Raised when an item is completed
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.Lookup.CurrentItemChanged">
            <summary>
              Event which is raised when the current item changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect">
            <summary>
            Tracks dynamically the currently selected item bounds within the given lookup window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="lookup">Lookup window whose selection to track.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupItemAnchoringRect.Lookup">
            <summary>
            The owning lookup window.
            May be <c>Null</c> if already disposed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor">
            <summary>
            Interface for creating custom list items
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.RichText">
            <summary>
            The presentation rich text
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Tag">
            <summary>
            The custom tag
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.IListItemDescriptor.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myImage">
            <summary>
            The image
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myNameText">
            <summary>
            The rich presentation of name
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myTypeText">
            <summary>
            Rich presentation of the type
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.myItem">
            <summary>
            The associated context item
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.CancelShrink">
            <summary>
            Cancels all shrinks
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.Shrink">
            <summary>
            Shrinks the name a bit.
            </summary>
            <returns>Whether there was any shrinking. The <see cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupListItem.RichText"/> width must decrease if <c>True</c>.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupWindowManager">
            <summary>
            Manages currently shown lookup window
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.LookupWindowManager.IsExternalDocumentChangeAllowed">
            <summary>
            If this flag is set, any document change doesn't cancel code completion
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.VirtualLookupWindow.AutoActivate">
            <summary>
              Gets or sets whether the control should be activated initially when it's shown.
              The typical implementation for a form is to return a negative of this value from the
              <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.VirtualLookupWindow.Scrolled">
            <summary>
              Event which is raised when lookup window is scrolled
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.VirtualLookupWindow.CurrentItemBounds">
            <summary>
              Gets bounds of the current item
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.VirtualLookupWindow.BeforeShownItemsUpdated">
            <summary>
              Event is raised before items list is shown
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Lookup.VirtualLookupWindow.ShowWithoutActivation">
            <summary>
              Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            <returns>
              True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.ReparseContext.ContextType">
            <summary>
            TODO: this enum is C# specific. Move it to C#
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionsPageBaseView2">
            <summary>
            ContextActionsPageBaseView2
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionsPageBaseView2.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Descriptions.IDeclaredElementDescriptionProvider.GetElementDescription(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionStyle,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Psi.Modules.IPsiModule,JetBrains.Metadata.Reader.API.IModuleReferenceResolveContext)">
            <summary>
            This method should return description according to the style but excluding obsolete description, or null if there is no description for a given element.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ActionId">
            <summary>
            Id of an action that does the same as workflow. Used to present shortcut string and track activity
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ActionsMenu.IWorkflow`1.ShortActionId">
            <summary>
            Id of short action that overrides VS command. Used for presentation purposes only
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.View.GenerateWindowView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor">
            <summary>
            supposed to be SolutionFeaturePart component
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.Execute(System.Object,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            synchronously executes the drag n drop gesture
            </summary>
            <param name="droppedItem"></param>
            <param name="dropDestination"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.PresentableName">
            <summary>
            The presentable name in case multiple executors are available on the same targerts
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Gestures.IDragDropExecutor.Parameters">
            <summary>
            the format of the parameters which can be given to Execute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionTable.InstantiateAvailableActions(System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Collections.Generic.IDictionary{System.Type,JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider},JetBrains.Util.IUserDataHolder)">
            <summary>
             Cache some data using <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilder" /> in UI thread
             </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ExternalSource.IExternalSourcesProvider.NavigateToSources(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.Application.Progress.ITaskExecutor)">
            <summary>
            Tries to get source(s) for specified compiled element
            </summary>
            <returns>
            source file(s) related to specified compiled element,
            empty array if none (i.e. not applicable to this provider),
            null if the navigation was handled by provider
            </returns>
            <exception cref="T:JetBrains.Application.Progress.ProcessCancelledException">User cancelled the action</exception>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition">
            <summary>
            Represents macro function definition that can be used by Live Template's.
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroDefinitionAttribute"/> attribute
            to be automatically recognized by ReSharper.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.GetPlaceholder(JetBrains.DocumentModel.IDocument,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue})">
            <summary>
            <para>
            Placeholder value is inserted into the text on the very initial step of template expansion
            and is needed for proper template text reformatting when real values cannot be calculated yet.
            </para>
            <para>
            More precisely, the following steps are performed:
            <list type="bullet">
              <item>placeholder values for all template fields are inserted into the text</item>
              <item>the resulting text is reformatted</item>
              <item><see cref="!:GetLookupItems"/> is used to evaluate and insert values for all fields.</item>
            </list>
            </para>
            </summary>
            <param name="document"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroDefinition.Parameters">
            <summary>
            Gets array of parameter descriptions
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation">
            <summary>
            Represents macro function implementation
            Implementation of this interface should be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroImplementationAttribute"/> attribute
            to be automatically recognized by ReSharper.
            Instances of the macro implementation components are created per-session. The macro parameters, hotspot session and any required components can be injected into component's contructor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this macro
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items to show
            </summary>
            <returns>
            List of lookup items to show in order of preference.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates "quick result" for this macro.
            Unlike the result returned by <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroImplementation.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> method, 
            quick result is re-evaluated on each typing and so its implementation should be very quick.
            If the macro cannot provide any result that can be evaluated very quickly, it should return null.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchBase`2">
            <summary>
            Base context search engine based on SearchRequest
            </summary>
            <typeparam name="TSearchRequest">Request taken from the context search to be used by descriptor</typeparam>
            <typeparam name="TCandidate">Type of elemens, that context search operates</typeparam>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleRequestContextSearchBase`2">
            <summary>
            Base context search engine for multiple elements
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.MultipleRequestContextSearchBase`2.Promote(System.Collections.Generic.ICollection{`1})">
            <summary>
            Promote (change to some another) element before transferring to SearchRequest
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.Default">
            <summary>
            Candidates can be executed singly or together
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.MutuallyExclusive">
            <summary>
            Candidates are mutually exclusive, so there is no way to execute their together
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchCandidateType.ForceMultipleExecution">
            <summary>
            Candidates executes together
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.RequestContextSearchProvider`3">
            <summary>
            Base provider that works on context searches which are based on SearchRequest.  
            </summary>
            <typeparam name="TContextSearch">Language dependent part of feature</typeparam>
            <typeparam name="TSearchDescriptor">Descriptor to present the results</typeparam>
            <typeparam name="TSearchRequest">Request taken from the context search to be used by descriptor</typeparam>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuter">
            <summary>
            Engine for execute search requests via ISearchResultPresentor
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.SearchRequestExecuterBase">
            <summary>
            Engine for execute search requests
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.CustomNamingOptionsPageBase2.AddBaseLanguageElementKinds(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Naming.Elements.IElementKind},JetBrains.ReSharper.Psi.Naming.Elements.INamedElementsManager)">
            <summary>
              Adds additional element kinds in setting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.UI.View.CustomNamingOptionsPageView">
            <summary>
            CustomNamingOptionsPageView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.View.CustomNamingOptionsPageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.UI.View.PredefinedNamingSettingsPage">
            <summary>
            PredefinedNamingSettingsPage
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.View.PredefinedNamingSettingsPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.NamingImplZone">
            <summary>
            Active implementation of naming
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData">
            <summary>
            Data class containing navigation info required to navigate to an assembly
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData.Index">
            <summary>
            -1 if not initialized
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo.UseFocusedTextControlContent">
            <summary>
            Use focused text control to search usages of declared elements
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.IDeclarationSearch.GetDeclarationSearchRequest(JetBrains.ReSharper.Psi.IDeclaredElement,System.Func{System.Boolean})">
            <summary>
            Gets a searchDeclarationRequest to be executed.
            </summary>
            <returns>Search request to be executed (mostly in the Features layer). Null means that declarations search is incorrect for the indicated declared element</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.Title">
            <summary>
            Text will be shown in the context navigation menu ('Navigate from here...')
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.ActionId">
            <summary>
            Id associated with a specific action.
            null if there is no shortcut (action) for this provider
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ContextNavigation.Execution">
            <summary>
            an action(if there is one) to be invoked later
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ContextNavigation.ISpecialElementFinder.GetSearchTarget(JetBrains.ReSharper.Psi.Tree.IFile,System.Nullable{JetBrains.DocumentModel.DocumentRange},System.Nullable{System.Int32})">
            <summary>
            Get special finder's search targets
            </summary>
            <param name="file"></param>
            <param name="range">
              Range in document (selection or caret only). Can be null if invoked on project item
            </param>
            <param name="caretOffset">
              Caret position. Can be null if invoked on project item
            </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.DeclaredElementNavigationService.Navigate(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean,System.Nullable{JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions},JetBrains.IDE.TabOptions)">
            <summary>
            Navigates to declared element using providers applicable for the given declared element.
            </summary>
            <param name="declaredElement"></param>
            <param name="windowContext"></param>
            <param name="transferFocus"></param>
            <param name="options">presentation options to be used when displaying disambig</param>
            <param name="tabOptions"> </param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.DefaultDeclaredElementNavigator">
            <summary>
            Provides declared element's navigation using context searches
            <c>JetBrains.ReSharper.Feature.Services.ContextNavigation.ContextSearches.IDeclarationSearch</c>.
            Context Searches are language specific feature part components, mostly working on finder
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.IDeclaredElementNavigator">
            <summary>
            Extends declared element navigation using applicable components
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.IRelatedFilesProvider.GetRelatedFiles(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Get all related files to specified file.
            </summary>
            <param name="projectFile"></param>
            <returns>Enumeration of tuples of related project file, it's relation type to requested file, and parent file.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.OccurenceBrowserDescriptor.SetResults(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurences.IOccurence},JetBrains.Application.Progress.IProgressIndicator,System.Boolean)">
            <summary>
            Sets occurences to model.
            </summary>
            <param name="items"></param>
            <param name="indicator"></param>
            <param name="mergeKinds">use merging for defferent occurence kinds</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Descriptors.SearchDescriptor.GetDescriptorFactory">
            <summary>
            this method is necessary to restore descriptor from the history list
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.ItemsPassFilter">
            <summary>
            A filter that specifies which items should be let into the output list.
            NOTE: in most cases, you should use <see cref="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.RestrictItemsPassFilter(System.Func{JetBrains.ReSharper.Psi.IDeclaredElement,System.Boolean})"/>, so that to avoid interfering with the internal filtering.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.ConsumePresentableItems(System.String,System.Int32,System.Action{System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior})">
            <summary>
            Gets top scored items which match the input string. Uses <see cref="!:JetBrains.ReSharper.Features.Navigation.Core.Navigation.Goto.IOccurenceNavigationProvider"/>s for obtaining matched occurences.
            Uses <see cref="!:JetBrains.ReSharper.Features.Navigation.Core.Navigation.Goto.ChainedProviders.IChainedSearchProvider"/> to perform combo search (if enabled) 
            </summary>
            <param name="filterString">input string</param>
            <param name="itemsCount">number of top scored items to present. -1 means no limit</param>
            <param name="itemsConsumer"> consume pairs to be presented in a jetpopup menu or dropped in a tool window</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.GetOccurencesOutOfMatchingInfos(System.Func{JetBrains.ReSharper.Feature.Services.Occurences.IOccurence,System.Boolean},System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.FullNavigationItemData},System.Func{System.Boolean})">
            <summary>
            Get occurences out of primary providers. Used for common(non-chained) search.
            </summary>
            <param name="filter"></param>
            <param name="count">-1 means no limit</param>
            <param name="isSearchingInLibs"></param>
            <param name="pairsToDescribe"></param>
            <param name="checkCancelled"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.RestrictItemsPassFilterForOccurence(System.Func{JetBrains.ReSharper.Feature.Services.Occurences.IOccurence,System.Boolean})">
            <summary>
            ANDs the given condition with the existing <see cref="F:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.ItemsPassFilter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.UI.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the secondary thread.
            </summary>
            <param name="filterString">The filtering string against which the items list should be produced.</param>
            <param name="itemsConsumer">A function you can use to add items to the output collection in a thread-safe manner. The function checks for the items limit and returns whether more items can be added.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.ExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,JetBrains.DataFlow.ISignal{System.Boolean})">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoControllerBase`3.LibrariesFlagAutoSwitch">
            <summary>
            Gets or sets whether when a solution-only search fails a solution-and-libraries search is performed automatically.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurenceNavigationProvider.FindMatchingInfos(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,System.Func{System.Boolean})">
            <summary>
            Finds matched items and returns a corresponing list of matchingInfos.
            Controller (or some other entity that will use this provider) recieves these items, scores them, sorts 
            and than invoke GetOccurences for the top scored of them.
            </summary>
            <param name="matcher">matcher to use</param>
            <param name="scope">defines a scope to search in</param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IOccurenceNavigationProvider.GetOccurencesByMatchingInfo(JetBrains.UI.Utils.MatchingInfo,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,System.Func{System.Boolean})">
            <summar> Gets occurences by given matchingInfo </summar>
            <param name="navigationInfo"></param>
            <param name="scope"></param>
            <param name="gotoContext"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IGotoEverythingProvider.ItemsPriorityFunc">
            <summary>
            The lower is result int -> the higher is the priority
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilterFactory">
            <summary>
            should be marked with SolutionFeaturePart attribute
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilterFactory.IsApplicable(JetBrains.ReSharper.Feature.Services.Navigation.CallingFeatureContext)">
            <summary>
            should be called for filtering
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.INavigationFilter.FilterOut(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurences.IOccurence},JetBrains.ReSharper.Feature.Services.Occurences.IOccurence)">
            <returns>true it occurence should be removed, false - if passed</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult">
            <summary>
            Represents async result as collection of IOccurence
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult.Results">
            <summary>
            Live collection of results
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchResult.Lifetime">
            <summary>
            Lifetime that lives during search
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiEntry.DeclaredElement">
            <summary>
            Declared Element provides an API
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiEntry.Type">
            <summary>
            Target type
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.IExposingApiParameterEntry.ParameterIndex">
            <summary>
            Parameter number in parameter list
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ExposingApies.ExposingApiesTypeUtil.IsImplicitlyConvertibleTypes(JetBrains.ReSharper.Psi.IType,JetBrains.ReSharper.Psi.IType,JetBrains.ReSharper.Psi.ITypeConversionRule)">
            <summary>
            Test implicitly convertation from targetType to sourceType
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.DeclaredElementOccurence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceEqualityComparer"/>
            </remarks>&gt;
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController">
            <summary>
            Controls the <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/> for various <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based items.
            See the <c>Createâ€¦</c> methods for individual model types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,System.String,JetBrains.Application.IShellLocks,System.Boolean)">
            <summary>
            Inits the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="solution">Base ctor param.</param>
            <param name="librariesFlag">Base ctor param.</param>
            <param name="sDeclaredElementKindDisplayName"><c>"namespace"</c> or <c>"type"</c> or whatever human-readable declared element kind string.</param>
            <param name="locks"></param>
            <param name="enableMulticore"> </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.CreateGotoNamespaceController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks)">
            <summary>
            Controller of the <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/> for namespaces.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.CreateGotoTypeController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks)">
            <summary>
            Controller of the <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoTypeController.CreateGotoTypeModel(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks)">
            <summary>
            <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.GotoEverythingController.CreateGotoEverythingController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks,JetBrains.UI.GotoByName.GotoByNameModel)">
            <summary>
            Controller of the <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/> for types (classes, structs, etc).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.CalculateChainedScore(System.Collections.Generic.List{System.String},JetBrains.UI.Utils.MatchingInfo)">
            <summary> Calculate score for MatchingInfo </summary>
             <remarks> 
             W(x) = C0*x0 + C1*x1 + ... + Ci*xi, where C0 > C1 > ... > Ci
             Words.Count should correspond with matchingInfo references depth
             </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.CompareMatchingInfo(System.Int32,System.Int32,JetBrains.UI.Utils.MatchingInfo,JetBrains.UI.Utils.MatchingInfo,JetBrains.Application.SeldomInterruptCheckerWithCheckTime)">
            <summary>
            Compare two MatchingInfos by score, identifier and distance to identifier 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.ChainedScopesUtil.WordWeight(System.Int32)">
            <summary>
            Word's weight function
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope">
            <summary>
            Thread-safe scope to be used by providers
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext">
            <summary>
            Container for provider-specific data
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.MergeOccurences(JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem,System.Collections.Generic.IEnumerable{System.Func{JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem,JetBrains.ReSharper.Feature.Services.Navigation.Goto.Controllers.PresentableGotoItem}})">
            <returns>Item to be removed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.GetInstantAndCommonItemsMergeRules">
            <summary>
            the func's returned item will be removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoMerger.GetAllItemsMergeRules">
            <summary>
            the func's returned item will be removed
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ChainedProviders.IChainedSearchProvider.GetNextChainedScopes(JetBrains.ReSharper.Feature.Services.Navigation.Goto.Misc.GotoContext,JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,System.Func{System.Boolean})">
            <summary>
            Provides next step chained scopes
            </summary>
            <param name="gotoContext"></param>
            <param name="matcher"></param>
            <param name="containingScope"></param>
            <param name="checkForInterrupt"> </param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.IChainedOccurencesProvider.FindOccurences(JetBrains.Text.IdentifierMatcher,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.INavigationScope,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,System.Func{System.Boolean})">
            <summary>
            Implement this method if your provider can work as a secondary provider in a chained search.
            PERFORMANCE SENSITIVE!
            </summary>
            <param name="matcher"></param>
            <param name="scope"></param>
            <param name="includeLibraries"></param>
            <param name="checkCancelled"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.IProjectModelElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to the project item using all applicable providers
            </summary>
            <param name="projectModelElement"></param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToVsSolutionExplorer(JetBrains.ProjectModel.IProjectItem,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <summary>
            Navigates to solution explorer using given project item
            </summary>
            <param name="projectItem"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> navigates to a compiled element. To navigate inside compiled members bodies use an overload with compiledElementNavigationInfo data class</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToExternalSources(JetBrains.ReSharper.Feature.Services.Navigation.CompiledElementNavigationInfo,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElementNavigationInfo"> data class with CompiledElement (scope) to search in and a target to be searched in this scope</param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.NavigateToVsObjectBrowser(JetBrains.ReSharper.Psi.ICompiledElement,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="compiledElement"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ReSharper.Feature.Services.Navigation.AssemblyInfoNavigationData,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean)">
            <param name="assemblyInfoNavigationData"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.NavigationExtensions.CommonElementsNavigationExtensions.Navigate(JetBrains.ProjectModel.ProjectFileTextRange,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Boolean,JetBrains.IDE.TabOptions)">
            <param name="projectFileTextRange"> </param>
            <param name="source">popup window context to determine where to place a disambig window if needed</param>
            <param name="transferFocus">activate if true - highlight otherwise</param>
            <param name="tabOptions"></param>
            <returns>True if the navigation was succesfull. Always true if there were obtained more than one navigation point</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.ProjectFileNavigationPoint">
            <summary>
            Project file's navigation point without cursor positioning
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.ExtensionMethodsRedundantImport">
            <summary>
            weak usage. If the corresponding namespace import will be removed, 
            removing find result's referenced psiModules won't break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.RedundantNamespaceImport">
            <summary>
            weak usage. <see cref="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.GetRedundantImportsToRemove``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IModule},JetBrains.ProjectModel.IProject,System.Collections.Generic.IEqualityComparer{JetBrains.ProjectModel.IModule})"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.DirectUsage">
            <summary>
            strong, direct usage.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.RelatedUsage">
            <summary>
            strong, compiler related usage. Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeKind.ExtensionMethodStrongCall">
            <summary>
            strong, compiler related usage concerned with calling extension methods and importing namespaces. 
            Removing corresponding referenced psiModules will break compilation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.ReferenceOccurence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceEqualityComparer"/>
            </remarks>&gt;
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.RangeOccurence">
            <remarks>
            DO NOT implement GetHashCode and Equals here, because an hashcode for this occurence can changes
            Use <see cref="T:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceEqualityComparer"/>
            </remarks>&gt;
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.IOccurenceProvider.MakeOccurence(JetBrains.ReSharper.Psi.Search.FindResult)">
            <summary>
            Makes occurence from find result. Return null if find result is incompatible with provider
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeSearcher.GetRelatedElements(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Resolve.IReference)">
            <summary>
            Gets related type elements associated with a given declared element. 
            'Related' are those type elements which psiModules should be refernced as well as the module of <paramref name="declaredElement"/>.
            </summary>
            <param name="declaredElement"></param>
            <param name="reference">some rules need a reference to get invocation context</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.RemoveProjectToModuleReferences(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProjectToModuleReference},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected projectToModule references under the transaction with progress indicator. 
            Assuming that the list does not contain implicitly referenced psiModules.
            </summary>
            <param name="listToRemove"></param>
            <param name="progressIndicator"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeService.RemoveRedundantUsages(System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Removes selected references with an indicated progress indicator. Needs to be executed under transaction.
            </summary>
            <param name="references"></param>
            <param name="progress"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.ReferencedCodeUtil.GetForwardedAssemblyReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Modules.IPsiModule},JetBrains.ProjectModel.IProject)">
            <summary>
            Gets additional project references caused by forwarding.
            </summary>
            <param name="targetPsiModules"></param>
            <param name="project"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.ReferencedCode.SkippedTypes.IsSkippedType(JetBrains.Metadata.Reader.API.IClrTypeName)">
            <summary>
            Returns if the target clrTypeName should be skipped for ReferencedCodeSearcher
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.Requests.IAsyncSearchRequest">
            <summary>
            Represents an async search request, that can be run without blocking UI and user typing
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.DeclaredElementSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.DeclaredElementSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.DeclaredElementSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.FlagsSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.FlagsSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.SearchDialogs.FlagsSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.TextNavigationPoint">
            <summary>
            Project file's navigation point with cursor positioning
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKind.Other">
            <summary>
            default occurence kind
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceEqualityComparer">
            <summary>
            EqualityComparer for IOccurences
            DO NOT use this comparer for long-live collections, because an hashcode for some IOccurence can changes
            Therefore logic for calculate hashcode and equality store here, separate from RangeOccurence, ReferenceOccurence and DeclaredElementOccurence
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceInformation.IOccurenceInformationProvider">
            <summary>
            should be SolutionFeaturePart component
            OccurenceInformationManager does not support smart inheritance filtering for this interface!
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceInformation.OccurenceExtensions.TryGetProject(JetBrains.ReSharper.Feature.Services.Occurences.IOccurence)">
            <summary>
            firstly ignores all envoys logic, trying to be as fast as possible
            if it didn't work out, uses envoys then
            </summary>
            <param name="occurence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindManager.GetOccurenceKinds(JetBrains.ReSharper.Feature.Services.Occurences.IOccurence)">
            <summary>
            gets kinds for a specific occurence
            </summary>
            <param name="occurence"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurenceKindManager.GetAllOccurenceKinds">
            <summary>
            gets the set of all possible kinds from all providers
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurencePopupMenu.ShowMenuFromTextControl``1(JetBrains.Application.DataContext.IDataContext,System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Occurences.IOccurence},System.Func{``0},System.Nullable{JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions},System.Boolean,System.String,System.Int32,System.Func{JetBrains.Util.Pair{System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.ITypeElement},JetBrains.ReSharper.Feature.Services.Diagrams.TypeDependenciesOptions}})">
            <summary>
            shows a context popup menu filled with menu items. Each menu item presents corresponding occurence.
            </summary>
            <param name="context"></param>
            <param name="items"></param>
            <param name="descriptorBuilder"></param>
            <param name="options"></param>
            <param name="skipMenuIfSingleEnabled"></param>
            <param name="title"></param>
            <param name="itemsCountLimit"></param>
            <param name="showOnDiagram"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationManager.MergePresentationOptions(JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions,JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions)">
            <summary>
            Merges two specific occurence and feature options into single one. 
            If any of feature option field is not default - use this feature's option field.
            </summary>
            <param name="occurenceSpecificOptions">occurence's options (might be initialized while constructing an occurence)</param>
            <param name="featureOptions">presentation options provided by feature</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedPME">
            <summary>
            Display containing Project Model Element
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Occurences.TextDisplayStyle.ChainedCME">
            <summary>
            Dispaly containing Code Model Element
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageView">
            <summary>
            CodeStylePageView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePreviewView">
            <summary>
            CodeStylePreviewView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.CodeStylePreviewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.ViewModels.CodeFormatterPreview.FixupSettingsForPreview(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Modify code style settings for the preview
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleBooleanValueEditorView">
            <summary>
            CodeStyleBooleanValueEditorView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleBooleanValueEditorView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleEnumValueEditorView">
            <summary>
            CodeStyleEnumValueEditorView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleEnumValueEditorView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleFlaggedEnumValueEditorView">
            <summary>
            CodeStyleFlaggedEnumValueEditorView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleFlaggedEnumValueEditorView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleNumericValueEditorView">
            <summary>
            CodeStyleNumericValueEditorView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleNumericValueEditorView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleSimpleStringValueEditorView">
            <summary>
            CodeStyleSimpleStringValueEditorView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.OptionPages.CodeStyle.Views.CodeStyleSimpleStringValueEditorView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.XmlDocPage">
            <summary>
            Root options page for the XML Doc language options.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.Delay">
            <summary>
            Handling of arrows while popu is shown
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.mySolution">
            <summary>
            The solution in which we are
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myTextControl">
            <summary>
            The editor to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myContext">
            <summary>
            The current context
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myAlarm">
            <summary>
            The alarm to use
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myLBoundRangeMarker">
            <summary>
            Marker to the left bound
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.myIsShownOnTop">
            <summary>
            True if parameter info is shown on top
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.CanCreateContextFast(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.IDocument,JetBrains.ReSharper.Psi.ILanguageManager)">
            <summary>
            Quick check whether parameter info have chance to pop up in current context.
            Needed to fallback to Visual Studio's one.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.Context">
            <summary>Gets the context</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.TextControl">
            <summary>Gets the editor</summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.ParameterInfo.EditorParameterInfoHandler.ContextChanged">
            <summary>
            Event which is fired when context changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.InvocableControl">
            <summary>
            Once a control, nowadays it's only a renderer for a single signature from the <see cref="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoControl"/> form.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoHandlerFactory">
            <summary>
            A factory for instantiating parameter info handlers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoHandlerFactory.IsAvailableFast(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Quick check whether parameter info have chance to pop up in current context.
            Needed to fallback to Visual Studio's one
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoAction">
            <summary>
            Action for showing parameter info in method calls (IDEA's Ctrl+P feature).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoControlBase.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoControlBase.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoControlBase.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.UI.PopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions,System.Boolean)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Presentation.DeclaredElementMenuItemFormatter.Format(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.UI.PopupMenu.IMenuItemDescriptor,JetBrains.ReSharper.Feature.Services.Occurences.OccurencePresentationOptions,System.Boolean,JetBrains.ReSharper.Psi.DeclaredElementPresenterMarking@)">
            <summary>
            Formats a declared element into a menu item descriptor, suitable for the GotoByName-style lists.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView">
            <summary>
            Implements the view that displays a QuickDoc extract from the XmlDoc help on the given declared element.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.HeaderHeight">
            <summary>
            QuickDock window header height
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.OptionWidthOnScreenFactor">
            <summary>
            Fraction of the screen width that can be occupied, at most, by the window when auto-sizing to fit the content horizontally.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.BorderSize">
            <summary>
            Border size, or padding of the Web browser control within the outer form bounds.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.BrowserMinSize">
            <summary>
            Minimum size of the Web browser control, as it wouldn't behave well when size is too small.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.MinLength">
            <summary>
            Minimum recommended length of the window against the corresponding dimensions. Restores after new content is loaded into the window; temporarily may be scaled down below this value.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.myQDControl">
            <summary>
            The Web browser control than renders the content.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.myAutoSizeToFit">
            <summary>
            <see cref="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.AutoSizeToFit"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.myDesiredSize">
            <summary>
            The size of the form that's recommended so that the browser content fit into the form.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.mySizeBarHitTestResults">
            <summary>
            A lazy-init collection of the hit test results that identify the size bars.
            Use <see cref="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.SizeBarHitTestResults"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.HitTest(System.Drawing.Point)">
            <summary>
            Hit-tests the window areas and returns the result. <see cref="F:JetBrains.Interop.WinApi.Constants.HitTestResult.HTTRANSPARENT"/> means the result is unspecified (eg, normal client area or outside the window).
            </summary>
            <param name="ptHitClient">The hit point, in client coordinates.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.InitControls(JetBrains.DataFlow.Lifetime)">
            <summary>
            Inits the instance UI.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.QuickDocViewWidth">
            <summary>
            Gets or sets the QuickDocView custom width global setting.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.AutoSizeToFit">
            <summary>
            Gets or sets whether the control should accomodate its size to fit the content when navigating to another documentation.
            This mode is turned off for the current instance after the user resizes its manually.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.SizeBarHitTestResults">
            <summary>
            Gets the collection of the hit test results that identify the size bars.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl">
            <summary>
            Displays QuickDoc
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.myBrowser">
            <summary>
            The Web browser control than renders the content.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.GetPrefferedWidth">
            <summary>
            Performs layout calculations to eliminate scrolling.
            </summary>
            <returns>Width of control without line breaks and horizontal scrolling</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.GetPrefferedHeight(System.Int32)">
            <summary>
            Performs layout calculations to eliminate scrolling
            </summary>
            <param name="desiredWidth">Desired control width</param>
            <returns>Height of control without vertical scrolling</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocControl.DocumentText">
            <summary>
            Text displaying in control. Can be used for hacks
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController">
            <summary>
            Controller for QuickDocControl. Performs navigation, tracks history. It <b>MUST</b> be explicitly disposed. 
            Control can be disposed instead of controller.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.#ctor(JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.ReSharper.Feature.Services.QuickDoc.QuickDocManager)">
            <summary>
            Creates controller
            </summary>
            <param name="solution">Solution</param>
            <param name="language">Default language to render</param>
            <param name="quickDocManager"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.OpenInEditor">
            <summary>
            Opens current item in VS editor
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.UpdateContent">
            <summary>
            Updates the entry of control
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.ContentUpdated">
            <summary>
            Raised when control content is updated
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.KeyPressed">
            <summary>
            Raised when key is pressed. Currenly only Escape passed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.QuickDoc.StandAlone.QuickDocController.DefaultLanguage">
            <summary>
            Default language for view
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction">
            <summary>
            A bulb action that appears in popup window. It <strong>never</strong> appears in a bulb menu.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupKey">
            <summary>
            This key used for popup suppressing if user pressed 'Esc' key
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.PopupAnchorings">
            <summary>
            Uses <see cref="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom"/> by default.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Bulbs.IPopupBulbAction.Items">
            <summary>
            An array of bulb items that this bulb action supports.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess">
            <summary>
            Represents analysis for one source file. Consists of several <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess"/> - one for each <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.IsRangeInvalidated(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Can be used by stage process to understand do we need to start/continue analysis.
            Have no default implementation. For visible documents based on <see cref="!:DaemonImpl.Invalidate"/>
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetStageProcess``1">
            <summary>
            Get one of stage processes with given exact matched type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetStageProcesses``1">
            <summary>
            Get all stage processes with given exact matched type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.GetCompletedStageProcesses">
            <summary>
            Get already completed (during this process) stage processed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.CreateFibers">
            <summary>
            Create fibers for multi-process thread execution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.VisibleRange">
            <summary>
            Area of document that must be analyzed first (before invisible parts) to provide highlighting results to user faster.
            For <see cref="!:VisibleDocumentDaemonProcess"/> it is current <see cref="P:JetBrains.TextControl.ITextControlScrolling.ViewportRange"/> of code editor.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.InterruptFlag">
            <summary>
            Signals that current daemon process (and relevant daemon stage process) must be interrupted. Process (and stage process) must verify this flag periodically
            and throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> if it is true.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.CustomData">
            <summary>
            This property is used to pass custom specific data to daemon stages (such as exclude some analysis in test cases).
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.FullRehighlightingRequired">
            <summary>
            Can be used by stage process to understand do we need to start/continue analysis.
            Have no default implementation.  For visible documents based on <see cref="!:DaemonImpl.DaemonTimestamp"/> and sometimes previous <see cref="!:Daemon.Invalidate"/> call.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessBase.LastRunTimestamp">
            <summary>
            Aggregated timestamp of <see cref="T:JetBrains.ReSharper.Psi.IPsiSourceFile"/> for which daemon was completed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage">
            <summary>Represents custom UI page of refactoring workflow.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Commit(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Commits page.</summary>
            <returns>Next page if any.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Initialize(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Initializes page. Called before each show of the page which is caused by "Continue" button.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.RefreshContents(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Refreshes internal page pointers. Returns <c>false</c> if refresh
            is unsuccessfull and refactoring should be canceled.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.ContinueEnabled">
            <summary>
            Gets flag indicating whether the Continue button is enabled.
            This is ANDed with parent statuses, that include {not running workflow execution} and {validation passes}.
            This means that you don't have to check the validator. If it's the only thing you can think of â€” just return <c>True</c>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Description">
            <summary>Gets page description.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.Title">
            <summary>Gets page title.</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.View">
            <summary>Gets the page view that is inserted into the refactoring view.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.UI.IUsagesProvider">
            <summary>
            Provides usages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.DeclaredElementsSerializer.SerializeDeclaredElement(JetBrains.ReSharper.Psi.IClrDeclaredElement)">
            <summary>The format is: declared element's psi module persistent id  + '/' + XMLDocId</summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.DeclaredElementsSerializer.DeserializeDeclaredElement(JetBrains.ProjectModel.ISolution,System.String)">
            <param name="solution"></param>
            <param name="part">The format is: declared element's psi module persistent id  + '/' + XMLDocId</param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StackTraces.ExceptionVisualizerInstaller">
            <summary>
            Makes the <c>ExceptionVisualizer</c> DLL class deploy to Visual Studio on install.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StackTraces.ExceptionVisualizerInstaller.JetBrains#Application#Install#IStaticInstaller#InstallStatic(JetBrains.Application.Install.Installer)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StackTraces.StackTraceViewAvalonControl.Text">
            <summary>
            Gets or sets stack trace raw text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.OrPatternMatcher">
            <summary>
            different from <see cref="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.OrMatcher"/> that it could match pattern with placeholder using MatchingContext.CheckAllVariants
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher.Words">
            <summary>
            For WordIndex lookup. Only words specific for this element, not for children or siblings.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.Settings.RecentSearchSettings">
            <summary>
            Index is a timestamp in format yyyyMMddHHmmssffff
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.SectionsManagement.IOccurenceSectionProvider.GetTreeSections(JetBrains.ReSharper.Feature.Services.Tree.OccurenceBrowserDescriptor)">
            <summary>
            Update descriptor's sections (sorting, titling, adding new sections) and return them.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.AsyncTreeBrowser.TreeAsyncModel">
            <summary>
            Describes model which is built on demand
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf">
            <summary>
            An edit-like control for placing on the dialog boxes that picks a type name from a tree or completion list.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CommitCompletionListInputString">
            <summary>
            Immediately commits the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.Text"/> to the completion lists's model.
            Wired to the deferred binding when the completion list menu is lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListExecuteSelectedItem">
            <summary>
            Exec sel menu item, if any.
            Returns exec success flag (<see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteSelectedItem"/>).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListSelectNextItem">
            <summary>
            Selects the next item in the completion drop-down list, eg when up/down arrows are used in the edit box.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.IsCompletionListVisible">
            <summary>
            Gets whether we've ruled out that the completion list should be visible at the moment.
            This means <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowMode"/> is <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.Show"/> and the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.CompletionModel"/>'s <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/> are not empty (and the model exists, in the first place).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.myEvtUpdateTextBeforeCaret">
            <summary>
            As we can't (so it seems) get the event of caret movement in the edit box, we'd udpate it every so often. Probably the caret position can't change without a Windows message on the control, so we'd apply the change after each message, with a small delay needed just to group multiple consequent messages together.
            GEvent is better than BeginInvoke because the latter adds to the messages itself and cannot guarantee all fo the dependent messages go thru before it executes.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CaretPosition">
            <summary>
            Gives out the current caret position in the edit box, or the selection start position.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowMode">
            <summary>
            Whether the completion list is allowed to be shown at the moment. Other filters could apply (eg will not be actually visible if there are no items).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.Settings">
            <summary>
            Gets or sets the settings that define the behavior of the picker, like what it picks and which functionality is available.
            Can be set only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.Text">
            <summary>
            Gets or sets the text of the editbox the user is typing.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.TextBeforeCaret">
            <summary>
            Gets or sets the text of the editbox the user is typing, up to the current caret position or the selection start. Could be used as the completion prefix.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.ExecuteCompletionListItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            If menu is shown, selects the given item and applies its text.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListHide(JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModeTransition)">
            <summary>
            Hides the completion list, either the soft or the hard way.
            Modifies <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowMode"/> based on its present value and the <paramref name="flag"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShow(JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModeTransition)">
            <summary>
            Shows the completion list, either the soft or the hard way.
            Modifies <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowMode"/> based on its present value and the <paramref name="flag"/>.
            Eg a soft-show won't actually show if currently in <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.HideHard"/> mode.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.Init_CompletionList_LazyCreate(System.IDisposable,JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.Application.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext,JetBrains.UI.PopupWindowManager.PopupWindowManager,JetBrains.UI.Theming.ITheming)">
            <summary>
            Implements menu lazy-creation. Does nothing if already created.
            </summary>
            <param name="disLazyCreate">Disconnects from lazy creation, making sure it actually runs only once.</param>
            <param name="tooltipman"> </param>
            <param name="mainWindow"> </param>
            <param name="windowsHookManager"> </param>
            <param name="mainWindowPopupWindowContext"> </param>
            <param name="popupWindowManager"> </param>
            <param name="theming"> </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.OnCompletionOrPickerTextApplied">
            <summary>
            Called after:
            â€¢ User executes an item in the completion list and some new text is applied to the editbox.
            â€¢ User executes an item in the picker tree drop-down and some text is applied to the editbox.
            Normally, selects the new text and sets focus to the editbox.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModeTransition">
            <summary>
            Flag for transitioning between <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModeTransition.Soft">
            <summary>
            Switches softly, cannot break <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.HideHard"/>. This is for handling implicit activities.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModeTransition.Hard">
            <summary>
            Switches forcibly, always transitions to the desired state. Must be done on explicit user actions only.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes">
            <summary>
            Whether the completion list is allowed to be shown at the moment. Other filters could apply (eg will not be actually visible if there are no items).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.Show">
            <summary>
            The completion list could be visible if other factors (like items>0) are met.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.HideSoft">
            <summary>
            The completion list has been hidden indeliberately, and should transition to <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.Show"/> when there's an excuse.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEditWpf.CompletionListShowModes.HideHard">
            <summary>
            The completion list has been focibly hidden. Should not show again unless explicitly requested by the user.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.GetTargetPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"x86", "x64", "msil"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.GetPlatformShortName(JetBrains.Application.platforms.PlatformID)">
            <example>".Net Framework v4.0 Client"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameAndVersion(JetBrains.Metadata.Utils.AssemblyNameInfo)">
            <example>"Assembly, 1.2.3.4"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameAndVersion(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"Assembly, 1.2.3.4"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentVersionAndPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"1.2.3.4, x86, .Net Framework v4.5"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameVersionPlatform(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile)">
            <example>"Assembly, 1.2.3.4, x86, .Net Framework v4.5"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentVersionPlatformGac(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile,JetBrains.Application.platforms.PlatformManager)">
            <example>"2.0.0.0, x86, .Net Framework v2.0, GAC"</example>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.AssemblyVersionUtil.PresentNameVersionPlatformGac(JetBrains.ProjectModel.Model2.Assemblies.Interfaces.IAssemblyFile,JetBrains.Application.platforms.PlatformManager)">
            <example>"System.Web, 2.0.0.0, x86, .Net Framework v2.0, GAC"</example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil.MultiplyDeclaredElementExecutor">
            <summary>
            
            </summary>
            <param name="context">DataContext initially passed to action</param>
            <param name="declaredElements">Candidates for navigation</param>
            <param name="initialTargers"> </param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementInstanceToDataMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.DeclaredElementInstancePointerMap`2">
            <summary>
            IDeclaredElementInstance to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IDeclaredElementToDataMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ElementPointerMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ElementEnvoyMap`1">
            <summary>
            IDeclaredElement to TValue map.
            Rehash should be called after any PSI change
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.PsiDataRules.DeclaredElementsFromDocument(JetBrains.Application.DataContext.IDataContext,JetBrains.ReSharper.Feature.Services.Util.SourceFilesMask)">
            <summary>
            See <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> ctor for tuple semantic comments.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi.SelectReference(JetBrains.DocumentModel.DocumentRange,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Psi.Resolve.IReference})">
            <summary>
            Selects a reference from DIFFERENT psi files that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.TextControlToPsi.SelectReference(JetBrains.ReSharper.Psi.Tree.IFile,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Psi.Resolve.IReference[])">
            <summary>
            Selects a reference from the same psi file that user is most likely to bear in mind
            </summary>
            <remarks>Generally, we prefer references to the right of the position</remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ValueTracking.Engine.ValueTrackingNodesRepository">
            <summary>
            Map of IElements to value tracking nodes
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ValueTracking.Nodes.IPreExpandedNode.InitNode(JetBrains.Application.Progress.SubProgressIndicator)">
            <summary>
            Init data of pre-expanded node (usually calculates set of elements to search)
            May be called several times (when user cancells action)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+CodeCleanupOptionPage}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.CodeCleanupOptionPage))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(AlteringFeatuThemedIcons.CodeCleanupOptionPage), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.CodeCleanupOptionPage&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CodeCleanupOptionPage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+CodeCleanupOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.CodeCleanupOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.CodeCleanupOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CodeCleanupOptionPage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.CodeCleanupOptionPage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+CodeCleanupOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.CodeCleanupOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.CodeCleanupOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.CodeCleanupOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DisplayAlphabetic Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayAlphabetic}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayAlphabetic))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.DisplayAlphabetic.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayAlphabetic&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DisplayAlphabetic Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayAlphabetic"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayAlphabetic}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayAlphabetic))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.DisplayAlphabetic.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayAlphabetic&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DisplayByType Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayByType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayByType))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.DisplayByType.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayByType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DisplayByType Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.DisplayByType"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+DisplayByType}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.DisplayByType))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.DisplayByType.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.DisplayByType&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FileHeaderText Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+FileHeaderText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.FileHeaderText))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.FileHeaderText.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.FileHeaderText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FileHeaderText Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.FileHeaderText"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+FileHeaderText}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.FileHeaderText))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.FileHeaderText.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.FileHeaderText&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Gear Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+Gear}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.Gear))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.Gear.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.Gear&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Gear Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.Gear"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+Gear}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.Gear))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.Gear.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.Gear&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GeneratedMembers Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+GeneratedMembers}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.GeneratedMembers))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.GeneratedMembers.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.GeneratedMembers&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GeneratedMembers Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.GeneratedMembers"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+GeneratedMembers}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.GeneratedMembers))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.GeneratedMembers.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.GeneratedMembers&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle">
             <summary>
              <para>
                <para>Autogenerated identifier class for the IconTriangle Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+IconTriangle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.IconTriangle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.IconTriangle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.IconTriangle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the IconTriangle Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons.IconTriangle"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.AlteringFeatuThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:AlteringFeatuThemedIcons+IconTriangle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(AlteringFeatuThemedIcons.IconTriangle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = AlteringFeatuThemedIcons.IconTriangle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;AlteringFeatuThemedIcons.IconTriangle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = BulbThemedIcons.BulbFrame.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(BulbThemedIcons.BulbFrame), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BulbFrame Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.BulbFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BulbFrame Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.BulbFrame"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+BulbFrame}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.BulbFrame))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.BulbFrame.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.BulbFrame&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ContextAction Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextAction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextAction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextAction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextAction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ContextAction Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextAction"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextAction}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextAction))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextAction.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextAction&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ContextActionVS Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextActionVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextActionVS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextActionVS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextActionVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ContextActionVS Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.ContextActionVS"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+ContextActionVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.ContextActionVS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.ContextActionVS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.ContextActionVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DisableBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+DisableBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.DisableBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.DisableBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.DisableBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DisableBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.DisableBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+DisableBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.DisableBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.DisableBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.DisableBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RedBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+RedBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.RedBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.RedBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.RedBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RedBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.RedBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+RedBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.RedBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.RedBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.RedBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb">
             <summary>
              <para>
                <para>Autogenerated identifier class for the YellowBulb Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the YellowBulb Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulb"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulb}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulb))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulb.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulb&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS">
             <summary>
              <para>
                <para>Autogenerated identifier class for the YellowBulbVS Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulbVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulbVS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulbVS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulbVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the YellowBulbVS Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons.YellowBulbVS"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.BulbThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:BulbThemedIcons+YellowBulbVS}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(BulbThemedIcons.YellowBulbVS))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = BulbThemedIcons.YellowBulbVS.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;BulbThemedIcons.YellowBulbVS&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+BuildScripts}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.BuildScripts))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = CommonFeaturesOptionsThemedIcons.BuildScripts.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(CommonFeaturesOptionsThemedIcons.BuildScripts), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.BuildScripts&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BuildScripts Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+BuildScripts}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.BuildScripts))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.BuildScripts.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.BuildScripts&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BuildScripts Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.BuildScripts"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+BuildScripts}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.BuildScripts))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.BuildScripts.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.BuildScripts&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CodeStyleSharing Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CodeStyleSharing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CodeStyleSharing))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CodeStyleSharing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CodeStyleSharing Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CodeStyleSharing"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CodeStyleSharing}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CodeStyleSharing))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.CodeStyleSharing.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CodeStyleSharing&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CsharpOptionPage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CsharpOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CsharpOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CsharpOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CsharpOptionPage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.CsharpOptionPage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+CsharpOptionPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.CsharpOptionPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.CsharpOptionPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.CsharpOptionPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Inc Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Inc}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Inc))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Inc.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Inc&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Inc Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Inc"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Inc}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Inc))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Inc.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Inc&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LanguagesCommon Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+LanguagesCommon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.LanguagesCommon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.LanguagesCommon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LanguagesCommon Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.LanguagesCommon"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+LanguagesCommon}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.LanguagesCommon))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.LanguagesCommon.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.LanguagesCommon&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Master Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Master}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Master))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Master.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Master&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Master Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Master"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Master}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Master))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Master.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Master&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Vbnet Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Vbnet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Vbnet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Vbnet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Vbnet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Vbnet Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Vbnet"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Vbnet}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Vbnet))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Vbnet.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Vbnet&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Xaml Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Xaml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Xaml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Xaml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Xaml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Xaml Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons.Xaml"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.CommonFeaturesOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:CommonFeaturesOptionsThemedIcons+Xaml}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(CommonFeaturesOptionsThemedIcons.Xaml))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = CommonFeaturesOptionsThemedIcons.Xaml.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;CommonFeaturesOptionsThemedIcons.Xaml&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = DaemonThemedIcons.Recursion.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(DaemonThemedIcons.Recursion), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Recursion Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DaemonThemedIcons.Recursion.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Recursion Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons.Recursion"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DaemonThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DaemonThemedIcons+Recursion}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DaemonThemedIcons.Recursion))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DaemonThemedIcons.Recursion.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DaemonThemedIcons.Recursion&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = DfaThemedIcons.DfaCollection.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(DfaThemedIcons.DfaCollection), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaCollection Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaCollection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaCollection Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaCollection"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaCollection}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaCollection))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaCollection.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaCollection&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaFrom Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaFrom}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaFrom))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaFrom.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaFrom&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaFrom Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaFrom"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaFrom}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaFrom))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaFrom.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaFrom&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaLambda Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaLambda}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaLambda))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaLambda.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaLambda&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaLambda Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaLambda"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaLambda}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaLambda))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaLambda.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaLambda&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DfaTo Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaTo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaTo))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaTo.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaTo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DfaTo Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons.DfaTo"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.DfaThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:DfaThemedIcons+DfaTo}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(DfaThemedIcons.DfaTo))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = DfaThemedIcons.DfaTo.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;DfaThemedIcons.DfaTo&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+BracesLayout}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.BracesLayout))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(FeaturesEnvironmentOptionsThemedIcons.BracesLayout), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.BracesLayout&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout">
             <summary>
              <para>
                <para>Autogenerated identifier class for the BracesLayout Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+BracesLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.BracesLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.BracesLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the BracesLayout Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.BracesLayout"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+BracesLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.BracesLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.BracesLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.BracesLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CodeInspections Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeInspections}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeInspections))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeInspections&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CodeInspections Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeInspections"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeInspections}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeInspections))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeInspections.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeInspections&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CodeStyle Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeStyle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CodeStyle Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.CodeStyle"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+CodeStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.CodeStyle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.CodeStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.CodeStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FormattingStyle Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+FormattingStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.FormattingStyle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.FormattingStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FormattingStyle Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.FormattingStyle"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+FormattingStyle}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.FormattingStyle))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.FormattingStyle.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.FormattingStyle&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GeneratedCode Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GeneratedCode}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GeneratedCode))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GeneratedCode&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GeneratedCode Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GeneratedCode"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GeneratedCode}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GeneratedCode))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GeneratedCode.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GeneratedCode&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GlobalAnalysis Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GlobalAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GlobalAnalysis Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+GlobalAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.GlobalAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Highlighting Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Highlighting}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Highlighting))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Highlighting&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Highlighting Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Highlighting"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Highlighting}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Highlighting))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Highlighting.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Highlighting&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention">
             <summary>
              <para>
                <para>Autogenerated identifier class for the NamingConvention Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+NamingConvention}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.NamingConvention))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.NamingConvention&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the NamingConvention Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.NamingConvention"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+NamingConvention}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.NamingConvention))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.NamingConvention.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.NamingConvention&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Persistence Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Persistence}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Persistence))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Persistence.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Persistence&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Persistence Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Persistence"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Persistence}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Persistence))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Persistence.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Persistence&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Quickfixes Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Quickfixes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Quickfixes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Quickfixes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Quickfixes Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.Quickfixes"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+Quickfixes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.Quickfixes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.Quickfixes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.Quickfixes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat">
             <summary>
              <para>
                <para>Autogenerated identifier class for the StringFormat Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+StringFormat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.StringFormat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.StringFormat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the StringFormat Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.StringFormat"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+StringFormat}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.StringFormat))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.StringFormat.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.StringFormat&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TypeMembersLayout Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+TypeMembersLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TypeMembersLayout Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+TypeMembersLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.TypeMembersLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives">
             <summary>
              <para>
                <para>Autogenerated identifier class for the UsingDirectives Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+UsingDirectives}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.UsingDirectives))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.UsingDirectives&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the UsingDirectives Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.UsingDirectives"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+UsingDirectives}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.UsingDirectives))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.UsingDirectives.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.UsingDirectives&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ValueAnalysis Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+ValueAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ValueAnalysis Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentOptionsThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentOptionsThemedIcons+ValueAnalysis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentOptionsThemedIcons.ValueAnalysis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+AddFile}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.AddFile))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesEnvironmentThemedIcons.AddFile.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(FeaturesEnvironmentThemedIcons.AddFile), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.AddFile&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AddFile Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+AddFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.AddFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.AddFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.AddFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AddFile Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.AddFile"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+AddFile}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.AddFile))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.AddFile.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.AddFile&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph">
             <summary>
              <para>
                <para>Autogenerated identifier class for the CacheNotifierGlyph Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+CacheNotifierGlyph}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.CacheNotifierGlyph))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.CacheNotifierGlyph&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the CacheNotifierGlyph Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.CacheNotifierGlyph"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+CacheNotifierGlyph}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.CacheNotifierGlyph))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.CacheNotifierGlyph.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.CacheNotifierGlyph&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the MoveLiveTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+MoveLiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.MoveLiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.MoveLiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the MoveLiveTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.MoveLiveTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+MoveLiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.MoveLiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.MoveLiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.MoveLiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment">
             <summary>
              <para>
                <para>Autogenerated identifier class for the NAEnvironment Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+NAEnvironment}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.NAEnvironment))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.NAEnvironment.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.NAEnvironment&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the NAEnvironment Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.NAEnvironment"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+NAEnvironment}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.NAEnvironment))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.NAEnvironment.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.NAEnvironment&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Tip Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+Tip}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.Tip))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.Tip.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.Tip&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Tip Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.Tip"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+Tip}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.Tip))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.Tip.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.Tip&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TypeLayoutAlt Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+TypeLayoutAlt}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.TypeLayoutAlt))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.TypeLayoutAlt&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TypeLayoutAlt Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons.TypeLayoutAlt"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.FeaturesEnvironmentThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesEnvironmentThemedIcons+TypeLayoutAlt}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesEnvironmentThemedIcons.TypeLayoutAlt))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesEnvironmentThemedIcons.TypeLayoutAlt.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesEnvironmentThemedIcons.TypeLayoutAlt&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Collapse}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Collapse))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = PsiServicesThemedIcons.Collapse.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(PsiServicesThemedIcons.Collapse), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Collapse&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Collapse Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Collapse}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Collapse))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Collapse.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Collapse&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Collapse Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Collapse"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Collapse}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Collapse))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Collapse.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Collapse&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Empty Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Empty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Empty Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Empty"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Empty}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Empty))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Empty.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Empty&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HasImplementations Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasImplementations}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasImplementations))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasImplementations.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasImplementations&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HasImplementations Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasImplementations"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasImplementations}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasImplementations))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasImplementations.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasImplementations&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HasOverrides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasOverrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasOverrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasOverrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasOverrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HasOverrides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HasOverrides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HasOverrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HasOverrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HasOverrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HasOverrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Hides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Hides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Hides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Hides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Hides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Hides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Hides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Hides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Hides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Hides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Hides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the HidesAndImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HidesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HidesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HidesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HidesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the HidesAndImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.HidesAndImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+HidesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.HidesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.HidesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.HidesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Implements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Implements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Implements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Implements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Implements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Implements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Implements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Implements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Implements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Implements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Implements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Overrides Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Overrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Overrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Overrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Overrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Overrides Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Overrides"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Overrides}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Overrides))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Overrides.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Overrides&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the OverridesAndImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+OverridesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.OverridesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.OverridesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.OverridesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the OverridesAndImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.OverridesAndImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+OverridesAndImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.OverridesAndImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.OverridesAndImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.OverridesAndImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements">
             <summary>
              <para>
                <para>Autogenerated identifier class for the QuasiImplements Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+QuasiImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.QuasiImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.QuasiImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.QuasiImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the QuasiImplements Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.QuasiImplements"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+QuasiImplements}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.QuasiImplements))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.QuasiImplements.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.QuasiImplements&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Switch Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Switch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Switch))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Switch.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Switch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Switch Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons.Switch"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.PsiServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:PsiServicesThemedIcons+Switch}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(PsiServicesThemedIcons.Switch))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = PsiServicesThemedIcons.Switch.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;PsiServicesThemedIcons.Switch&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.resources.IconsForIconThemeSelectionSamplePsiServices">
            <summary>
            Generic PSI-Services theme-sample icons.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+AnalyzeThis}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.AnalyzeThis))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = ServicesThemedIcons.AnalyzeThis.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(ServicesThemedIcons.AnalyzeThis), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;ServicesThemedIcons.AnalyzeThis&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis">
             <summary>
              <para>
                <para>Autogenerated identifier class for the AnalyzeThis Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+AnalyzeThis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.AnalyzeThis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.AnalyzeThis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.AnalyzeThis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the AnalyzeThis Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.AnalyzeThis"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+AnalyzeThis}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.AnalyzeThis))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.AnalyzeThis.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.AnalyzeThis&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Base Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Base}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Base))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Base.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Base&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Base Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Base"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Base}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Base))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Base.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Base&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FileStorage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileStorage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FileStorage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileStorage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileStorage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileStorage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileStorage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileStorage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FileTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FileTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FileTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FileTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FileTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FileTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FileTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow">
             <summary>
              <para>
                <para>Autogenerated identifier class for the FindResultsToolWindow Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FindResultsToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FindResultsToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FindResultsToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FindResultsToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the FindResultsToolWindow Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.FindResultsToolWindow"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+FindResultsToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.FindResultsToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.FindResultsToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.FindResultsToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Hierarchy Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Hierarchy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Hierarchy))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Hierarchy.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Hierarchy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Hierarchy Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Hierarchy"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Hierarchy}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Hierarchy))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Hierarchy.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Hierarchy&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow">
             <summary>
              <para>
                <para>Autogenerated identifier class for the InspectionToolWindow Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+InspectionToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.InspectionToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.InspectionToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.InspectionToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the InspectionToolWindow Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.InspectionToolWindow"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+InspectionToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.InspectionToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.InspectionToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.InspectionToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the LiveTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+LiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.LiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.LiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.LiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the LiveTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.LiveTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+LiveTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.LiveTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.LiveTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.LiveTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the PersonalSolutionTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PersonalSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PersonalSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PersonalSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PersonalSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the PersonalSolutionTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PersonalSolutionTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PersonalSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PersonalSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PersonalSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PersonalSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the PredefinedTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PredefinedTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PredefinedTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PredefinedTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PredefinedTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the PredefinedTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.PredefinedTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+PredefinedTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.PredefinedTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.PredefinedTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.PredefinedTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Recursion2 Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Recursion2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Recursion2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Recursion2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Recursion2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Recursion2 Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Recursion2"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Recursion2}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Recursion2))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Recursion2.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Recursion2&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RecursionInFeatures Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+RecursionInFeatures}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.RecursionInFeatures))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.RecursionInFeatures.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.RecursionInFeatures&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RecursionInFeatures Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.RecursionInFeatures"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+RecursionInFeatures}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.RecursionInFeatures))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.RecursionInFeatures.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.RecursionInFeatures&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ReSharperServices16x16 Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ReSharperServices16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ReSharperServices16x16))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ReSharperServices16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ReSharperServices16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ReSharperServices16x16 Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ReSharperServices16x16"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ReSharperServices16x16}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ReSharperServices16x16))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ReSharperServices16x16.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ReSharperServices16x16&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ScopeGlobal Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScopeGlobal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScopeGlobal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScopeGlobal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScopeGlobal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ScopeGlobal Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScopeGlobal"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScopeGlobal}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScopeGlobal))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScopeGlobal.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScopeGlobal&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ScrollDown Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollDown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollDown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScrollDown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollDown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ScrollDown Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollDown"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollDown}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollDown))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScrollDown.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollDown&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ScrollUp Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollUp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollUp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScrollUp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollUp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ScrollUp Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.ScrollUp"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+ScrollUp}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.ScrollUp))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.ScrollUp.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.ScrollUp&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SharedSolutionTemplates Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SharedSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SharedSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SharedSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SharedSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SharedSolutionTemplates Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SharedSolutionTemplates"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SharedSolutionTemplates}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SharedSolutionTemplates))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SharedSolutionTemplates.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SharedSolutionTemplates&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow">
             <summary>
              <para>
                <para>Autogenerated identifier class for the StackTraceExplorerToolWindow Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+StackTraceExplorerToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.StackTraceExplorerToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.StackTraceExplorerToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.StackTraceExplorerToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the StackTraceExplorerToolWindow Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.StackTraceExplorerToolWindow"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+StackTraceExplorerToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.StackTraceExplorerToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.StackTraceExplorerToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.StackTraceExplorerToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Subtypes Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Subtypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Subtypes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Subtypes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Subtypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Subtypes Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Subtypes"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Subtypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Subtypes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Subtypes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Subtypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Supertypes Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Supertypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Supertypes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Supertypes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Supertypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Supertypes Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.Supertypes"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+Supertypes}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.Supertypes))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.Supertypes.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.Supertypes&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate">
             <summary>
              <para>
                <para>Autogenerated identifier class for the SurroundTemplate Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SurroundTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SurroundTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SurroundTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SurroundTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the SurroundTemplate Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.SurroundTemplate"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+SurroundTemplate}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.SurroundTemplate))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.SurroundTemplate.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.SurroundTemplate&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TypeHierarchyToolWindow Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+TypeHierarchyToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.TypeHierarchyToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.TypeHierarchyToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.TypeHierarchyToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TypeHierarchyToolWindow Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons.TypeHierarchyToolWindow"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Feature.Services.Resources.ServicesThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:ServicesThemedIcons+TypeHierarchyToolWindow}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(ServicesThemedIcons.TypeHierarchyToolWindow))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = ServicesThemedIcons.TypeHierarchyToolWindow.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;ServicesThemedIcons.TypeHierarchyToolWindow&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActiveText.FileProtocolHandler">
            <summary>
            Special handling of local file links
            Treat hash as windows explorer verb
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper">
            <summary>
            Helper methods for bookmarks.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.BookmarksHelper.GetBookmarkCoordsOffset(JetBrains.DocumentModel.IDocument,JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Returns offset of bookmark in specified document, corrected by real document content structure.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper">
            <summary>
            Helper to work with <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Bookmarks.XmlDocumentHelper.GetChildElements(System.Xml.XmlNode,System.String)">
            <summary>
            Return all child <see cref="T:System.Xml.XmlElement"/> with specified name.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Bulbs.IBulbItem">
            <summary>
            Represents a single lightbulb-bearing menu item.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.SetDefaultSetting(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.DefaultProfileType)">
            <summary>
            Get default setting for given profile type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check if this module can handle given project file
            </summary>
            <param name="sourceFile"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Process(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.IRangeMarker,JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Process clean-up on file. if <paramref name="rangeMarker"/>
            is <see cref="F:JetBrains.DocumentModel.DocumentRange.InvalidRange"/>, then process the whole file
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.LanguageType">
            <summary>
            Get the language this module can operate
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.Descriptors">
            <summary>
            Get the collection of option descriptors
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.ICodeCleanupModule.IsAvailableOnSelection">
            <summary>
            Check if this module is available on selection, or on the whole file
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo">
            <summary>
            Info about loaded context action
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo.Type">
            <summary>
            Class type which implements this action
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionInfo.ParameterType">
            <summary>
            Type of CA constructor parameter
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.OptionPages.CodeInspectionPage">
            <summary>
            Root options page for the global per-language options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState">
            <summary>
            Normal state flow is the following:
            INVALIDATED->IN_PROGRESS_LOCAL->UP_TO_DATE->IN_PROGRESS_GLOBAL->UP_TO_DATE
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.HIDDEN">
            <summary>
            Daemon doesn't need error stripe for given document.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.UNSUPPORTED">
            <summary>
            Daemon needs error stripe, but doesn't support error state
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.DISABLED">
            <summary>
            Daemon is switched off for given document
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.INVALIDATED">
            <summary>
            Daemon state is not valid for this document (i.e. something changed since last analysis)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.IN_PROGRESS_LOCAL">
            <summary>
            Daemon analysis is currently running local stages
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.IN_PROGRESS_GLOBAL">
            <summary>
            Daemon analysis is currently running global SWA stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.DaemonState.UP_TO_DATE">
            <summary>
            Daemon state is up-to-date for given document
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.GetHighlighting(JetBrains.TextControl.DocumentMarkup.IHighlighter)">
            <summary>
            
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.ForceReHighlight(JetBrains.DocumentModel.IDocument)">
            <summary>
            Force async rehighlighting process for given document
            </summary>
            <returns><c>false</c> if daemon wasn't started</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.Invalidate">
            <summary>
            Force invalidate all visible daemon results.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemon.DaemonStateChanged2">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DefaultDaemon.State(JetBrains.DocumentModel.IDocument)">
            <summary>
            Get the daemon state for the given document
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DefaultDaemon.DaemonStateChanged2">
            <summary>
            Raised when DaemonState of any document is changed
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingSettingsManager.HasNecessarySeverity(JetBrains.ReSharper.Feature.Services.Daemon.Severity,JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Check if any of the given highlighting list has severity equals or higher than <paramref name="severity"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningPreProcessor">
            <summary>
            Allows change the severity of compiler-specific highlighting according to project settings (such as "warning level" or "treat warnings as errors").
            Applied when adding highlightings to <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingConsumer"/> throgh <see cref="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingConsumerExtension.AddHighlighting(JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingConsumer,JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.DocumentModel.DocumentRange,JetBrains.ReSharper.Psi.Tree.IFile,System.Nullable{JetBrains.ReSharper.Feature.Services.Daemon.Severity},System.String,System.Nullable{JetBrains.ReSharper.Feature.Services.Daemon.OverlapResolveKind},System.Nullable{System.Int32})"/> methods
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.ICompilerWarningPreProcessor.PreProcess(System.Collections.Generic.IList{System.String},JetBrains.ReSharper.Psi.Tree.IFile)">
            <summary>
            Language-dependent preprocessor of highlighting with specified compiler ID.
            Return (null,null) in out parameters to use default severity anf attribute.
            </summary>
            <returns>
            <c>true</c> if warning should be added to markup, <c>false</c> if warning should be skipped
            </returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomSeverityHighlighting">
            <summary>
            Identifies that highlighting computes its severity in runtime
            Can be used together with <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.StaticSeverityHighlightingAttribute"/> with <value>Severity.INVALID_SEVERITY</value>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting">
            <summary>
            Base interface for all error highlightings
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.IsValid">
            <summary>
            Returns true if data (PSI, text ranges) associated with highlighting is valid
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.CalculateRange">
            <summary>
            Calculates range of a highlighting.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            To override the default mechanism of tooltip, mark the implementation class with 
            <see cref="!:DaemonTooltipProviderAttribute"/> attribute, and then this property will not be called
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.ErrorStripeToolTip">
            <summary>
            Message for this highlighting to show in tooltip and in status bar (if <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar"/> is <c>true</c>)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting.NavigationOffsetPatch">
            <summary>
            Specifies the offset from the Range.StartOffset to set the cursor to when navigating 
            to this highlighting. Usually returns <c>0</c>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomSeverityHighlighting.Severity">
            <summary>
            Highlighting severity
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IInheritanceMarkOnGutter.OnClick(JetBrains.UI.Icons.IconId)">
            <summary>
            Triggers when the gutter icon gets clicked.
            Passes the icon that should be painted in the popup menu caption in case there's more than one alternative.
            </summary>
            <param name="iconId"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Compare(JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Highlighting,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Highlighting)">
            <summary>
            Compare highlightings.
            </summary>
            <returns>0 if both should be present. -1 if <paramref name="i"/> should be removed, +1 if <paramref name="j"/> should be removed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Resolve(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo},System.Collections.Generic.IList{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo}@,System.Boolean,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingOverlapResolver.Layer,JetBrains.Application.Settings.IContextBoundSettingsStore,System.Func{System.Boolean})">
            <summary>
            Resolve overlapping highlighters. Receives new highlighters in given range (either full document, if <paramref name="fullRehighlight"/> is <c>true</c>, 
            and returns infos to be added and infos to be deleted
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IgnoreWarningsRegionsInfo">
            <summary>
            Info about regions where to ignore warnings or errors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage">
            <summary>
            Represents a "stage" in code analysis process.
            Each stage should have a key that allows stages to refer to each other.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage.CreateProcess(JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess,JetBrains.Application.Settings.IContextBoundSettingsStore,JetBrains.ReSharper.Feature.Services.Daemon.DaemonProcessKind)">
            <summary>
            Creates a code analysis process corresponding to this stage for analysing a file.
            </summary>
            <returns>Code analysis process to be executed or <c>null</c> if this stage is not available for this file.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage.NeedsErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Check the error stripe indicator necessity for this stage after processing given <paramref name="sourceFile"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider">
            <summary>
            Class should be marked by <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.CustomHighlightingActionProviderAttribute"/> attribute and should implement
            <see cref="T:JetBrains.ReSharper.Feature.Services.Intentions.ICustomHighlightingActionProvider"/> interface to be able to provide custom actions for highlighting
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.IoC.IoCType.Custom">
            <summary>
            obtained from annotation attributes
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Naming.UI.AdvancedNamingSettingsForm`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.AdvancedNamingSettingsForm`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.AdvancedNamingSettingsForm`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyDialog">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            EditNamingPolicyDialog
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyDialog.SelectedSettingsLayer">
            <summary>
            Gets settings layer if user used Save To, null otherwise
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyDialog.CanSaveTo">
            <summary>
            Gets whether to show save to button
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditNamingPolicyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Naming.UI.EditUserRuleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditUserRuleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.EditUserRuleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Naming.UI.PredefinedNamingSettingsPage">
            <summary> 
            Interaction logic for PredefinedNamingSettingsPage.xaml
            </summary>
            <summary>
            PredefinedNamingSettingsPage
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Naming.UI.PredefinedNamingSettingsPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.OptionPages.CodeEditing.CodeEditingPage">
            <summary>
            Root options page for the global per-language options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.Bulk.Items.HighlightingCleanupItemQuickFixBase">
            <summary>
            QuickFixes derived from the class participate in <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupItemAttribute"/> code cleanup module.
            All ancestors of the class must be marked with <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.HighlightingCleanupModuleBase`1"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix">
            <summary>
            Represents a quick-fix. Quick-fixes are bulb actions that appear in response to
            highlighted errors or suggestions (see <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting"/>), and typically
            serve to correct the highlighted problem.
            </summary>
            <remarks>&gt;If your quick-fix consists of just a single bulb items, you can inherit from
            <c>BulbActionBase</c> in addition to implementing this interface.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFix.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsAvailable(JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupProfile)">
            <summary>
            Check if this cleanup item is available according to profile
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.IsValid">
            <summary>
            Check if corresponding tree elements are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.HighlightingModule.IHighlightingsCleanupItem.Execute">
            <summary>
            Proceed with cleanup
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsAvailable(JetBrains.ReSharper.Psi.IPsiSourceFile,JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Precise check of code clenup execution availability for <see cref="!:range"/> in <see cref="!:sourceFile"/>
            </summary>
            <param name="sourceFile">File being cleaned up</param>
            <param name="range">Range beain cleaned up, Invalid in case of whole file</param>
            <returns>True, if available</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanup.IsSuitableFile(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Roughly checks whether code cleanup may be executed over <see cref="!:projectFile"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesBefore">
            <summary>
            psiModules which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCleanup.CodeCleanupModuleAttribute.ModulesAfter">
            <summary>
            psiModules which shoud follow this
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutocompletionBehaviour">
            <summary>
            Enumerates possible autoinsert mode foced by context
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings">
            <summary>
            Maintains code completion options for 6.0 version
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.IntellisenseSettingsKey"/> settings tree.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterDot">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupAfterNew">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupOnIdentifier">
            <summary>
            Use technology specific settings rooted at <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.AutopopupEnabledSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteBasicCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteClassNameCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoCompleteSmartCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.AutoPopupDelay">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.SettingsUpgrade.CodeCompletionSettings.MiddleMatchingCompletion">
            <summary>
            Use setting from <see cref="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.CodeCompletionSettingsKey"/> for general usage
            For use in code completion get it from: <seealso cref="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext.IdentifierMatchingStyle"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Impl.CodeCompletionContextProviderBase.CalculateDefaultRanges(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext)">
            <summary>
            Calculates ranges analysing letters and '_' to the left and to the right of the caret.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithReplaceRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'replaceRange'
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.WithInsertRange(JetBrains.Util.TextRange)">
            <summary>
            Creates new instance of ranges class with new value of the 'insertRange'
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.ReplaceRange">
            <summary>
            Range that is replaced when replace completion is applied
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.TextLookupRanges.InsertRange">
            <summary>
            Range that is replaced when insert completion is applied
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetIntellisenseEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Returns value of language specific 'enable' setting when global intellesense flag is set to per-technology value. 
            </summary>
            <param name="boundSettingsStore"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.Settings.LanguageSpecificIntellisenseManager.GetAutoppopupEnabled(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks:
            1. Global intellisense enable property
            2. Language specific intellisense enable property
            3. Global autopopup enable property
            </summary>
            <param name="contextBoundSettingsStore"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider.GetSelectedElement``1(System.Boolean,System.Boolean)">
            <summary>
            Returns element under caret
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="checkDocumentRange">If documentRange should be cheked for valid</param>
            <param name="ignoreSpaces">If spaces should be ignored</param>
            <returns>Element under caret</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a context action.
            See <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction"/> for more information.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Group">
            <summary>
            The context action group (e.g., "C#", "VB", etc.) to which the context action belongs.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Name">
            <summary>
            The name of this context action.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Description">
            <summary>
            Textual description of what the context action does.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Priority">
            <summary>
            A number indicating the priority of the action. Affects the position of the action in the pop-up menu.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute.Disabled">
            <summary>
            Determines whether the action is disabled by default.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction">
            <summary>
            Represents a context action. Context actions are bulb actions that appear depending on
            the location currently being edited. Context actions must be decorated with the
            <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionAttribute"/>, and their constructor should take a parameter of
            a type derived from <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataProvider"/>.
            </summary>
            <remarks>&gt;If your context action consists of just a single bulb items, you can inherit from
            <c>BulbActionBase</c> in addition to implementing this interface.</remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextAction.IsAvailable(JetBrains.Util.IUserDataHolder)">
            <summary>
            Check if this action is available at the constructed context.
            Actions could store precalculated info in <paramref name="cache"/> to share it between different actions
            </summary>
            <returns>true if this bulb action is available, false otherwise.</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilder">
            <summary>
            Since context actions calculates at working thread, some data must be pre-calculated in UI thread (e.g. using VS API).
            Using class marked with <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.ContextActionDataBuilderAttribute"/> 
            and implementing <see cref="T:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilder"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ContextActions.IContextActionDataBuilder.Build(JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl)">
            <summary>
            Calculates and returns IContextActionDataProvider
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute">
            <summary>
            Marks the class as a daemon stage for automatic registration
            The marked clas should have default constructor and should implement 
            <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStage"/> interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.InternalMode">
            <summary>
            If set to <c>true</c>, then daemon stage will be run only in internal mode
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.GlobalAnalysisStage">
            <summary>
            If set to <c>true</c>, then daemon stage will be run after analysing the whole solution
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.StagesBefore">
            <summary>
            Stages which should precede this
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageAttribute.StagesAfter">
            <summary>
            Stages which shoud follow this
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo})">
            <summary>
            Set highlightings for the whole documents
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.#ctor(System.Collections.Generic.ICollection{JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo},JetBrains.Util.TextRange)">
            <summary>
            Set highlightings for the specific text range
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.Highlightings">
            <summary>
            Array of result highlightings to be added to the editor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.FullyRehighlighted">
            <summary>
            Indicates that the whole file was rehighlighted. 
            If file was incrementally rehighlighted, then the range should be returned in <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.RehighlightedRange"/>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.RehighlightedRange">
            <summary>
            Range in the document for which the highlighting was recalculated. 
            All old highlightings that are inside this range will be removed 
            from the editor and replaced with the returned ones.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult.Layer">
            <summary>
            Highlighting key modifier, so one stage could produce highlgihtings for different layers. Usually shouldn't be used
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest">
            <summary>
            Defines the requirements for each stage
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.NONE">
            <summary>
            The stage doesn't require error stripe at all
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.STRIPE">
            <summary>
            Stage requires error stripe, but can't produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.ERRORS">
            <summary>
            Stage can produce warnings/errors
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Daemon.ErrorStripeRequest.STRIPE_AND_ERRORS">
            <summary>
            The stage requires error stripe and can produce warnings/errors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingInfo">
            <summary>
            Highlighting information which should be returned form stage <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess">
            <summary>
            Represents a code analysis process corresponding to one stage when analysing one file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess.Execute(System.Action{JetBrains.ReSharper.Feature.Services.Daemon.DaemonStageResult})">
            <summary>
            Executes the process.
            The process should check for <see cref="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonProcess.InterruptFlag"/> periodically (with intervals less than 100 ms)
            and throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> if it is true. 
            Failing to do so may cause the program to prevent user from typing while analysing the code.
            Stage results should be passed to <param name="committer"/>. If DaemonStageResult is <c>null</c>, it means that no highlightings available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.IDaemonStageProcess.DaemonProcess">
            <summary>
            Whole daemon process
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior">
            <summary>
            Language-specific implementation which defines some daemon behavour aspects
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior.InitialErrorStripe(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Get the error stripe visibility before analysis starts.
            Should not commit PSI!
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ILanguageSpecificDaemonBehavior.CanShowErrorBox">
            <summary>
            Check if this language can show error box
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.OverlapResolveKind">
            <summary>
            Controls how individual highlightings will be shown if overlaps
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ErrorStripeColorHighlighterAttributeId">
            <summary>
            <para>If this highlighter, when applied to a document, is to be shown on the error stripe, defines the ID of another <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> whose foreground color gives the error stripe mark color.</para>
            <para>Will be used only if Severity == INFO.</para>
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.OverlapResolve">
            <summary>
            Get the ovelap resolving policy for this highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.OverloadResolvePriority">
            <summary>
            Get the ovelap resolving priority for this highlighting (To resolve 2 highlightings with the same range and resolve policy)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase.ShowToolTipInStatusBar">
            <summary>
            Identifies if the tooltip message should be shown in the status bar when the cursor is over the highlighting
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityHighlightingAttribute.ConfigurableSeverityId">
            <summary>
            ID of configurable severity definition
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ConfigurableSeverityHighlightingAttribute.Languages">
            <summary>
            Languages for which this highlighting is
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingExtensions.GetConfigurableSeverityId(JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ReSharper.Feature.Services.Daemon.HighlightingAttributeBase)">
            <summary>
            Returns ConfigurableSeverityId for highlighting if it supports ICustomConfigurableSeverityIdHighlighting or 
            has ConfigurableSeverityHighlightingAttribute, or null otherwise
            If you already have attribute for this highlighting's class, you can pass it to the method to optimize performance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomAttributeIdHighlighting">
            <summary>
            Identifies that highlighting attribute ID is computed at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomAttributeIdHighlighting.AttributeId">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityIdHighlighting">
            <summary>
            Identifies that highlighting severity ID is calculated at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomConfigurableSeverityIdHighlighting.ConfigurableSeverityId">
            <summary>
            Configurable severity id of this highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting">
            <summary>
            Identifies that highlighting computes it's style at runtime
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting.Attributes">
            <summary>
            Attribute of this highlighting in the markup model
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Daemon.ICustomStyleHighlighting.AttributeId">
            <summary>
            Attribute Id of this highlighting in the markup model
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableSeverityAttribute">
            <summary>
            Register new configurable severity definition
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Daemon.RegisterConfigurableSeverityAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,JetBrains.ReSharper.Feature.Services.Daemon.Severity,System.Boolean)">
            <summary>
            Register new configurable severity definition
            </summary>
            <param name="id">Unique ID of severity definition. Key to match with implementation</param>
            <param name="compoundItemName">optional value, can join few items under the same header under group (items are matched by compoundItemName equality)</param>
            <param name="group">Group ID of the item. See <see cref="T:JetBrains.ReSharper.Feature.Services.Daemon.HighlightingGroupIds"/> for common groups</param>
            <param name="title">title</param>
            <param name="description">description</param>
            <param name="defaultSeverity"></param>
            <param name="solutionAnalysisRequired"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Daemon.Severity">
            <summary>
            the role of each highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Descriptions.DeclaredElementDescriptionPresenter">
            <summary>
            DeclaredElementDescriptionPresenter can fetch descriptions and obsolete flags for declared elements from various sources: XML docs, CLR attributes, external documentation.
            To add a new source of information, implement IDeclaredElementDescriptionProvider in a solution-level component.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.src.Explanatory.CodeInspectionWikiResources.CodeInspectionWiki">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;CodeInspectionWiki&gt;
              &lt;Item Id=&quot;ForControlVariableIsNeverModified&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/&apos;for&apos;+loop+control+variable+is+never+modified&quot;/&gt;
              &lt;Item Id=&quot;ValueParameterNotUsed&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/%27value%27+parameter+is+not+used&quot;/&gt;
              &lt;Item Id=&quot;AccessToStaticMemberViaDerivedType&quot; Url=&quot;http://confluence.jetbrains.net/display/ReSharper/Access+to+a+static+member+of+a+type+via+a+derived+type&quot;/&gt;
              &lt;Item [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.IsAvaliable(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>Checks if this builder will produce any output in the specified context</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.HasProcessableElements(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElement})">
            <summary>Tells if builder will produce any output elements</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorBuilder.Process(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Runs on context and modifies PSI</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.GetPossibleValues">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.IsValidValue(System.String)">
            <summary>Gets possible values for given output element in the given context</summary>
            <returns>List of possible values for combobox</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.ID">
            <summary>Option identity</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Title">
            <summary>Title text</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Kind">
            <summary>UI presention kind</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Persist">
            <summary>Indicates if value should be saved across generate sessions</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.Value">
            <summary>Value for this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.OverridesGlobalOption">
            <summary>Global option value does not propagate to this option</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOption.HasDependentOptions">
            <summary>If this property is true, options are refreshed on change</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.LoadOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Loads persistent option value.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionFromSettings.SaveOption(JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>Saves persistent option value.</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider">
            <summary>Provides elements for generation</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorElementProvider.Populate(JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext)">
            <summary>Collects elements for builder</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ExtensionLocationView">
            <summary>
            ExtensionLocationView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.ExtensionLocationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.RelativeLocationView">
            <summary>
            RelativeLocationView
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.RelativeLocationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider">
            <summary>
            Overrides refactoring action (Ex: Inline rename overrides basic rename for local variables)
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ActionsMenu.IOverridingWorkflowProvider.HideOtherActions(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Returns if all other refactorings should be hidden in this context...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SolutionFeaturePartsContainer">
            <summary>
            Container for getting ALL (not only leaf) applicable components
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_Autohide(JetBrains.DataFlow.Lifetime,JetBrains.DocumentManagers.DocumentManager,JetBrains.ActionManagement.IActionManager,JetBrains.TextControl.ITextControlManager)">
            <summary>
            Hides on user actions, or automatically by hiding policy on the custom request.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.Init_ResultLists(JetBrains.DataFlow.Lifetime,JetBrains.IDE.ResultList.ResultListManager,JetBrains.Application.IShellLocks)">
            <summary>
            Interaction with the IDE-global result list which controls the back-forward navigation.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl">
            <summary>
            Accessor for methods which are in context of a text control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingManager.CustomHighlightingManagerForTextControl.GetNextHighlighterFromCaret(System.Windows.Documents.LogicalDirection)">
            <summary>
            Scans from caret in the given direction. Yields <c>Null</c> when either text control has no active requests, or we're already on or beyond the last highlighter in the given direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Navigation.CustomHighlighting.CustomHighlightingRequest.TextControl">
            <summary>
            NOTE: formally, the custom highlighting currently applies to a document, because we ain't got a layer for highlighters on text control level. The highlighters will show up in all text controls of this document.
            Historically, API binds to just one text control.
            So we'd also only track the single text control for now. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickFixes.IQuickFixes.CreateCustomWarningActions(JetBrains.ReSharper.Feature.Services.Daemon.IHighlighting,JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.DocumentRange)">
            <summary>
             Get actions which could disable given specific highlighting
             </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickFixes.QuickFixAttribute">
            <summary>
            Indicates that the class, marked with this attribute, is a quick-fix. 
            It will be automatically registered for all errors, 
            for which it has public constructors
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IConflictSearcher">
            <summary>
            Interface for creating conflict searchers
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IConflictSearcher.SearchConflicts(JetBrains.Application.Progress.IProgressIndicator,System.Boolean)">
            <summary>
            </summary>
            <param name="progressIndicator"></param>
            <param name="canPerformRefactoring">Determines if refactoring can perform refactoring during conflict search...</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow">
            <summary>
            Represents a refactoring workflow
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.PreExecute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents before PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.Execute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents under PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.PostExecute(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Change documents after PSI transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.SuccessfulFinish(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Set caret or perform navigation after document transaction...</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflow.UnsuccessfulFinish(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>Restore state in the case of failure..</summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSearchResult">
            <summary>
            Result of conflict searching
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSearchResult.PerformedRefactoring">
            <summary>
            Gets flag indicating whether the refactoring was performed during conflict evaluation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictSeverity">
            <summary>
            Defines possible conflict severity
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictWithDeclaredElement">
            <summary>
            Conflict for case when a created declared element conflicts with another one
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict">
            <summary>
            Represents a conflict
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.IsValid">
            <summary>
            Gets flag indicating whether data related to the conflict is valid
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.Description">
            <summary>
            Gets conflict description
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.IConflict.Severity">
            <summary>
            Gets conflict severity
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringDataConstants.DeclaredElementWithoutSelection">
            <summary>
            Declared Element for refactorings that are not supposed to run on selection. This rule handles case when name of an element is selected.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringWorkflowProvider">
            <summary>
            Provides yet another refactoring for the given action (Ex: 'Move to outer scope' adds functionality to the Move action. )
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.InlineWorkflowProvider">
            <summary>
            'Inline' refactoring workflow provider.
            Usage:
            <code>
            [InlineWorkflowProvider]
            internal class CustomInlineProvider : IInlineWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomInlineWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.MoveWorkflowProvider">
            <summary>
            'Move' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomMoveProvider : IMoveWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomMoveWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.RenameWorkflowProvider">
            <summary>
            'Rename' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomRenameProvider : IRenameWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomRenameWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.AtomicRenameBase.CreateRenamesConfirmationPage(JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameWorkflow,System.Func{JetBrains.Application.Progress.IProgressIndicator,JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage},JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Page may contain custom options for the given rename.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IAtomicRenameFactory">
            <summary>
            Creates AtomicRenameBase implementations. Each implementation responsible for renaming single <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>
            Implementations use applicability principle and should be marked by <see cref="T:JetBrains.Application.ComponentModel.ShellFeaturePartAttribute"/>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IFileRenameProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IPrimaryDeclaredElementForRenameProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameSuspiciousNamesService">
            <summary>
            Implementation may provide extra names for renamed <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/> that will be used to 
            analyse possible changes in code semantic after rename.
            
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.IRenameSuspiciousNamesService.GetPossibleReferenceNames(JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Returns names of entities that should be checked after rename
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameHelperBase.IsCheckResolvedTo(JetBrains.ReSharper.Psi.Resolve.IReference,JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Checks if  <paramref name="newReference" />
              after rename is bound onto <paramref name="newDeclaredElement" />
            </summary>
            <param name="newReference"></param>
            <param name="newDeclaredElement"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenamePartAttribute">
            <summary>
            Extension attribute for rename refactoring
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameRefactoringService.ExecuteRename(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Execute rename with provided atomic renames...
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.Rename.RenameRefactoringService.CreateWorkflow(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            creates rename wotkflow that is available on the provided data
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.IWorkflowExec">
            <summary>
            Grouping interface for language specific helper of refactoring workflow.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.AssociativeMatcherUtil.Match(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext,System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher},JetBrains.Util.Graphs.BipartiteGraph{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher,JetBrains.ReSharper.Psi.Tree.ITreeNode}@,System.Collections.Generic.List{JetBrains.ReSharper.Psi.Tree.ITreeNode}@)">
            <summary>
            
            </summary>
            <remarks>
            <paramref name="operands"/> is truncated, only unmatched operands are left
            </remarks>
            <param name="operands"></param>
            <param name="context"></param>
            <param name="matchers"></param>
            <param name="graph"></param>
            <param name="matchedOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.AssociativeMatcherUtil.MatchExpression(System.Collections.Generic.IList{JetBrains.ReSharper.Psi.Tree.ITreeNode},System.Collections.Generic.IEnumerable{JetBrains.ReSharper.Feature.Services.StructuralSearch.IElementMatcher},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Tree.ITreeNode}})">
            <summary>
            Returns matched operands, <value>null</value> if not matched
            </summary>
            <param name="operands"></param>
            <param name="matchers"></param>
            <param name="context"></param>
            <param name="getOperands"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.IStructuralSearchPatternValidator.Validate(JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPattern)">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.MatchingContext.CreateFromParentContext(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext)">
            <summary>
            Creates matching context using parent context variant as initial variant.
            It is used only into js2ts transformations.
            </summary>    
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.SequenceMatchingContext`1.CreateFromParentContext(System.Collections.Generic.IEnumerable{`0},JetBrains.ReSharper.Feature.Services.StructuralSearch.IMatchingContext)">
            <summary>
            Creates sequence matching context using parent context variant as initial variant.
            It is used only into js2ts transformations
            </summary>   
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatcher.GetExtendedWords(JetBrains.ProjectModel.ISolution)">
            <summary>
            Words that MAY or MAY NOT be in matched snippet, but AT LEAST ONE word from this list MUST be there.
            MUST NOT include Words (because this constaint applies after).
            When empty enumerable is returned, constraint is not applied.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralMatcher.Words">
            <summary>
            ALL these words MUST be in matched snippet
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.StructuralSearch.Impl.StructuralSearchPatternValidator.Validate(JetBrains.ReSharper.Feature.Services.StructuralSearch.IStructuralSearchPattern)">
            <summary>
            Returns null if pattern is correct
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.StructuralSearch.IMetaPlaceholder">
            <summary>
            Marker interface
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.StructuralSearch.SequenceMatcher`1.DeepAnalysis">
            <summary>
            Deep analysis tries all cases of possible sequence matching
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.IgnoreEmptyStatements">
            <summary>
            Ignore empty statements.
            Useful when matching statement placeholders in C#: "$stmt$;" pattern matches even if there's no empty statement at the end.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.TreatPostfixAndPrefixOperatorEquivalent">
            <summary>
            Only if they are not used in expressions
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchAllMembersWithoutModifiers">
            <summary>
            If this option is set pattern "$type$ $method$($args$) $stmt$" will match all methods no matter
            which modifiers they have (private/public, static, etc.)
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchAllSymbolsWithoutAttributes">
            <summary>
            If this option is set and there's no attributes on a symbol in a given pattern then respective symbol will be matched
            no matter if there are attributes in code or not.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.MatchMethodParameterWithThisRefOut">
            <summary>
            If there's no ref or out or this modifier in pattern, pattern will match bare parameters as well as parameters with ref or out or this modifier.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.StructuralSearch.StructuralSearchPatternParams.TypePlaceholderMatchesVoid">
            <summary>
            When Type placeholder is used as a return value of a method allows or disallows match void.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FontInfo">
            <summary>
            Font information
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedText">
            <summary>
            Text markup
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.FormattedText.Lines">
            <summary>
            Gets array of lines to paint
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText">
            <summary>
            Represents an active text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.CalculateHeight(System.Drawing.Graphics,System.Int32)">
            <summary>
            Gets text full height
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.NotifyMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Notify active text about mouse move
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.GetAnchor(System.Drawing.Point)">
            <summary>
            Gets currently hovered anchor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.ColorScheme">
            <summary>
            Gets or sets color scheme
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.Content">
            <summary>
            Gets or sets content
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.IActiveText.DefaultFont">
            <summary>
            Gets or sets default font for text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.Impl.TextMarkup">
            <summary>
            Summary description for MarkupModel.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextLine">
            <summary>
            Line of text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.ActiveRichText.TextPart">
            <summary>
            Part of text line with common text attributes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictsPage">
            <summary>
            Summary description for ConflictsPage.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictsPage.myComponents">
            <summary>Required designer variable.</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.ConflictsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.FunctionWrapper`1">
            <summary>
            Wraps action with exception handlers. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringEvents.RefactoringFinished">
            <summary>
            finished either with commit or with cancel
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.CachingLanguageSpecificImpl`1">
            <summary>
            Simple wrapper on language specific container that caches that caches component instances.
            Lifetime of this instance should be limited by refactoring
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringsTaskExecutor">
            <summary>
            Facilitates implementation of UI-based ITaskExecutors
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringsTaskExecutor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm">
            <summary>
            Summary description for RefactoringWizardForm.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.ContentContinueEnabled">
            <summary>
            Binds to the <see cref="P:JetBrains.ReSharper.Feature.Services.Refactorings.IRefactoringPage.ContinueEnabled"/> of the current <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.Content"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBorderedBottom">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridBody"/>, hosts <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBorderedTop">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridBody"/>, hosts <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myHeading"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBtnBack">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBtnCancel">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBtnContinue">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myCheckBoxOpenFiles">
            <summary>
            On <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridBody">
            <summary>
            The body vert stack-panel that spans the whole dialog client area. Lives on <see cref="T:System.Windows.Forms.Form"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridNavigation">
            <summary>
            The bottom horz stack-panel with checkbox and the buttons. Lives on <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBorderedBottom"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myHeading">
            <summary>
            Heading, on <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myBorderedTop"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myPanelContent">
            <summary>
            A panel that hosts the UI content provided by refactoriPulPngs. Lives in <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridBody"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myProgress">
            <summary>
            Progress at the bottom, on <see cref="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.myGridBody"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.Content">
            <summary>
            The page displayed in the dialog, or <c>Null</c> before any is assigned.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.RunningTaskExecutor">
            <summary>
            While a task executor is in use, displays its instance.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.CreateTaskExecutor_AttachUi(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel)">
            <summary>
            When a task executor is created, binds its status to the dialog UI.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.InitControls_LoadSaveLocationSettings(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,JetBrains.Application.Settings.ISettingsStore)">
            <summary>
            Persists window position.
            The idea is:
            (1) The position is relative to the owner window (main window, or tab well if floating).
            (2) The position is of the title bar center (top-center point of the window), because the window width/height depends on the refactoring control.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Refactorings.RefactoringWizardForm.IsBusy">
            <summary>
            Gets or sets whether the workflow is currently running some process, so that the navigation buttons should be disabled.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.WorkflowHostWithWizardForm">
            <summary>
            Runs refactoring on the refactoring wizard form...
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Refactorings.Specific.SafeDeleteWorkflowProvider">
            <summary>
            'SafeDelete' refactoring workflow provider.
            Usage:
            <code>
            [RefactoringWorkflowProvider]
            internal class CustomSafeDeleteProvider : ISafeDeleteWorkflowProvider
            {
              public RefactoringWorkflow CreateWorkflow(ISolution solution)
              {
                return new CustomSafeDeleteWorkflow(solution);
              }
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit">
            <summary>
            An edit-like control for placing on the dialog boxes that picks a type name from a tree or completion list.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CommitCompletionListInputString">
            <summary>
            Immediately commits the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.Text"/> to the completion lists's model.
            Wired to the deferred binding when the completion list menu is lazy-created.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListExecuteSelectedItem">
            <summary>
            Exec sel menu item, if any.
            Returns exec success flag (<see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteSelectedItem"/>).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListSelectNextItem">
            <summary>
            Selects the next item in the completion drop-down list, eg when up/down arrows are used in the edit box.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.IsCompletionListVisible">
            <summary>
            Gets whether we've ruled out that the completion list should be visible at the moment.
            This means <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowMode"/> is <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.Show"/> and the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.CompletionModel"/>'s <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/> are not empty (and the model exists, in the first place).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.myEvtUpdateTextBeforeCaret">
            <summary>
            As we can't (so it seems) get the event of caret movement in the edit box, we'd udpate it every so often. Probably the caret position can't change without a Windows message on the control, so we'd apply the change after each message, with a small delay needed just to group multiple consequent messages together.
            GEvent is better than BeginInvoke because the latter adds to the messages itself and cannot guarantee all fo the dependent messages go thru before it executes.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CaretPosition">
            <summary>
            Gives out the current caret position in the edit box, or the selection start position.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowMode">
            <summary>
            Whether the completion list is allowed to be shown at the moment. Other filters could apply (eg will not be actually visible if there are no items).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.Settings">
            <summary>
            Gets or sets the settings that define the behavior of the picker, like what it picks and which functionality is available.
            Can be set only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.Text">
            <summary>
            Gets or sets the text of the editbox the user is typing.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.TextBeforeCaret">
            <summary>
            Gets or sets the text of the editbox the user is typing, up to the current caret position or the selection start. Could be used as the completion prefix.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.ExecuteCompletionListItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            If menu is shown, selects the given item and applies its text.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListHide(JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModeTransition)">
            <summary>
            Hides the completion list, either the soft or the hard way.
            Modifies <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowMode"/> based on its present value and the <paramref name="flag"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShow(JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModeTransition)">
            <summary>
            Shows the completion list, either the soft or the hard way.
            Modifies <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowMode"/> based on its present value and the <paramref name="flag"/>.
            Eg a soft-show won't actually show if currently in <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.HideHard"/> mode.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.Init_CompletionList_LazyCreate(System.IDisposable,JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.Application.IMainWindow,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext,JetBrains.UI.PopupWindowManager.PopupWindowManager,JetBrains.UI.Theming.ITheming)">
            <summary>
            Implements menu lazy-creation. Does nothing if already created.
            </summary>
            <param name="disLazyCreate">Disconnects from lazy creation, making sure it actually runs only once.</param>
            <param name="tooltipman"> </param>
            <param name="mainWindow"> </param>
            <param name="windowsHookManager"> </param>
            <param name="mainWindowPopupWindowContext"> </param>
            <param name="popupWindowManager"> </param>
            <param name="theming"> </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.OnCompletionOrPickerTextApplied">
            <summary>
            Called after:
            â€¢ User executes an item in the completion list and some new text is applied to the editbox.
            â€¢ User executes an item in the picker tree drop-down and some text is applied to the editbox.
            Normally, selects the new text and sets focus to the editbox.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"></see> event.
            </summary>
            
            <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModeTransition">
            <summary>
            Flag for transitioning between <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModeTransition.Soft">
            <summary>
            Switches softly, cannot break <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.HideHard"/>. This is for handling implicit activities.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModeTransition.Hard">
            <summary>
            Switches forcibly, always transitions to the desired state. Must be done on explicit user actions only.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes">
            <summary>
            Whether the completion list is allowed to be shown at the moment. Other filters could apply (eg will not be actually visible if there are no items).
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.Show">
            <summary>
            The completion list could be visible if other factors (like items>0) are met.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.HideSoft">
            <summary>
            The completion list has been hidden indeliberately, and should transition to <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.Show"/> when there's an excuse.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit.CompletionListShowModes.HideHard">
            <summary>
            The completion list has been focibly hidden. Should not show again unless explicitly requested by the user.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerPopupDialog">
            <summary>
            A self-contained popup type chooser that can be employed in case you'd like to use the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>, but have no place to host it as a control and want to show it in a popup dialog.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerPopupDialog.Settings">
            <summary>
            Gets or sets the settings that define the behavior of the picker, like what it picks and which functionality is available.
            Can be set only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerPopupDialog.TypeChooserText">
            <summary>
            Gets or sets the text contents of the type chooser.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerPopupDialog.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerPopupDialog.LabelText">
            <summary>
            Gets or sets the text displayed on the label.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings">
            <summary>
            Specifies the configuration for the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/> control.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.CompletionModel">
            <summary>
            Gets or sets the flat model that works for completing the text you type into the control.
            Can be set only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.ExpandPickerItem">
            <summary>
            When the tree picker is building its model, supplies the items for the next level.
            Fill the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> list with the children of <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/>, who must not be <c>Null</c>.
            When <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> is <c>Null</c>, root items are requested. 
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.IsSelectingAllTextOnCompletion">
            <summary>
            When user executes a completion list item or a picker tree item and its text is planted into the editbox (replacing any existing selection), determines whether the whole contents of the edit box is selected.
            The default is <c>True</c>, which helps with correcting any mistaken selection. <c>False</c> is recommended when you implement sequential completion.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.PickerItemPresenter">
            <summary>
            Gets or sets the presenter for the picker (drop-down tree) items.
            This value can only be set once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.TranslateCompletionItem">
            <summary>
            When a completion list item is executed, its text is inserted into the edit box.
            In case the text should be modified before insertion (eg FQN instead of a short name), this event should be sinked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.TranslatePickerItem">
            <summary>
            When a picker tree item is executed, its text is inserted into the edit box.
            In case the text should be modified before insertion (eg FQN instead of a short name), this event should be sinked.
            Setting the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> to <c>Null</c> prevents the item from being picked (eg for group nodes that are only present to hold the child elements).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerSettings.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser">
            <summary>
            Base class for <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based choosers.
            Those are used for setting up the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.CompletionItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the completion items (in the completion menu).
            Can be assigned only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.PickerItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the picker items (in the drop-down picker tree).
            This is usually a superset of the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.CompletionItemsPassFilter"/> items, as it has to include the nodes that contain the useful items. Items under the excluded nodes are excluded automatically.
            Can be assigned only once.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetFqName(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.PsiLanguageType)">
            <summary>
            Rip FQ Name from a declared element, in the specified language, suitable for use by the picker owner.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetDeclarationsCache">
            <summary>
            Gets the declarations cache for the current models (on solution, either libs or no-libs).
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetItems(JetBrains.ReSharper.Psi.IDeclaredElement)">
            <summary>
            Retrieves nested items visible to solution for specified element
            </summary>
            <param name="element"><c>Null</c> for the root.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.GetNestedItems(JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Caches.ISymbolScope)">
            <summary>
            Expands the level of the tree picker.
            </summary>
            <param name="element"><c>Null</c> for the root.</param>
            <param name="cache">Declarations cache</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.InitCompletion(System.Func{JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController})">
            <summary>
            Inits the plain completion support.
            </summary>
            <param name="FCreateCompletionController"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.InitPicker">
            <summary>
            Inits the tree drop-down support.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language">
            <summary>
            The language this instance is working in.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Libraries">
            <summary>
            Defines whether the libraries should be included or not when searching for items.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Settings">
            <summary>
            Gets the settings applicable to the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Solution">
            <summary>
            Gets the solution we're browsing.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser">
            <summary>
            Customizes the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/> for choosing types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.CreateSettings(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.Application.IShellLocks)">
            <summary>
            Creates settings for supplying into the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.TryGetTypeElement(System.String)">
            <summary>
            Tries to look up a declared element for its FQ Name in the current <see cref="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.TypeChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
            <param name="lifetime"></param>
            <param name="solution"></param>
            <param name="librariesFlag"></param>
            <param name="locks"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.FileChooser">
            <summary>
            Base class for <see cref="T:JetBrains.ReSharper.Psi.IDeclaredElement"/>-based choosers.
            Those are used for setting up the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CompletionItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the completion items (in the completion menu).
            Can be assigned only once.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.PickerItemsPassFilter">
            <summary>
            Gets or sets the filter that narrows down the picker items (in the drop-down picker tree).
            This is usually a superset of the <see cref="F:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CompletionItemsPassFilter"/> items, as it has to include the nodes that contain the useful items. Items under the excluded nodes are excluded automatically.
            Can be assigned only once.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.InitPicker">
            <summary>
            Inits the tree drop-down support.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.FileChooser.InitCompletion(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks)">
            <summary>
            Inits the plain completion support.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.FileChooser.Settings">
            <summary>
            Gets the settings applicable to the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.UI.FileChooser.Solution">
            <summary>
            Gets the solution we're browsing.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser">
            <summary>
            Customizes the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/> for choosing namespaces.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.CreateSettings(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ProjectModel.IProject,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.ReSharper.Psi.PsiLanguageType,JetBrains.Application.IShellLocks)">
            <summary>
            Creates settings for supplying into the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.TryGetNamespace(System.String)">
            <summary>
            Tries to look up a declared element for its FQ Name in the current <see cref="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.UI.NamespaceChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Options.HostAutoFormatSettings">
            <summary>
            Host (e.g. VS) autoformat (e.g. Pretty Listing) settings
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.QuickDoc.IQuickDocPresenter">
            <summary>
            Quick doc is documented.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.QuickDoc.Render.IXmlDocHeaderPresenter.Present(System.Text.StringBuilder,JetBrains.ReSharper.Psi.IDeclaredElement,JetBrains.ReSharper.Psi.Modules.IPsiModule)">
            <summary>
            Presents the declared element as a header for HTML quick doc
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconSettings">
            <summary>
            Settings for the <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and Themed Icons subsystem.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect">
            <summary>
            Standard PSI icon theme aspect values.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback">
            <summary>
            The aspect itself (as in outer class), plus lower-priority aspect entries for fallback options specific for the theme.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsIdea_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs08_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Color_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11GrayDark_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.SymbolsVs11Gray_WithFallback">
            <summary>
            Fallback to other themes in order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeAspect.AspectListsForFallback.Demote(JetBrains.UI.Icons.IconThemeAspect,System.Int32)">
            <summary>
            Slightly demotes an aspect in priority to implement fallback in case of missing theme image.
            </summary>
            <param name="aspect"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.Automatic">
            <summary>
            <para>This is the default. A theme is selected based on the current environment.</para>
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs08">
            <summary>
            VS8-friendly icon set. Mostly the same as Visual Studio Classic, but with more than 16 colors.
            In use with VS 8-9-10.
            Autoselected with VS 8-9-10.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsIdea">
            <summary>
            JetBrains IDEA lookalike icon set, for better migration.
            Manual only.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Gray">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons in light theme.
            Autoselected with VS 11 with light background.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11Color">
            <summary>
            VS11-friendly metro-style color-painted icon set. Based on VS11 own icons, but with added color.
            Autoselected in non-VS environments.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelection.SymbolsVs11GrayDark">
            <summary>
            VS11-friendly metro-style mostly-gray icon set. Best mimics VS11 own icons dark theme.
            Autoselected with VS 11 with dark background.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation">
            <summary>
            Icon theme selection control for Options.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.Options.OptionsSettingsSmartContext,JetBrains.Threading.IThreading,JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap,JetBrains.Util.ILogger)">
            <summary>
            .ctor for automatic factoring in Options.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSelectionControlAutomation.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.IContextBoundSettingsStoreLive,JetBrains.Threading.IThreading,JetBrains.UI.Icons.ThemedIconManager.IconIdOwnersMap,JetBrains.Util.ILogger,System.Int32)">
            <summary>
            .ctor for manual factoring or factoring outside Options.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SymbolIcons.PsiSymbolIconThemeSettingsLoader">
            <summary>
            Loads and publishes as the theme aspect the psi symbol icon theme settings.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.ITodoPatternStorage.UpdateHash">
            <summary>
            Recalculates hash and returns true if it has not changed
            </summary>
            <returns>true if has not changed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.ITodoContentsProvider.GetTokenContentsRange(System.String,JetBrains.Util.TextRange,JetBrains.ReSharper.Psi.Parsing.TokenNodeType)">
            <summary>
            Used by todo manager to extract contents from tokens, e.g. remove slashes from comments. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TodoItems.TodoPatternStorage.UpdateHash">
            <summary>
            Recalculates hash and returns true if it has not changed
            </summary>
            <returns>true if has not changed</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.#ctor(JetBrains.ProjectModel.ISolution,JetBrains.UI.WindowManagement.WindowFrame,JetBrains.Application.IShellLocks,JetBrains.Threading.IThreading,JetBrains.Application.changes.ChangeManager,JetBrains.ReSharper.Psi.AsyncCommitService,JetBrains.ReSharper.Psi.CachingLexers.CachingLexerService,JetBrains.ReSharper.Feature.Services.Daemon.IDaemon,JetBrains.UI.StatusBar.IStatusBar,JetBrains.ActionManagement.IActionManager,JetBrains.TextControl.DocumentMarkup.IHighlighterCustomization,JetBrains.DocumentModel.IInMemoryDocumentFactory,JetBrains.UI.Application.IUIApplication,JetBrains.ReSharper.Feature.Services.Daemon.IHighlightingSettingsManager)">
            <summary>
            Use this constructor
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.Display(System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange},JetBrains.Util.OneToListMap{JetBrains.DocumentModel.DocumentRange,JetBrains.TextControl.DocumentMarkup.IHighlighter},JetBrains.DocumentModel.DocumentRange)">
            <summary>
            Displays given set of document ranges.
            </summary>
            <param name="ranges">Document ranges to display</param>
            <param name="highlightingMap">Additional highlighters in document ranges</param>
            <param name="scrollRange">Optional range with scrolled position. DocumentRange.Invalid if no scrolling needed</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.Show(JetBrains.ReSharper.Psi.IDeclaredElement,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays IDeclaredElement except namespaces with all necessary features.
            </summary>
            <param name="declaredElement">IDeclaredElement to display.</param>
            <param name="highlightedRanges">Additional ranges to highlight.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.Show(JetBrains.Util.TextRange,JetBrains.ProjectModel.IProjectFile,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays text range in a project file with all necessary features.
            </summary>
            <param name="documentTextRange">Text range to display.</param>
            <param name="projectFile">Project file with given text range</param>
            <param name="highlightedRanges">Additional ranges that should be displayed</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.Show(JetBrains.ProjectModel.IProjectFile,System.Collections.Generic.IList{JetBrains.DocumentModel.DocumentRange})">
            <summary>
            Displays file except namespaces with all necessary features.
            </summary>
            <param name="projectFile">File to display.</param>
            <param name="highlightedRanges">Additional ranges that should be displayed</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.ShowDefaultMessage">
            <summary>
            Displays default message about code panel.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.GetCodePanelRange(JetBrains.DocumentModel.DocumentRange)">
            <summary>
            TODO: temporary method?
            </summary>
            <param name="realDocumentRange"></param>
            <returns></returns>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Tree.CodePreview.CodePanel.CodePanelChanged">
            <summary>
            Fired when contents of code panel begin to display new code.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Tree.GroupingManagement.GroupingManager.GetGroupings``1(JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptorBase)">
            <summary>
            Collects a collection of providers of a specified type and aggregates all grouping from them
            </summary>
            <typeparam name="TItem">the type of items from descriptor</typeparam>
            <returns></returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.TypingAssist.IActionContext.ActionId">
            <summary>
            Gets the character that were typed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.TypingAssist.SkippingTypingAssist">
            <summary>
            This typing assist skips (overtypes) string that is set in the document data by code completion or other typing assist.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistBase.IsTypingAssistAvailable(JetBrains.TextControl.ITextControl)">
            <summary>
            Is typing assist available in the current state of the TextControl
            </summary>
            <param name="textControl"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.TypingAssistForCLikeLanguage`2.GetValidSplitOffset(System.String,JetBrains.ReSharper.Psi.Parsing.TokenNodeType,System.Int32)">
            <param name="str">String literal, including opening and ending double-quotes</param>
            <param name="offset">Current offset in literal</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedDeclarations(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield break
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetRelatedAndFilterHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default: yield return declaration
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsHidden(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Works on auto-generated code-behind classed. By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsCodeBehindClass(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            By default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsUserTextDeclaration(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Works on auto-generated type members. By default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanContainSeveralClasses(JetBrains.ReSharper.Psi.IPsiSourceFile)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanImplementInterfaces(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanHaveConstructors(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassCanBeChanged(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.SuperClassNameMustBeFull(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetNamespaceForElementsMovedToExternalScope(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - typeElement.GetContainingElement&lt;INamespaceDeclaration&gt;(false);
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetFolderForElementsMovedToExternalScope(JetBrains.ProjectModel.IProjectFile,System.String,JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - projectFile.Location.Directory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetPrettyName(JetBrains.ReSharper.Psi.Tree.ITypeDeclaration,System.Boolean)">
            <summary>
            Default - element.DeclaredName
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetDocumentRangeForPartiallyUnmappedNode(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
            Default - InvalidRange
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.IsOperationPossibleOnUnmappedRange(JetBrains.ReSharper.Psi.ITreeRange)">
            <summary>
            Default - false
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.CanDeclarationBeOverloaded(JetBrains.ReSharper.Psi.Tree.IDeclaration)">
            <summary>
            Default - true
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.DefaultFileTypeSpecificOwnerUtil.GetMvcViewWithModelBaseTypes">
            <summary>
            Default - empty
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclaration">
            <summary>
            Returns target declaration. 
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.DataProviders.CreateNewFileTarget.GetTargetDeclarationFile">
            <summary>
            Returns target declaration file
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.GetVariableResult(System.String)">
            <summary>
            Gets variable result by its name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession.IsFinished">
            <summary>
            Returns value indicating whether the template result is finished 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression">
            <summary>
            A variable evaluation expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.EvaluateQuickResult(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates quick result for expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.HandleExpansion(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Execute custom action on expanding this expression
            </summary>
            <returns><c>true</c> if all neccessary actions have been taken or <c>false</c> to proceed with normal <see cref="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)"/> procedure</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.GetLookupItems(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Evaluates list of lookup items
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig">
            <summary>
            FileMaskScopeConfig
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.FileMaskScopeConfig.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl">
            <summary>
            ScopeSelectorControl
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog">
            <summary>
            ScopeSelectorDialog
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Scope.ScopeSelectorDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.AutomaticCodeCompletionStrategyEx.MatchText(JetBrains.ReSharper.Feature.Services.CodeCompletion.IAutomaticCodeCompletionStrategy,JetBrains.TextControl.ITextControl,System.Int32,System.Func{System.String,System.Boolean},System.Boolean)">
            <summary>
            Matches text to the left of the caret.
            Length of string passed to <paramref name="matcher"/> is guaranted to be <paramref name="length"/>
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.Accept(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange,JetBrains.ReSharper.Feature.Services.Lookup.LookupItemInsertType,JetBrains.ReSharper.Feature.Services.Lookup.Suffix,JetBrains.ProjectModel.ISolution,System.Boolean)">
            <summary>
            Completes the item at the specified range.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Util.TemplateLookupItem.GetVisualReplaceRange(JetBrains.TextControl.ITextControl,JetBrains.Util.TextRange)">
            <summary>
            Gets visual replace range
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager">
            <summary>
            Maintains layouters per text controls.
            // TODO: when we got text control components, make layouters text control components, and drop this component altogether.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.myMapTextControlToLayouters">
            <summary>
            Demand-created, destroyed when the text control is closed.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.GetForTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the collection of text controls, from which you should select the one you want the layouters for.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls">
            <summary>
            Gets the collection of text controls out of which you can get a layouter for the specific text control.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls">
            <summary>
            Implements the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.LayoutersForTextControls.Item(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets an object that will create the layouters for the given text control.
            Note: do not store the instance you get, because it may expire. You should get a new instance thru this indexer each time you need it.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType">
            <summary>
            Represents an unresolved type name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Candidates">
            <summary>
            Gets collection of possible resolution candidates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Psi.UnresolvedDeclaredType.Resolution">
            <summary>
            Gets or sets resolution for this unresolved type
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.SelectEmbracingConstructUtil.TryFindRangeSeparatedByEmptyLines``1(JetBrains.ReSharper.Psi.Tree.ITreeNode,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean},System.Func{JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Boolean})">
            <summary>
            Try to find a group of statements separated by blank lines
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.ISelectedTreeRange">
            <summary>
            If an ISelectedRange in implemented on a PSI it should imlement this interface in order to be used in combined features 
            i.e. ASP extend selection
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.IImplicitReference">
            <summary>
            Implicit references, which target determined by context (not always in this file), not owner itself
            Also, <see cref="M:JetBrains.ReSharper.Psi.Resolve.IReference.BindTo(JetBrains.ReSharper.Psi.IDeclaredElement)"/> has no effect on this reference
            </summary>
            <remarks>Such reference will be always selected in <see cref="M:JetBrains.ReSharper.Feature.Services.Util.CandidatesUtil.SelectGoodReferences(System.Collections.Generic.ICollection{JetBrains.ReSharper.Psi.Resolve.IReference})"/></remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Util.ImageUtil.AdjustBrightness(System.Drawing.Image,System.Int32)">
            <summary>
            changes the brightness of an image.
            </summary>
            <param name="image">input image</param>
            <param name="value">brightness value, should be between -255 and 255</param>
            <returns>output image</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionType">
            <summary>
            Defines possible code completion types
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.CodeCompletionUtil.IterateStaticMembers(JetBrains.ReSharper.Feature.Services.CodeCompletion.Infrastructure.CodeCompletionContext,JetBrains.ReSharper.Psi.IDeclaredType,JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Psi.Resolve.ISubstitution,JetBrains.ReSharper.Psi.Tree.ITreeNode,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.ExpectedTypes.ExpectedType},System.Func{JetBrains.ReSharper.Psi.ITypeMember,System.Boolean})">
            <summary>
            Enumerate static members in given type element, which type is given,
            and which are visible from given source point
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager">
            <summary>
            Tracks statistics of choosing members in completion.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.ItemStatistics.#ctor(JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList)">
            <summary>
            API for settings upgrade...
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.myPriorities">
            <summary>
            Maps items to their priorities
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            API for setttings upgrade...
            </summary>
            <param name="priorities"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.CodeCompletion.PreferencePolicy.CompletionStatisticsManager.PriorityIntList.IncreasePriority(System.Int32)">
            <summary>
            Increases priority of the specified item by 1
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.CodeCompletion.NamesCorellationUtil">
            <summary>
            Completion policy for smart completion. Takes into account name corellation, etc.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.GetBlockComment(JetBrains.ReSharper.Psi.Parsing.CachingLexer)">
            <summary>
            Identifies block comment range, even if it is not a single token.
            Lexer pos will be saved and resored by the caller
            </summary>
            <param name="lexer"></param>
            <returns>Invalid range if lexer is not positioned in block comment</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Comment.IBlockCommentActionProvider.NestedStartBlockCommentMarker">
            <summary>
            string used to replace nested block comments to make the code syntactically correct while commenting
            and restore comments while uncommenting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext">
            <summary>
            Context in which generation occures
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Kind">
            <summary>Gets context kind, like constructor, property, delegating members, etc</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language">
            <summary>Language in which generation should occur</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.PresentationLanguage">
            <summary>
            Language in which generated items should be presented, may be different
            from <see cref="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Language"/> (codebehind language, for example)
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Root">
            <summary>Root of the operation, usually ITypeDeclaration</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Anchor">
            <summary>Anchor of the operation, place where to put elements</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.ProvidedElements">
            <summary>Elements provided as possible sources for generation (shown on first page)</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.InputElements">
            <summary>Elements selected by user as source of generation</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.OutputElements">
            <summary>Elements built by builder</summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorContext.Options">
            <summary>Generation options</summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Generate.GeneratorWorkflowBase.Generate(System.String,JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Generates code and commits transaction (for non-advanced scenario)
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Generate.IGeneratorOptionsProvider">
            <summary>
            Provides options for user
            </summary>
            <remarks>
            Global options are displayed on first page and applies to every element (or is default value)
            Element options are specific settings for each elements, available on Advanced page
            </remarks>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myActiveTextControl">
            <summary>
            Text control in which hyperlinks are currently enabled.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myClickCommit">
            <summary>
            Makes sure we async-run no more than one click.
            Makes sure we cancel a pending click when we're turned off / closed / etc.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myHyperlinkLifetimesSequence">
            <summary>
            Alive while a hyperlink is visible, also ensures the prev hyperlink is not visible when a new one is created.
            Must be guarded and readlocked.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.myCurrentStateLifetime">
            <summary>
            Terminated when exiting current state.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnHoverDocumentsCommitted">
            <summary>
            Async-commit requested by HoverChoosing has completed. Get the actual hyperlink object.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.OnMouseOrKeyboardMove(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Mouse moved or key state changed.
            </summary>
            <param name="args">Params. <c>Null</c> means mouse not in text control.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.TryEnterHoverState(JetBrains.TextControl.TextControlMouseEventArgs)">
            <summary>
            Enters the state if there're providers for the current keystate.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.State.Idle">
            <summary>
            Not active. No highlighting.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Hyperlink.HyperlinkManager.StubbornAsyncCommitClient">
            <summary>
            Retries async commit on interruption until it completes.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Intentions.UpdateArgumentsDelegate">
            <summary>
            Provides new arguments for existing attribute
            </summary>
            <param name="instance">existing attribute  info</param>
            <returns>desired attribute arguments or null to ignore</returns>    
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.MutliDocumentNameExpression">
            <summary>
            Name expression. Updates not only declaration name but source reference.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Intentions.Impl.LanguageSpecific.IntentionLanguageSpecific.ToExtensionMethod(JetBrains.ReSharper.Psi.Tree.ITypeMemberDeclaration)">
            <summary>
            Makes method extension method.
            For C#: add this to first parameters
            For VB: add ExtensionAttribute to method declaration
            
            No any checks (ex. class and method are static) are performed
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.ReferenceSorter">
            <summary>
            Sorts references for transforming them in correct order
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Title">
            <summary>
            Gets UI title
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ContextOptionsUI">
            <summary>
            Gets control presenting context options UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.TemplateContext">
            <summary>
            Gets template context matching current settings in the UI
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid">
            <summary>
            Gets flag indicating whether the UI is valid
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.ValidChanged">
            <summary>
            Event which is raised when the <see cref="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.ITemplateContextUI.Valid"/> property changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Context.TemplateAcceptanceContext">
            <summary>
            Represents neccessary context for accepting different kind of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm">
            <summary>
            Summary description for EnterNameForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.EnterNameForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm">
            <summary>
            Summary description for FileTemplatesContextForm.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesContextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UidUsed(System.Guid)">
            <summary>
            Checks if the specified uid is already used for a template of the family
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.PredefinedStorage">
            <summary>
            Gets storage of predefined templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.UserStorage">
            <summary>
            Gets storage of user templates
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.ITemplateFamily.TemplateStorages">
            <summary>
            Gets all registered template storages
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.FileTemplates.FileTemplatesManager.CreateFileFromTemplate(System.String,JetBrains.ProjectModel.IProjectFolder,JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,System.Action{JetBrains.ProjectModel.IProjectFile},System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Creates file with specified name in target folder using file template.
            </summary>
            <param name="fileNameNoExtension">If name is null or empty, dialog to create name is shown</param>
            <param name="targetFolder"></param>
            <param name="template"></param>
            <param name="setFileProperties"></param>
            <param name="init"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.Hotspot">
            <summary>
            Represents a hot spot in live template expansion
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext">
            <summary>
            Implements the IExpressionContext interface
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext">
            <summary>
            Expression evaluation context
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotContext.HotspotSession">
            <summary>
            Gets the template result
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionContext">
            <summary>
            Implementation of ITemplateContext
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext">
            <summary>
            Context where a template can be executed
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.Solution">
            <summary>
            Gets the project a template is executed in
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext.StartOffset">
            <summary>
            Gets the position in editor a template is executed at
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController">
            <summary>
            Template result context based on template field infos
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionExecutor">
            <summary>
            Controller for the insert live template action
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.HotspotSessionUi">
            <summary>
            Represents a live template session
            </summary>  
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotService">
            <summary>
            Language-specific hotspot service
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController">
            <summary>
            Template result context based on template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Finalize(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSessionContext,JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.TerminationType)">
            <summary>
            Finalizes the template
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.LiveTemplateHotspotSessionController.Init(System.String,JetBrains.TextControl.ITextControl,System.Int32@,JetBrains.ProjectModel.ISolution,System.String,System.Collections.Generic.List{JetBrains.Util.Pair{JetBrains.Util.TextRange,System.Collections.Generic.IList{JetBrains.ReSharper.Psi.IDeclaredElement}}})">
            <summary>
            Initializes within a context
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.NameSuggestionsExpression.Serialize">
            <summary>
            Serializes the expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.CreateHotspotSessionFromTemplate(System.String,JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template,JetBrains.ProjectModel.ISolution,JetBrains.TextControl.ITextControl,System.Action{JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotSession})">
            <summary>
            Executes template with inserting text
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.LiveTemplates.LiveTemplatesManager.GetPrefix(JetBrains.DocumentModel.IDocument,System.Int32)">
            <summary>
            Generic template prefix (not context specific)
            </summary>
            <param name="document"></param>
            <param name="caretOffset"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue">
            <summary>
            A parameter of live template macro
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.IMacroParameterValue.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter">
            <summary>
            A string constant expression
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.ConstantMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.MacroParser">
            <summary>
            Parses live template macros 
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter">
            <summary>
            Expression which is evaluated to a variable value
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Macros.VariableMacroParameter.GetText(JetBrains.ReSharper.Feature.Services.LiveTemplates.Hotspots.IHotspotContext)">
            <summary>
            Gets parameter text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.QuickLists.QuickList">
            <summary>
            Quick list implementation
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Storages.UserStorage">
            <summary>
            Storage for user-level templates
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Accepts(JetBrains.ProjectModel.IProject)">
            <summary>
            Checks if a project is supported
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Support.IFileTemplatesSupport.Name">
            <summary>
            Gets name
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.Template.Text">
            <summary>
            Gets the template text
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateKind">
            <summary>
            Enumerates possible kinds of templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateTokenType">
            <summary>
            Describes tokens which are specific for templates
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.LiveTemplates.Templates.TemplateUtil">
            <summary>
            Contains utility methods for template execution
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker">
            <summary>
            Tracks keyboard commands and maintains prefix
            </summary>
        </member>
        <member name="E:JetBrains.ReSharper.Feature.Services.Lookup.ContextTracker.ContextChanged">
            <summary>
            Event is raised when the tracker changes
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters">
            <summary>
            A class that implements the coupled layouters for the lookup window and parameter info tooltip.
            Create a new layouter through the <see cref="P:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayoutersManager.TextControls"/> property.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.OptionParameterInfoBelow">
            <summary>
            Whether the default parameter info disposition is above or below the line.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.TextControl">
            <summary>
            Gets the text controls instance for which the layouters can be created.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControl)">
            <summary>
            Creates an instance, registers it in the list.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLookupTooltipLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the lookup-list-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateParameterInfoLayouter(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a layouter for the text-editor-based parameter info window.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.GetAvailDispositions(JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds)">
            <summary>
            Gets the dispositions that can be used for running each of the layouters.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.CreateLayouter(JetBrains.DataFlow.Lifetime,JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds,JetBrains.UI.IAnchoringRect,System.Boolean)">
            <summary>
            Creates any of the layouters.
            </summary>
            <param name="lifetime"></param>
            <param name="id">Which layouter to create.</param>
            <param name="anchor">Anchor for the layouter.</param>
            <param name="bAllowNonStrictRecursion">With Option Strict OFF, sometimes the disposal of an already-used layouter causes the whole instance to dispose. In this case, make a recursive call over a new instance. This param prevents from infinite recursion.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.DirtyHackLookupAndParameterInfoDispositions">
            <summary>
            Dirty Hack for the Parameter Info and Lookup tooltips.
            Initially, ParamInfo is displayed below the line, which occupies the space of the lookup window. As lookup shows, move param-info up.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.UpdateLayout">
            <summary>
            Recalculates the layout.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.AnchoringRect">
            <summary>
            Anchoring rectangles for the coupled layouters.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.StickyDisposition">
            <summary>
            Stores the sticky dispositions for layouting each of the entities.
            This makes sure that if the parameter info has been switched up after completion was shown wouldn't jump back down after completion is closed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.ActiveLayouter.Layouter">
            <summary>
            The coupled layouters controlled by this instance.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupAndParameterInfoLayouters.LayouterIds">
            <summary>
            IDs for the layouters and anchors.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupHighlightingTracker">
            <summary>
            Tracks replacement highlighting
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.LookupUtil">
            <summary>
            Contains utility methods for lookup management
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Lookup.Suffix.Playback(JetBrains.TextControl.ITextControl)">
            <summary>
            Emulates typing of the suffix in given text control
            </summary>
            <param name="textControl"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Lookup.VariableComparer">
            <summary>
            Comparer which prefers local variables to fields and properties. 
            Note that for preference policy the "0" return value doesn't
            mean that items are equal - it means that the comparer can say nothing about the items.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.MatchingBrace.ISimpleMatchingBraceProvider">
            <summary>
            Provides token-level information about matching braces
            </summary>
            <remarks>
            <see cref="T:System.Collections.Generic.IComparer`1"/> must be implemented according to the following rules:
            <list type="disc">
              <item>It is defined on brace pairs, result for open and close brace of the same pair is the same</item>
              <item>If one brace pair is "greater" than another that means that balance of "lesser" brace pair outside of "greater" brace pair doesn't count inside the "greater" brace pair</item>
            </list>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher">
            <summary>
            A preofix matcher that features an additional freehand filter not based on the regex.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.Filtering.FilteringPrefixMatcher.Matcher">
            <summary>
            Gets the underlying matcher.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Argument">
            <summary>
            Argument under cursor
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.NamedArguments">
            <summary>
            Each array element contains argument name (if argument is named) or null or empty otherwise.
            Length of the array equals to number of arguments or 0.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.DefaultCandidate">
            <summary>
            Candidate, that is resolved, -1 otherwise
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Candidates">
            <summary>
            Candidates available
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContext.Range">
            <summary>
            Invocation range. EndOffset == -1 if no right bound specified
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.IsIntellisenseEnabled(JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Quick check whether intellisense is enabled by settings. Necessary to fallback to Visual Studio intellisense if desabled.
            </summary>
            <param name="solution">Current solution</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.CreateContext(JetBrains.ProjectModel.ISolution,JetBrains.DocumentModel.IDocument,System.Int32,System.Int32,System.Char,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Creates parameter info context.
            </summary>
            <param name="solution">Current solution</param>
            <param name="document">Current document</param>
            <param name="caretOffset">Caret position in the document</param>
            <param name="expectedLParenthOffset">Expected position of closing parenthesis if any. Used to close parameter info if caret moved out of arguments range</param>
            <param name="invocationChar">Character that triggered parameter info</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>Parameter info context or null if cannot create</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ShouldPopup(JetBrains.DocumentModel.IDocument,System.Int32,System.Char,JetBrains.ProjectModel.ISolution,JetBrains.Application.Settings.IContextBoundSettingsStore)">
            <summary>
            Checks whether parameter info should pop up when specific character is typed in the document
            </summary>
            <param name="document">Current document</param>
            <param name="caretOffset">Caret position in the document</param>
            <param name="c">Character typed</param>
            <param name="solution">Current solution</param>
            <param name="contextBoundSettingsStore">Settings store bound to current context</param>
            <returns>True if should pop up</returns>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.Language">
            <summary>
            Language for which the factory is applicable. Used for quick check of availability
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.IParameterInfoContextFactory.ImportantChars">
            <summary>
            Characters that may trigger automatic popup of parameter info provided by the factory
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.FilterOut(System.Int32)">
            <summary>
            Filters out an invocation
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Argument">
            <summary>
            Gets number of parameter we're standing at
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoContextBase.Range">
            <summary>
            Gets the left parenthesis offset
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.ParameterInfoPopupController">
            <summary>
            Interface for component which controls automatic parameter info popup
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings">
            <summary>
            This settings class is obsolete. Use <see cref="T:JetBrains.ReSharper.Feature.Services.ParameterInfo.Settings.ParameterInfoSettingsKey"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.ShowOneCandidate">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.DelegatesAsLambdas">
            <summary>
            Gets or sets flag indicating whether show one candidatein the popup or all.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.UseArrowsForSignatureNavigation">
            <summary>
            Gets or sets flag indicating whether use arrows instead of Control+P in parameter info popup.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupOn">
            <summary>
            Gets or sets flag indicating whether automatic parameter info popup is enabled.
            </summary> 
        </member>
        <member name="F:JetBrains.ReSharper.Feature.Services.ParameterInfo.SettingsUpgrade.ParameterInfoSettings.AutopopupDelay">
            <summary>
            Gets or sets delay to automatically show parameter info popup in.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.ParameterInfo.TypeArgumentCandidate.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.SelectEmbracingConstruct.DotSelection`1.GetParentInternal(JetBrains.ReSharper.Psi.Tree.ITokenNode)">
            <summary>
            Implements special processing of some tokens
            </summary>
            <param name="tokenNode"></param>
            <returns>null, if no special processing required</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.TypingAssist.BracketMatcher.FindMatchingBracket(JetBrains.ReSharper.Psi.Parsing.CachingLexer,System.Int32@)">
            <summary>
            Try to find the corresponding matching bracket for the given
            </summary>
            <param name="cachingLexer">Caching lexer positioned at the source bracket</param>
            <param name="pos">position of paired bracket (or -1 if none)</param>
            <returns>true if matching bracket was found. If returns false, the pos may contain position of incorrect bracket</returns>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Util.CodeInsightUtil">
            <summary>
            Contains utility methods for code insight features
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory">
            <summary>
            Performs validation of <see cref="T:JetBrains.DataFlow.IProperty`1"/> in the aspect of valid language names, and such.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.Pointers.IDeclaredElementPointer{JetBrains.ReSharper.Psi.IDeclaredElement},System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.IDeclaredElement,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Feature.Services.Validators.PropertyValidatorFactory.CreateNewNameValidator(JetBrains.DataFlow.IProperty{System.String},JetBrains.ReSharper.Psi.PsiLanguageType,System.String)">
            <summary>
            Checks whether the string property value is a valid new name for an identifier.
            </summary>
        </member>
    </members>
</doc>
