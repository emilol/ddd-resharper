<?xml version="1.0" encoding="utf-8"?>
<assembly name="System.Data.Linq, Version=3.5.0.0">
  <member name="M:LinqToSqlShared.Mapping.DatabaseMapping.GetFunction(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:LinqToSqlShared.Mapping.DatabaseMapping.GetTable(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:LinqToSqlShared.Mapping.DatabaseMapping.GetTable(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:LinqToSqlShared.Mapping.DatabaseMapping.IsType(LinqToSqlShared.Mapping.TypeMapping,System.Type)">
    <parameter name="map">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:LinqToSqlShared.Mapping.MappingSystem.IsSupportedDiscriminatorType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:LinqToSqlShared.Mapping.MappingSystem.IsSupportedIdentityType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Binary.ToArray">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
    <parameter name="array">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    <parameter name="array">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.ChangeConflictSession.RefreshContext">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.AppendDeleteText(System.Data.Linq.TrackedObject,System.Text.StringBuilder)">
    <parameter name="appendTo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.AppendInsertText(System.Data.Linq.TrackedObject,System.Text.StringBuilder)">
    <parameter name="appendTo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.AppendUpdateText(System.Data.Linq.TrackedObject,System.Text.StringBuilder)">
    <parameter name="appendTo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.CreateChangeDirector(System.Data.Linq.DataContext)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.Delete(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.DynamicDelete(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.DynamicInsert(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.DynamicUpdate(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.Insert(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.AutoSyncMembers(System.Object[],System.Data.Linq.TrackedObject,System.Data.Linq.ChangeDirector.StandardChangeDirector.UpdateType)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.CreateAutoSync(System.Collections.Generic.List{System.Data.Linq.Mapping.MetaDataMember},System.Linq.Expressions.Expression)">
    <parameter name="membersToSync">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetAutoSyncMembers(System.Data.Linq.Mapping.MetaType,System.Data.Linq.ChangeDirector.StandardChangeDirector.UpdateType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="metaType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetDeleteCommand(System.Data.Linq.TrackedObject)">
    <parameter name="tracked">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetDeleteVerificationCommand(System.Data.Linq.TrackedObject)">
    <parameter name="tracked">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetInsertCommand(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetMemberExpression(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetUpdateCheck(System.Linq.Expressions.Expression,System.Data.Linq.TrackedObject)">
    <parameter name="tracked">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.StandardChangeDirector.GetUpdateCommand(System.Data.Linq.TrackedObject)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="tracked">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeDirector.Update(System.Data.Linq.TrackedObject)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.#ctor(System.Data.Linq.CommonDataServices,System.Data.Linq.DataContext)">
    <parameter name="services">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.BuildDependencyOrderedList(System.Data.Linq.TrackedObject,System.Collections.Generic.List{System.Data.Linq.TrackedObject},System.Collections.Generic.Dictionary{System.Data.Linq.TrackedObject,System.Data.Linq.ChangeProcessor.VisitState})">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="list">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="visited">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.CheckForInvalidChanges(System.Data.Linq.TrackedObject)">
    <parameter name="tracked">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.ClearForeignKeyReferences(System.Data.Linq.TrackedObject)">
    <parameter name="to">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.ClearForeignKeysHelper(System.Data.Linq.Mapping.MetaAssociation,System.Object)">
    <parameter name="assoc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.CreateChangeConflictException(System.Int32,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.EdgeMap.Add(System.Data.Linq.Mapping.MetaAssociation,System.Data.Linq.TrackedObject,System.Data.Linq.TrackedObject)">
    <parameter name="from">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="assoc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.ChangeProcessor.EdgeMap.Item(System.Data.Linq.Mapping.MetaAssociation,System.Data.Linq.TrackedObject)">
    <parameter name="assoc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="from">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.GetChangeSet">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.GetChangeText">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.GetOrderedList">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.GetOtherItem(System.Data.Linq.Mapping.MetaAssociation,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="assoc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.HasAssociationChanged(System.Data.Linq.Mapping.MetaAssociation,System.Data.Linq.TrackedObject)">
    <parameter name="assoc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.ObserveUntrackedObjects(System.Data.Linq.Mapping.MetaType,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="visited">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.PostProcessUpdates(System.Collections.Generic.List{System.Data.Linq.TrackedObject},System.Collections.Generic.List{System.Data.Linq.TrackedObject})">
    <parameter name="insertedItems">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="deletedItems">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.ReferenceMap.Add(System.Data.Linq.TrackedObject,System.Data.Linq.TrackedObject)">
    <parameter name="from">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.ChangeProcessor.ReferenceMap.Item(System.Data.Linq.TrackedObject)">
    <parameter name="from">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.SendOnValidate(System.Data.Linq.Mapping.MetaType,System.Data.Linq.TrackedObject,System.Data.Linq.ChangeAction)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.TrackUntrackedObjects(System.Data.Linq.Mapping.MetaType,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="visited">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeProcessor.ValidateAll(System.Collections.Generic.IEnumerable{System.Data.Linq.TrackedObject})">
    <parameter name="list">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.CreateChangeTracker(System.Data.Linq.CommonDataServices,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.FastTrack(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.GetTrackedObject(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.IsTracked(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.FastTrack(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.GetInterestingObjects">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.GetTrackedObject(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.IsTracked(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.StopTracking(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.Track(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.ReadOnlyChangeTracker.Track(System.Object,System.Boolean)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.Attach(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.IsFastTracked(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.OnPropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
    <parameter name="sender">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.PromoteFastTrackedObject(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.PromoteFastTrackedObject(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.#ctor(System.Data.Linq.ChangeTracker.StandardChangeTracker,System.Data.Linq.Mapping.MetaType,System.Object,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="current">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.#ctor(System.Data.Linq.ChangeTracker.StandardChangeTracker,System.Data.Linq.Mapping.MetaType,System.Object,System.Object,System.Boolean)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="current">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.AssignMember(System.Object,System.Data.Linq.Mapping.MetaDataMember,System.Object)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.ConvertToPossiblyModified(System.Object)">
    <parameter name="originalState">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.HasDeferredLoader(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="deferredMember">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.InitializeDeferredLoader(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="deferredMember">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.StandardTrackedObject.IsModifiedMember(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.Track(System.Data.Linq.Mapping.MetaType,System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object},System.Boolean,System.Int32)">
    <parameter name="mt">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="visited">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.Track(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StandardChangeTracker.TypeFromDiscriminator(System.Data.Linq.Mapping.MetaType,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="root">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.StopTracking(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.Track(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ChangeTracker.Track(System.Object,System.Boolean)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.#ctor(System.Data.Linq.DataContext,System.Data.Linq.Mapping.MetaModel)">
    <parameter name="context">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.BuildKeyExpressions(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyMembers">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.#ctor(System.Data.Linq.Mapping.MetaDataMember,System.Data.Linq.CommonDataServices)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.CreateDeferredSource(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.CreateDeferredSource(System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.DeferredSource.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.Execute(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.ExecuteKeyQuery(System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.ExecuteKeys(System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.HasNullForeignKey(System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.DeferredSourceFactory`1.TryGetCachedObject(System.Object[],`0@)">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetCachedObject(System.Data.Linq.Mapping.MetaType,System.Object[])">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetCachedObject(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetCachedObjectLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetDataMemberQuery(System.Data.Linq.Mapping.MetaDataMember,System.Linq.Expressions.Expression[])">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetDeferredSourceFactory(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetForeignKeyValues(System.Data.Linq.Mapping.MetaAssociation,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="association">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetKeyFromPredicate(System.Data.Linq.Mapping.MetaType,System.Collections.Generic.Dictionary{System.Data.Linq.Mapping.MetaDataMember,System.Object},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keys">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetKeysFromPredicate(System.Data.Linq.Mapping.MetaType,System.Collections.Generic.Dictionary{System.Data.Linq.Mapping.MetaDataMember,System.Object},System.Linq.Expressions.Expression)">
    <parameter name="keys">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetKeyValues(System.Data.Linq.Mapping.MetaType,System.Linq.Expressions.LambdaExpression)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="predicate">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetKeyValues(System.Data.Linq.Mapping.MetaType,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetObjectByKey(System.Data.Linq.Mapping.MetaType,System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetObjectQuery(System.Data.Linq.Mapping.MetaType,System.Linq.Expressions.Expression[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.GetObjectQuery(System.Data.Linq.Mapping.MetaType,System.Object[])">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.InsertLookupCachedObject(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.IsCachedObject(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.OnEntityMaterialized(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.RemoveCachedObjectLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CommonDataServices.SendOnLoaded(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.ExecuteQuery(System.Data.Linq.DataContext,System.Object[])">
    <parameter name="context">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Invoke``2(``0)">
    <parameter name="arg0">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Invoke``3(``0,``1)">
    <parameter name="arg0">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Invoke``4(``0,``1,``2)">
    <parameter name="arg0">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.Invoke``5(``0,``1,``2,``3)">
    <parameter name="arg0">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.CompiledQuery.UseExpressionCompile(System.Linq.Expressions.LambdaExpression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
    <parameter name="connection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
    <parameter name="connection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.Linq.DataContext)">
    <parameter name="context">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
    <parameter name="fileOrServerOrConnection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
    <parameter name="fileOrServerOrConnection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="methodInfo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.CreateRefreshContext">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
    <parameter name="command">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="methodInfo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.GetChangeSet">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.GetChangeText">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.GetMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
    <parameter name="methodInfo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameters">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.GetQueryText(System.Linq.IQueryable)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.GetTable(System.Data.Linq.Mapping.MetaTable)">
    <parameter name="metaTable">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.GetTable``1">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataContext.Init(System.Object,System.Data.Linq.Mapping.MappingSource)">
    <parameter name="connection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.InitTables(System.Object)">
    <parameter name="schema">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.InitWithDefaultMapping(System.Object)">
    <parameter name="connection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataContext.ValidateTable(System.Data.Linq.Mapping.MetaTable)">
    <parameter name="metaTable">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.AssociateWithInternal(System.Linq.Expressions.LambdaExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.GetAssociationSubquery(System.Reflection.MemberInfo)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.GetLoadWithMemberInfo(System.Linq.Expressions.LambdaExpression)">
    <parameter name="lambda">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.IsPreloaded(System.Reflection.MemberInfo)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.Preload(System.Reflection.MemberInfo)">
    <parameter name="association">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.Searcher.MemberInfoOf(System.Linq.Expressions.LambdaExpression)">
    <parameter name="lambda">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.Subquery(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression)">
    <parameter name="association">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.ValidateSubqueryExpression(System.Linq.Expressions.LambdaExpression)">
    <parameter name="subquery">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataLoadOptions.ValidateSubqueryMember(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#ComponentModel#IListSource#GetList">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.DataQuery`1.System#Linq#IQueryable#ElementType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.DataQuery`1.System#Linq#IQueryable#Provider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DataQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Data.Linq.EntitySet{`0},System.Boolean)">
    <parameter name="es">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
    <parameter name="array">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Enumerable.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Enumerable.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.EntitySet`1.Enumerator.Current">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.EntitySet`1.Enumerator.System#Collections#IEnumerator#Current">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.GetUnderlyingValues">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
    <parameter name="array">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.UnderlyingValues.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySet`1.UnderlyingValues.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.EntitySetBindingList`1.#ctor(System.Collections.Generic.IList{`0},System.Data.Linq.EntitySet{`0})">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="data">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Error.ArgumentNull(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ArgumentOutOfRange(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ArgumentTypeHasNoIdentityKey(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotAddChangeConflicts">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotAttachAddNonNewEntities">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotAttachAlreadyExistingEntity">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotAttachAsModifiedWithoutOriginalState">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotChangeInheritanceType(System.Object,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotPerformCUDOnReadOnlyTable(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotPerformOperationDuringSubmitChanges">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotPerformOperationForUntrackedObject">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotPerformOperationOutsideSubmitChanges">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotRemoveChangeConflicts">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CannotRemoveUnattachedEntity">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CantAddAlreadyExistingItem">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ColumnMappedMoreThanOnce(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CouldNotAttach">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CouldNotConvert(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CouldNotGetTableForSubtype(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CouldNotRemoveRelationshipBecauseOneSideCannotBeNull(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.CycleDetected">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.DataContextCannotBeUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.DbGeneratedChangeNotAllowed(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.DeferredLoadingRequiresObjectTracking">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.EntityIsTheWrongType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.EntitySetAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.EntitySetDataBindingWithAbstractBaseClass(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.EntitySetDataBindingWithNonPublicDefaultConstructor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.EntitySetModifiedDuringEnumeration">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ExpectedQueryableArgument(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ExpectedUpdateDeleteOrChange">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.IdentityChangeNotAllowed(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.IncludeCycleNotAllowed">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.IncludeNotAllowedAfterFreeze">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.InconsistentAssociationAndKeyChange(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.InsertAutoSyncFailure">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.InvalidLoadOptionsLoadMemberSpecification">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.KeyIsWrongSize(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.KeyValueIsWrongType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.LoadOptionsChangeNotAllowedAfterQuery">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ModifyDuringAddOrRemove">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.NonEntityAssociationMapping(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.NotImplemented">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.NotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ObjectTrackingRequired">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.OptionsCannotBeModifiedAfterQuery">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.OriginalEntityIsWrongType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ProviderDoesNotImplementRequiredInterface(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.ProviderTypeNull">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.RefreshOfDeletedObject">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.SubqueryDoesNotSupportOperator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.SubqueryMustBeSequence">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.SubqueryNotAllowedAfterFreeze">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.SubqueryNotSupportedOn(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.SubqueryNotSupportedOnType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.TypeCouldNotBeAdded(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.TypeCouldNotBeRemoved(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.TypeCouldNotBeTracked(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.TypeIsNotEntity(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.TypeIsNotMarkedAsTable(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.UnableToDetermineDataContext">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.UnhandledBindingType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.UnhandledExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Error.UnrecognizedRefreshObject">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.IdentityManager.CreateIdentityManager(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.IdentityManager.Find(System.Data.Linq.Mapping.MetaType,System.Object[])">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.FindLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.InsertLookup(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.ReadOnlyIdentityManager.Find(System.Data.Linq.Mapping.MetaType,System.Object[])">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.ReadOnlyIdentityManager.FindLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.ReadOnlyIdentityManager.InsertLookup(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.ReadOnlyIdentityManager.RemoveLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.RemoveLike(System.Data.Linq.Mapping.MetaType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.GetKeyManager(System.Data.Linq.Mapping.MetaType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.IdentityCache.Find(System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.IdentityCache.FindLike(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.IdentityCache.InsertLookup(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.IdentityCache.RemoveLike(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.IdentityCache`2.Find(`1,`0@,System.Boolean)">
    <parameter name="key">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.IdentityManager.StandardIdentityManager.KeyManager.KeyType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.KeyManager`2.CreateKeyFromInstance(`0)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.KeyManager`2.TryCreateKeyFromValues(System.Object[],`1@)">
    <parameter name="values">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.MultiKey`2.Comparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
    <parameter name="y">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="x">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.MultiKey`2.Comparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
    <parameter name="x">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.IdentityManager.StandardIdentityManager.MultiKeyManager`3.Comparer">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.IdentityManager.StandardIdentityManager.SetCurrent(System.Data.Linq.Mapping.MetaType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaAssociation.#ctor(System.Data.Linq.Mapping.AttributedMetaDataMember,System.Data.Linq.Mapping.AssociationAttribute)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="attr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaDataMember.#ctor(System.Data.Linq.Mapping.AttributedMetaType,System.Reflection.MemberInfo,System.Int32)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaDataMember.CreateAccessor(System.Type,System.Object[])">
    <parameter name="accessorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaDataMember.MakeDeferredAccessors(System.Type,System.Data.Linq.Mapping.MetaAccessor,System.Data.Linq.Mapping.MetaAccessor@,System.Data.Linq.Mapping.MetaAccessor@,System.Data.Linq.Mapping.MetaAccessor@)">
    <parameter name="accessor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaDataMember.MakeMemberAccessor(System.Type,System.Reflection.MemberInfo,System.Data.Linq.Mapping.MetaAccessor)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="accessorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaFunction.#ctor(System.Data.Linq.Mapping.AttributedMetaModel,System.Reflection.MethodInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaFunction.GetMetaType(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaModel.#ctor(System.Data.Linq.Mapping.MappingSource,System.Type)">
    <parameter name="contextType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaModel.GetRoot(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaModel.GetTableNoLocks(System.Type)">
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaModel.IsUserFunction(System.Reflection.MethodInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaParameter.#ctor(System.Reflection.ParameterInfo)">
    <parameter name="parameterInfo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaTable.#ctor(System.Data.Linq.Mapping.AttributedMetaModel,System.Data.Linq.Mapping.TableAttribute,System.Type)">
    <parameter name="attr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.AttributedMetaType.Associations">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.AttributedMetaType.DerivedTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaType.InitSpecialMember(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedMetaType.ValidatePrimaryKeyMember(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedRootType.#ctor(System.Data.Linq.Mapping.AttributedMetaModel,System.Data.Linq.Mapping.AttributedMetaTable,System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.AttributedRootType.CreateInheritedType(System.Type,System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.EntityRefDefValueAccessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.EntityRefValueAccessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.EntitySetDefValueAccessor`2.GetValue(`0)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.AbstractClassAssignInheritanceDiscriminator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.ArgumentNull(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.ArgumentOutOfRange(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.BadFunctionTypeInMethodMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.BadKeyMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.BadStorageProperty(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CannotGetInheritanceDefaultFromNonInheritanceClass">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CouldNotCreateAccessorToProperty(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CouldNotFindElementTypeInModel(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CouldNotFindRequiredAttribute(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CouldNotFindRuntimeTypeForMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.CouldNotFindTypeFromMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.DatabaseNodeNotFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.DiscriminatorClrTypeNotSupported(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.EntityRefAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.ExpectedEmptyElement(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.IdentityClrTypeNotSupported(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.IncorrectAutoSyncSpecification(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.IncorrectNumberOfParametersMappedForMethod(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceCodeMayNotBeNull">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceCodeUsedForMultipleTypes(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceHierarchyDoesNotDefineDefault(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceSubTypeIsAlsoRoot(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceTypeDoesNotDeriveFromRoot(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceTypeHasMultipleDefaults(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InheritanceTypeHasMultipleDiscriminators(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InvalidDeleteOnNullSpecification(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InvalidFieldInfo(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.InvalidUseOfGenericMethodAsMappedFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.LinkAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MappedMemberHadNoCorrespondingMemberInType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MappingForTableUndefined(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MappingOfInterfacesMemberIsNotSupported(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MemberMappedMoreThanOnce(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MethodCannotBeFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.MismatchedThisKeyOtherKey(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.NoDiscriminatorFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.NonInheritanceClassHasDiscriminator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.NoResultTypesDeclaredForFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.NotImplemented">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.NotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.PrimaryKeyInSubTypeNotSupported(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.ProviderTypeNotFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.TooManyResultTypesDeclaredForFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.TwoMembersMarkedAsInheritanceDiscriminator(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.TwoMembersMarkedAsPrimaryKeyAndDBGenerated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.TwoMembersMarkedAsRowVersion(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnableToAssignValueToReadonlyProperty(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnableToResolveRootForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnexpectedElement(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnexpectedNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnhandledDeferredStorageType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnmappedClassMember(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnrecognizedAttribute(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Error.UnrecognizedElement(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.FieldAccessor.Accessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.FieldAccessor.Create(System.Type,System.Reflection.FieldInfo)">
    <parameter name="objectType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="fi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.InheritanceBaseFinder.FindBase(System.Data.Linq.Mapping.MetaType)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="derivedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.LinkDefValueAccessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.LinkValueAccessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedDataMember.#ctor(System.Data.Linq.Mapping.MetaType,System.Reflection.MemberInfo,LinqToSqlShared.Mapping.MemberMapping,System.Int32)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedDataMember.CreateAccessor(System.Type,System.Object[])">
    <parameter name="accessorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedDataMember.MakeDeferredAccessors(System.Type,System.Data.Linq.Mapping.MetaAccessor,System.Data.Linq.Mapping.MetaAccessor@,System.Data.Linq.Mapping.MetaAccessor@,System.Data.Linq.Mapping.MetaAccessor@)">
    <parameter name="accessor">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedDataMember.MakeMemberAccessor(System.Type,System.Reflection.MemberInfo,System.Data.Linq.Mapping.MetaAccessor)">
    <parameter name="accessorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedFunction.#ctor(System.Data.Linq.Mapping.MappedMetaModel,LinqToSqlShared.Mapping.FunctionMapping,System.Reflection.MethodInfo)">
    <parameter name="model">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="map">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="method">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedFunction.GetMetaType(LinqToSqlShared.Mapping.TypeMapping,System.Type)">
    <parameter name="tm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.#ctor(System.Data.Linq.Mapping.MappingSource,System.Type,LinqToSqlShared.Mapping.DatabaseMapping)">
    <parameter name="contextType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.FindType(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.FindType(System.String,System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.GetMethod(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.GetRootType(System.Type,LinqToSqlShared.Mapping.TypeMapping)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="rootMapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.GetTypeAndMethod(System.String,System.String@,System.String@)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.SearchForType(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedMetaModel.SearchForType(System.String,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedRootType.#ctor(System.Data.Linq.Mapping.MappedMetaModel,System.Data.Linq.Mapping.MappedTable,LinqToSqlShared.Mapping.TypeMapping,System.Type)">
    <parameter name="typeMapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedRootType.InitDerivedTypes(LinqToSqlShared.Mapping.TypeMapping)">
    <parameter name="typeMap">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedRootType.InitInheritedType(LinqToSqlShared.Mapping.TypeMapping,System.Data.Linq.Mapping.MappedType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="typeMap">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedTable.#ctor(System.Data.Linq.Mapping.MappedMetaModel,LinqToSqlShared.Mapping.TableMapping,System.Type)">
    <parameter name="mapping">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.MappedType.Associations">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MappedType.DerivedTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedType.InitSpecialMember(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappedType.ValidatePrimaryKeyMember(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
    <parameter name="dataContextType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
    <parameter name="dataContextType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAssociationImpl.AreEqual(System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaDataMember},System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaDataMember})">
    <parameter name="key1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="key2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaAssociationImpl.MakeKeys(System.Data.Linq.Mapping.MetaType,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mtype">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyFields">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
    <parameter name="method">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.Table">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MethodFinder.FindMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[])">
    <parameter name="argTypes">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.MethodFinder.FindMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Type[],System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="argTypes">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.PropertyAccessor.Accessor`3.GetValue(`0)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.PropertyAccessor.Accessor`3.SetValue(`0@,`1)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.PropertyAccessor.Create(System.Type,System.Reflection.PropertyInfo,System.Data.Linq.Mapping.MetaAccessor)">
    <parameter name="objectType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="pi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.SR.Culture">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.SR.GetObject(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.SR.GetString(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.SR.GetString(System.String,System.Object[])">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.AbstractClassAssignInheritanceDiscriminator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.BadFunctionTypeInMethodMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.BadKeyMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.BadStorageProperty(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.Strings.CannotGetInheritanceDefaultFromNonInheritanceClass">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.CouldNotCreateAccessorToProperty(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.CouldNotFindElementTypeInModel(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.CouldNotFindRequiredAttribute(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.CouldNotFindRuntimeTypeForMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.CouldNotFindTypeFromMapping(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.DatabaseNodeNotFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.DiscriminatorClrTypeNotSupported(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.Strings.EntityRefAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.ExpectedEmptyElement(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.IdentityClrTypeNotSupported(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.IncorrectAutoSyncSpecification(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.IncorrectNumberOfParametersMappedForMethod(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.Strings.InheritanceCodeMayNotBeNull">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceCodeUsedForMultipleTypes(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceHierarchyDoesNotDefineDefault(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceSubTypeIsAlsoRoot(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceTypeDoesNotDeriveFromRoot(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceTypeHasMultipleDefaults(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InheritanceTypeHasMultipleDiscriminators(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InvalidDeleteOnNullSpecification(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InvalidFieldInfo(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.InvalidUseOfGenericMethodAsMappedFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.Strings.LinkAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MappedMemberHadNoCorrespondingMemberInType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MappingForTableUndefined(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MappingOfInterfacesMemberIsNotSupported(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MemberMappedMoreThanOnce(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MethodCannotBeFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.MismatchedThisKeyOtherKey(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.NoDiscriminatorFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.NonInheritanceClassHasDiscriminator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.NoResultTypesDeclaredForFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.Strings.OwningTeam">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.PrimaryKeyInSubTypeNotSupported(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.ProviderTypeNotFound(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.TooManyResultTypesDeclaredForFunction(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.TwoMembersMarkedAsInheritanceDiscriminator(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.TwoMembersMarkedAsPrimaryKeyAndDBGenerated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.TwoMembersMarkedAsRowVersion(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnableToAssignValueToReadonlyProperty(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnableToResolveRootForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnexpectedElement(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnexpectedNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnhandledDeferredStorageType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnmappedClassMember(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnrecognizedAttribute(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.Strings.UnrecognizedElement(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.UnmappedDataMember.MakeMemberAccessor(System.Type,System.Reflection.MemberInfo)">
    <parameter name="accessorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.UnmappedType.GetInheritanceType(System.Type)">
    <parameter name="inheritanceType">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Mapping.UnmappedType.InheritanceRoot">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Mapping.UnmappedType.InheritanceTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.AssertEmptyElement(System.Xml.XmlReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.IsInNamespace(System.Xml.XmlReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.OptionalAttribute(System.Xml.XmlReader,System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="attribute">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.OptionalBoolAttribute(System.Xml.XmlReader,System.String,System.Boolean)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="attribute">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.OptionalNullableBoolAttribute(System.Xml.XmlReader,System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="attribute">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadAssociationMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadColumnMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadDatabaseMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadElementTypeMapping(LinqToSqlShared.Mapping.TypeMapping,System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadFunctionMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadParameterMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadReturnMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadTableMapping(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadTypeMapping(LinqToSqlShared.Mapping.TypeMapping,System.Xml.XmlReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ReadTypeMappingImpl(LinqToSqlShared.Mapping.TypeMapping,System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.RequiredAttribute(System.Xml.XmlReader,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="attribute">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingReader.ValidateAttributes(System.Xml.XmlReader,System.String[])">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="validAttributes">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="stream">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="url">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="xml">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.MemberChangeConflict.#ctor(System.Data.Linq.ObjectChangeConflict,System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="conflict">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="metaMember">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.#ctor(System.Data.Linq.ChangeConflictSession,System.Data.Linq.TrackedObject)">
    <parameter name="trackedObject">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.#ctor(System.Data.Linq.ChangeConflictSession,System.Data.Linq.TrackedObject,System.Boolean)">
    <parameter name="trackedObject">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.AreEqual(System.Byte[],System.Byte[])">
    <parameter name="a1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="a2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.AreEqual(System.Char[],System.Char[])">
    <parameter name="a1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="a2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.AreEqual(System.Data.Linq.Mapping.MetaDataMember,System.Object,System.Object)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.ObjectChangeConflict.HasMemberConflict(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Provider.BindingList.Create``1(System.Data.Linq.DataContext,System.Collections.Generic.IEnumerable{``0})">
    <parameter name="context">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Provider.DataBindingList`1.#ctor(System.Collections.Generic.IList{`0},System.Data.Linq.Table{`0})">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="data">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
    <parameter name="list">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SortableBindingList`1.PropertyComparer.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
    <parameter name="prop">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SortableBindingList`1.PropertyComparer.IsAllowable(System.Type)">
    <parameter name="t">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SortableBindingList`1.PropertyComparer.OkWithIComparable(System.Type)">
    <parameter name="t">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SortableBindingList`1.PropertyComparer.OkWithToString(System.Type)">
    <parameter name="t">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.CanBigJoin(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.Visitor.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.Visitor.VisitElement(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="elem">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.Visitor.VisitExists(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.Visitor.VisitMultiset(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="sms">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.BigJoinChecker.Visitor.VisitScalarSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.DbFormatter.Format(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.DbFormatter.Format(System.Data.Linq.SqlClient.SqlNode,System.Boolean)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentEmpty(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentNull(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentOutOfRange(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentTypeMismatch(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentWrongType(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ArgumentWrongValue(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.BadParameterType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.BadProjectionInSelect">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.BinaryOperatorNotRecognized(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotAggregateType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotAssignNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotAssignToMember(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotCompareItemsAssociatedWithDifferentTable">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotConvertToEntityRef(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotDeleteTypesOf(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotEnumerateResultsMoreThanOnce">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CannotMaterializeEntityType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CapturedValuesCannotBeSequences">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ClassLiteralsNotAllowed(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ClientCaseShouldNotHold(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ClrBoolDoesNotAgreeWithSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnCannotReferToItself">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnClrTypeDoesNotAgreeWithExpressionsClrType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnIsDefinedInMultiplePlaces(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnIsNotAccessibleThroughDistinct(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnIsNotAccessibleThroughGroupBy(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ColumnReferencedIsNotInScope(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ComparisonNotSupportedForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CompiledQueryAgainstMultipleShapesNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CompiledQueryCannotReturnType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ConstructedArraysNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ContextNotInitialized">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ConvertToCharFromBoolNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ConvertToDateTimeOnlyForDateTimeOrString">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotAssignSequence(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotConvertToPropertyOrField(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotDetermineCatalogName">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotDetermineDbGeneratedSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotDetermineSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotGetClrType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotGetSqlType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotHandleAliasRef(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CouldNotTranslateExpressionForReading(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CreateDatabaseFailedBecauseOfClassWithNoMembers(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CreateDatabaseFailedBecauseOfContextWithNoTables(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DatabaseDeleteThroughContext">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DeferredMemberWrongType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DidNotExpectAs(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DidNotExpectTypeBinding">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DidNotExpectTypeChange(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.DistributedTransactionsAreNotAllowed">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.EmptyCaseNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExceptNotSupportedForHierarchicalTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpectedBitFoundPredicate">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpectedClrTypesToAgree(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpectedNoObjectType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpectedPredicateFoundBit">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpectedQueryableArgument(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpressionNotDeferredQuerySource">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ExpressionNotSupportedForSqlServerVersion(System.Collections.ObjectModel.Collection{System.String})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="reasons">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.GeneralCollectionMaterializationNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.GroupingNotSupportedAsOrderCriterion">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.IifReturnTypesMustBeEqual(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.Impossible">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.IndexOfWithStringComparisonArgNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InfiniteDescent">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InsertItemMustBeConstant">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.IntersectNotSupportedForHierarchicalTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidConnectionArgument(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidDbGeneratedType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidFormatNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidGroupByExpression">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidGroupByExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidMethodExecution(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidOrderByExpression(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidProviderType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidReferenceToRemovedAliasDuringDeflation">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidReturnFromSproc(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.InvalidSequenceOperatorCall(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.LastIndexOfWithStringComparisonArgNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MappedTypeMustHaveDefaultConstructor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MathRoundNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MemberAccessIllegal(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MemberCannotBeTranslated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MemberCouldNotBeTranslated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MemberNotPartOfProjection(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MethodFormHasNoSupportConversionToSql(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MethodHasNoSupportConversionToSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.MethodNotMappedToStoredProcedure(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NoMethodInTypeMatchingArguments(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NonConstantExpressionsNotSupportedFor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NonConstantExpressionsNotSupportedForRounding">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NonCountAggregateFunctionsAreNotValidOnProjections(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NotImplemented">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.NotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ParameterNotInScope(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ParametersCannotBeSequences">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ProviderCannotBeUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ProviderNotInstalled(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.QueryOnLocalCollectionNotSupported">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.QueryOperatorNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.QueryOperatorOverloadNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ReaderUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.RequiredColumnDoesNotExist(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ResultTypeNotMappedToFunction(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SelectManyDoesNotSupportStrings">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SequenceOperatorsNotSupportedForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SimpleCaseShouldNotHold(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SkipIsValidOnlyOverOrderedQueries">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SkipNotSupportedForSequenceTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SkipRequiresSingleTableQueryWithPKs">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SprocsCannotBeComposed">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.SqlMethodOnlyForSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ToStringOnlySupportedForPrimitiveTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.TransactionDoesNotMatchConnection">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.TypeBinaryOperatorNotRecognized">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.TypeCannotBeOrdered(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.TypeColumnWithUnhandledSource">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnableToBindUnmappedMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnexpectedFloatingColumn">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnexpectedNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnexpectedSharedExpression">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnexpectedSharedExpressionReference">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnexpectedTypeCode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnhandledBindingType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnhandledExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnhandledMemberAccess(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnhandledStringTypeComparison">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnionDifferentMemberOrder">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnionDifferentMembers">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnionIncompatibleConstruction">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnionOfIncompatibleDynamicTypes">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnionWithHierarchy">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnmappedDataMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnrecognizedExpressionNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnrecognizedProviderMode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsafeStringConversion(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedDateTimeConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedDateTimeOffsetConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedNodeType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedStringConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedTimeSpanConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UnsupportedTypeConstructorForm(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.UpdateItemMustBeConstant">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.ValueHasNoLiteralInSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.VbLikeDoesNotSupportMultipleCharacterRanges">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.VbLikeUnclosedBracket">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.WrongDataContext">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Error.WrongNumberOfValuesInCollectionArgument(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpectNoFloatingColumns.VisitColumn(System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="col">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpectNoSharedExpressions.VisitSharedExpression(System.Data.Linq.SqlClient.SqlSharedExpression)">
    <parameter name="shared">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpectNoSharedExpressions.VisitSharedExpressionRef(System.Data.Linq.SqlClient.SqlSharedExpressionRef)">
    <parameter name="sref">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpectRationalizedBooleans.ConvertPredicateToValue(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="predicateExpression">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpectRationalizedBooleans.ConvertValueToPredicate(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="bitExpression">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
    <parameter name="binding">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="initializer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="iv">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
    <parameter name="lambda">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="init">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="assignment">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="init">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="binding">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="binding">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="nex">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="na">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="p">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
    <parameter name="u">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Funcletizer.Funcletize(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Funcletizer.Localizer.Localize(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Funcletizer.Localizer.MakeLocal(System.Linq.Expressions.Expression)">
    <parameter name="e">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.HasHierarchy(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.Visitor.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.Visitor.VisitElement(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="elem">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.Visitor.VisitExists(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.Visitor.VisitMultiset(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="sms">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.HierarchyChecker.Visitor.VisitScalarSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="items">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.InheritanceRules.AreSameMember(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
    <parameter name="mi2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mi1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.InheritanceRules.DistinguishedMemberName(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.InheritanceRules.InheritanceCodeForClientCompare(System.Object,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="rawCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="providerType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.InternalExpression.Known(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.InternalExpression.Known(System.Data.Linq.SqlClient.SqlNode,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.LiteralValidator.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.LongTypeConverter.AddConversions(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNodeAnnotations)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.LongTypeConverter.Visitor.ConvertColumnsToMax(System.Data.Linq.SqlClient.SqlSelect,System.Boolean@,System.Boolean@)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.LongTypeConverter.Visitor.ConvertToMax(System.Data.Linq.SqlClient.SqlExpression,System.Boolean@)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.LongTypeConverter.Visitor.ConvertToMax(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.MetaPosition.#ctor(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MetaPosition.AreSameMember(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
    <parameter name="x">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="y">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MetaPosition.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MetaPosition.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
    <parameter name="y">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="x">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MetaPosition.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.HasMultiset(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.Visitor.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.Visitor.VisitElement(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="elem">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.Visitor.VisitExists(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.Visitor.VisitMultiset(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="sms">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.MultisetChecker.Visitor.VisitScalarSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.#ctor(System.Type,System.Data.Linq.Provider.IDataServices)">
    <parameter name="dataReaderType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Compile(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.CompileDynamicMethod(System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator,System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="gen">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.AddGlobal(System.Type,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.Generate(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.Generate(System.Data.Linq.SqlClient.SqlNode,System.Reflection.Emit.LocalBuilder)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateArrayAccess(System.Type,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateArrayAssign(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateAssignDeferredEntitySet(System.Data.Linq.Mapping.MetaDataMember,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateAssignDeferredReference(System.Data.Linq.Mapping.MetaDataMember,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateAssignEntitySet(System.Data.Linq.Mapping.MetaDataMember,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateAssignValue(System.Data.Linq.Mapping.MetaDataMember,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateBody(System.Reflection.Emit.ILGenerator,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="generator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateClientArray(System.Data.Linq.SqlClient.SqlClientArray)">
    <parameter name="ca">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateClientCase(System.Data.Linq.SqlClient.SqlClientCase,System.Boolean,System.Reflection.Emit.LocalBuilder)">
    <parameter name="scc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateClientParameter(System.Data.Linq.SqlClient.SqlClientParameter)">
    <parameter name="cp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateClientQuery(System.Data.Linq.SqlClient.SqlClientQuery,System.Reflection.Emit.LocalBuilder)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateColumnAccess(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Int32,System.Reflection.Emit.LocalBuilder)">
    <parameter name="pType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="cType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateColumnReference(System.Data.Linq.SqlClient.SqlColumnRef)">
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateConstant(System.Type,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateConvertToType(System.Type,System.Type)">
    <parameter name="actualType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expectedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateConvertToType(System.Type,System.Type,System.Type)">
    <parameter name="readerMethodType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expectedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actualType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateDefault(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateDefault(System.Type,System.Boolean)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateDeferredSource(System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateDiscriminatedType(System.Data.Linq.Mapping.MetaType,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.ProviderType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="targetType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locDiscriminator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="discriminatorType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateDiscriminatedType(System.Data.Linq.SqlClient.SqlDiscriminatedType)">
    <parameter name="dt">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateEquals(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateExpressionForType(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateExpressionForType(System.Data.Linq.SqlClient.SqlExpression,System.Type,System.Reflection.Emit.LocalBuilder)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateGetValue(System.Type)">
    <parameter name="nullableType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateGetValueOrDefault(System.Type)">
    <parameter name="nullableType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateGlobalAccess(System.Int32,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateGrouping(System.Data.Linq.SqlClient.SqlGrouping)">
    <parameter name="grp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateHasValue(System.Type)">
    <parameter name="nullableType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateJoinedCollection(System.Data.Linq.SqlClient.SqlJoinedCollection)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="jc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateLift(System.Data.Linq.SqlClient.SqlLift)">
    <parameter name="lift">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateLink(System.Data.Linq.SqlClient.SqlLink,System.Reflection.Emit.LocalBuilder)">
    <parameter name="link">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateLoadForMemberAccess(System.Reflection.Emit.LocalBuilder)">
    <parameter name="loc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateLoadMember(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateMemberAssignment(System.Data.Linq.Mapping.MetaDataMember,System.Reflection.Emit.LocalBuilder,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.Emit.LocalBuilder)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="locInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateMethodCall(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateNew(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sn">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateOptionalValue(System.Data.Linq.SqlClient.SqlOptionalValue)">
    <parameter name="opt">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <parameter name="ssc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateStoreMember(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateTypeCase(System.Data.Linq.SqlClient.SqlTypeCase)">
    <parameter name="stc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateUserColumn(System.Data.Linq.SqlClient.SqlUserColumn)">
    <parameter name="suc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateValue(System.Data.Linq.SqlClient.SqlValue)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GenerateValueOf(System.Data.Linq.SqlClient.SqlUnary)">
    <parameter name="u">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GetMethodCallOpCode(System.Reflection.MethodInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.GetReaderMethod(System.Type,System.Type)">
    <parameter name="readerType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="valueType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.Globals">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.HasSideEffect(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.IsDeferrableExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.SqlClient.ObjectReaderCompiler.Generator.NamedColumns">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Group`2.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReader`2.Current">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReader`2.System#Collections#IEnumerator#Current">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReaderFactory`2.Create(System.Data.Common.DbDataReader,System.Boolean,System.Data.Linq.SqlClient.IReaderProvider,System.Object[],System.Object[],System.Data.Linq.SqlClient.ICompiledSubQuery[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReaderFactory`2.GetNextResult(System.Data.Linq.SqlClient.IObjectReaderSession,System.Boolean)">
    <parameter name="session">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReaderSession`1.CreateReader``1(System.Func{System.Data.Linq.SqlClient.Implementation.ObjectMaterializer{`0},``0},System.Data.Linq.SqlClient.ObjectReaderCompiler.NamedColumn[],System.Object[],System.Int32,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReaderSession`1.GetActiveNames">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.ObjectReaderSession`1.GetNextResult``1(System.Func{System.Data.Linq.SqlClient.Implementation.ObjectMaterializer{`0},``0},System.Data.Linq.SqlClient.ObjectReaderCompiler.NamedColumn[],System.Object[],System.Int32,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.OrderedResults`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
    <parameter name="results">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.OrderedResults`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.OrderedResults`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.OrderedResults`1.System#Linq#IOrderedEnumerable{T}#CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
    <parameter name="keySelector">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Rereader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
    <parameter name="buffer">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Rereader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
    <parameter name="buffer">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Rereader.GetOrdinal(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.Rereader.GetValues(System.Object[])">
    <parameter name="values">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.SqlClient.ObjectReaderCompiler.Rereader.Item(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.SideEffectChecker.HasSideEffect(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.SideEffectChecker.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.SideEffectChecker.VisitJoinedCollection(System.Data.Linq.SqlClient.SqlJoinedCollection)">
    <parameter name="jc">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.SourceExpressionRemover.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <parameter name="aref">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ObjectReaderCompiler.SourceExpressionRemover.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Convert(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlFactory,System.Data.Linq.SqlClient.SqlProvider.ProviderMode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetCoercionMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetComparisonMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetConvertMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetDatePart(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetDateTimeMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetDateTimeOffsetMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetDecimalMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetMathMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetNullableMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetObjectMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetSqlMethodsMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetStringMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetTimeSpanMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.GetVbHelperMethodSupport(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedBinaryMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedDateTimeMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedDateTimeNew(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedDateTimeOffsetMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedNew(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="snew">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedStringMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedStringNew(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="snew">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedTimeSpanMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedTimeSpanNew(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsSupportedUnary(System.Data.Linq.SqlClient.SqlUnary)">
    <parameter name="uo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsVbCompareString(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="call">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsVbConversionMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.IsVbLike(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateComparison(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeFromDateAndMs(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ms">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeFromDateAndMs(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ms">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeFromDateAndTicks(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="sqlTicks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeFromDateAndTicks(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <parameter name="sqlTicks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeOffsetFromDateAndMs(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ms">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeOffsetFromDateAndMs(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ms">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeOffsetFromDateAndTicks(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="sqlTicks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateDateTimeOffsetFromDateAndTicks(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <parameter name="sqlTicks">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateFunctionCallStatic1(System.Type,System.String,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="arguments">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.CreateFunctionCallStatic2(System.Type,System.String,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="arguments">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.GetMethodSupportException(System.Data.Linq.SqlClient.SqlMethodCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateConvertStaticMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateDateTimeBinary(System.Data.Linq.SqlClient.SqlBinary)">
    <parameter name="bo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateDateTimeInstanceMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateDateTimeOffsetInstanceMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateDecimalMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateGetValueOrDefaultMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateMathMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateNewDateTime(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateNewDateTimeOffset(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateNewString(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateNewTimeSpan(System.Data.Linq.SqlClient.SqlNew)">
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateSqlMethodsMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateStringMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateStringStaticMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateTimeSpanInstanceMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateVbCompareString(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateVbConversionMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.TranslateVbLikeString(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PostBindDotNetConverter.Visitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.Convert(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlFactory,System.Data.Linq.Mapping.MetaModel)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsCompareMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="call">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsCompareToMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="call">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsCompareToValue(System.Data.Linq.SqlClient.SqlBinary)">
    <parameter name="bo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsNullableHasValue(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsNullableValue(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsSupportedMember(System.Data.Linq.SqlClient.SqlMember)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsSupportedMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsSupportedVbHelperMethod(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsVbCompareString(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="call">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsVbCompareStringEqualsValue(System.Data.Linq.SqlClient.SqlBinary)">
    <parameter name="bo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.IsVbIIF(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.Visitor.CreateComparison(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.Visitor.MakeCompareTo(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlNodeType,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.PreBindDotNetConverter.Visitor.TranslateVbIIF(System.Data.Linq.SqlClient.SqlMethodCall)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ProviderType.ComparePrecedenceTo(System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ProviderType.GetClosestRuntimeType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ProviderType.GetNonUnicodeEquivalent">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.ProviderType.IsSameTypeFamily(System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.#ctor(System.Data.Linq.Provider.IDataServices,System.Data.Linq.SqlClient.TypeSystemProvider,System.Data.Linq.SqlClient.Translator,System.Data.Linq.SqlClient.SqlFactory)">
    <parameter name="services">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="typeProvider">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="translator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sql">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.CanSkipOnSelection(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="selection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.ChangeType(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.ChooseConversionMethod(System.Type,System.Type)">
    <parameter name="fromType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="toType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.CoerceToSequence(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.CompensateForLowerPrecedenceOfDateType(System.Data.Linq.SqlClient.SqlExpression@,System.Data.Linq.SqlClient.SqlExpression@)">
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.ConvertOuter(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.FindGroupInfo(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GenerateInExpression(System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="list">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GenerateQuantifier(System.Data.Linq.SqlClient.SqlAlias,System.Data.Linq.SqlClient.SqlExpression,System.Boolean)">
    <parameter name="alias">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="cond">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GenerateSkipTake(System.Data.Linq.SqlClient.SqlSelect,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetAggregate(System.Data.Linq.SqlClient.SqlNodeType,System.Type,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetFunctionParameters(System.Linq.Expressions.MethodCallExpression,System.Data.Linq.Mapping.MetaFunction)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mce">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetIdentityExpression(System.Data.Linq.Mapping.MetaDataMember,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="id">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetLambda(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetRowCountExpression">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.GetValue(System.Linq.Expressions.Expression,System.String)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsDataManipulationCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsDbGeneratedKeyProjectionOnly(System.Linq.Expressions.Expression,System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="keyMember">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsGrouping(System.Type)">
    <parameter name="t">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsLambda(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsMappedFunctionCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsSequenceOperatorCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.IsSequenceOperatorCall(System.Linq.Expressions.MethodCallExpression,System.String)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.LockSelect(System.Data.Linq.SqlClient.SqlSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sel">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.MakeCoalesce(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="resultType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.PropertyOrFieldOf(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.RemoveQuotes(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.TranslateConstantTable(System.Data.Linq.ITable,System.Data.Linq.SqlClient.SqlLink)">
    <parameter name="table">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.TranslateStoredProcedureCall(System.Linq.Expressions.MethodCallExpression,System.Data.Linq.Mapping.MetaFunction)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mce">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.TranslateTableValuedFunction(System.Linq.Expressions.MethodCallExpression,System.Data.Linq.Mapping.MetaFunction)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mce">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitAggregate(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Data.Linq.SqlClient.SqlNodeType,System.Type)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitArrayIndex(System.Linq.Expressions.BinaryExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitArrayLength(System.Linq.Expressions.UnaryExpression)">
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitAs(System.Linq.Expressions.UnaryExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitBinary(System.Linq.Expressions.BinaryExpression)">
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitCast(System.Linq.Expressions.UnaryExpression)">
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitChangeType(System.Linq.Expressions.Expression,System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitConcat(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
    <parameter name="cond">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitConstant(System.Linq.Expressions.ConstantExpression)">
    <parameter name="cons">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitContains(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitDataManipulationCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitDefaultIfEmpty(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitDelete(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitDistinct(System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitExcept(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="source1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitExpression(System.Linq.Expressions.Expression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitFirst(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitGroupBy(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="keyLambda">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitGroupJoin(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="outerKeySelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="innerKeySelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="resultSelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitInsert(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitIntersect(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="source1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
    <parameter name="invoke">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitJoin(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="outerKeySelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="innerKeySelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="resultSelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitLambda(System.Linq.Expressions.LambdaExpression)">
    <parameter name="lambda">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitLinkedTable(System.Data.Linq.SqlClient.LinkedTableExpression)">
    <parameter name="linkedTable">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitMappedFunctionCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
    <parameter name="ma">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
    <parameter name="init">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitNew(System.Linq.Expressions.NewExpression)">
    <parameter name="qn">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitNewArrayInit(System.Linq.Expressions.NewArrayExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="arr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitOfType(System.Linq.Expressions.Expression,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitOrderBy(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Data.Linq.SqlClient.SqlOrderType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitParameter(System.Linq.Expressions.ParameterExpression)">
    <parameter name="p">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitQuantifier(System.Data.Linq.SqlClient.SqlSelect,System.Linq.Expressions.LambdaExpression,System.Boolean)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitQuantifier(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitSelect(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="selector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitSelectMany(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="colSelector">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitSequenceCast(System.Linq.Expressions.Expression,System.Type)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitSequenceOperatorCall(System.Linq.Expressions.MethodCallExpression)">
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitSkip(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <parameter name="skipCount">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitTake(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="count">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitThenBy(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Data.Linq.SqlClient.SqlOrderType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitUnary(System.Linq.Expressions.UnaryExpression)">
    <parameter name="u">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitUnion(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitUpdate(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitUserQuery(System.String,System.Linq.Expressions.Expression[],System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="arguments">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryConverter.VisitWhere(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="predicate">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryExtractor.Extract(System.Data.Linq.SqlClient.SqlSubSelect,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlParameter})">
    <parameter name="subquery">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.QueryExtractor.Visitor.ExtractParameter(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SimpleExpression.Visitor.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SingleTableQueryVisitor.AddIdentityMembers(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
    <parameter name="members">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SingleTableQueryVisitor.IsColumnMatch(System.Reflection.MemberInfo,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SingleTableQueryVisitor.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAggregateChecker.HasAggregates(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAggregateChecker.Visitor.VisitSource(System.Data.Linq.SqlClient.SqlSource)">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAggregateChecker.Visitor.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAlias.#ctor(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliaser.AssociateColumnsWithAliases(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasesReferenced.ReferencesAny(System.Data.Linq.SqlClient.SqlNode,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlAlias})">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasesReferenced.Visitor.VisitAliasConsumed(System.Data.Linq.SqlClient.SqlAlias)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasesReferenced.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasRef.#ctor(System.Data.Linq.SqlClient.SqlAlias)">
    <parameter name="alias">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasRef.GetClrType(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlAliasRef.GetSqlType(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinary.#ctor(System.Data.Linq.SqlClient.SqlNodeType,System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinary.#ctor(System.Data.Linq.SqlClient.SqlNodeType,System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MethodInfo)">
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.#ctor(System.Data.Linq.SqlClient.Translator,System.Data.Linq.SqlClient.SqlFactory,System.Data.Linq.Mapping.MetaModel,System.Data.Linq.DataLoadOptions,System.Data.Linq.SqlClient.SqlColumnizer)">
    <parameter name="sqlFactory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Bind(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.LinkOptimizationScope.Add(System.Object,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="linkId">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.LinkOptimizationScope.TryGetValue(System.Object,System.Data.Linq.SqlClient.SqlExpression@)">
    <parameter name="linkId">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.#ctor(System.Data.Linq.SqlClient.SqlBinder,System.Data.Linq.SqlClient.Translator,System.Data.Linq.SqlClient.SqlColumnizer,System.Data.Linq.SqlClient.SqlFactory,System.Data.Linq.Mapping.MetaModel,System.Data.Linq.DataLoadOptions)">
    <parameter name="sqlFactory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.AccessMember(System.Data.Linq.SqlClient.SqlMember,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.ApplyTreat(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="target">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.ConvertToExpression(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.ExpandExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.FetchExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.FoldSubquery(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.GetPossibleTypes(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="typeExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.GetRequiredInheritanceDataMember(System.Data.Linq.Mapping.MetaType,System.Reflection.MemberInfo)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.GetSourceSelect(System.Data.Linq.SqlClient.SqlSource)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.IsOuterDependent(System.Boolean,System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias},System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias}@)">
    <parameter name="location">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="consumed">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.IsOuterDependent(System.Data.Linq.SqlClient.SqlSource,System.Data.Linq.SqlClient.SqlAlias,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="location">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="alias">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="where">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.MakeJoin(System.Data.Linq.SqlClient.SqlJoinType,System.Data.Linq.SqlClient.SqlSource,System.Data.Linq.SqlClient.SqlAlias,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="alias">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.PushDownExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.SimulateCaseOfSequences(System.Data.Linq.SqlClient.SqlClientCase,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlNode})">
    <parameter name="clientCase">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sequences">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitLinkExpansion(System.Data.Linq.SqlClient.SqlLink)">
    <parameter name="link">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBinder.Visitor.VisitTreat(System.Data.Linq.SqlClient.SqlUnary)">
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanizer.Booleanizer.ConvertPredicateToValue(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanizer.Booleanizer.ConvertValueToPredicate(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanizer.Rationalize(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.TypeSystemProvider,System.Data.Linq.Mapping.MetaModel)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.ConvertPredicateToValue(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="predicateExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.ConvertValueToPredicate(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="valueExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.IsPredicateExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.VisitPredicate(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBooleanMismatchVisitor.VisitSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.BuildFieldDeclarations(System.Data.Linq.Mapping.MetaTable,System.Text.StringBuilder)">
    <parameter name="table">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sb">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.BuildFieldDeclarations(System.Data.Linq.Mapping.MetaType,System.Collections.Generic.Dictionary{System.Object,System.String},System.Text.StringBuilder)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="memberNameToMappedName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sb">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.BuildKey(System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaDataMember})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="members">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.BuildPrimaryKey(System.Data.Linq.Mapping.MetaTable,System.Text.StringBuilder)">
    <parameter name="table">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sb">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.GetCreateDatabaseCommand(System.String,System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="catalog">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.GetCreateSchemaForTableCommand(System.Data.Linq.Mapping.MetaTable)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="table">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.GetCreateTableCommand(System.Data.Linq.Mapping.MetaTable)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="table">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.GetDbType(System.Data.Linq.Mapping.MetaDataMember)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.GetDropDatabaseCommand(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="catalog">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlBuilder.IsNullable(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCaseSimplifier.Simplify(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlFactory)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCaseSimplifier.Visitor.AreCaseWhenValuesConstant(System.Data.Linq.SqlClient.SqlSimpleCase)">
    <parameter name="sc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCaseSimplifier.Visitor.DistributeOperatorIntoCase(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlSimpleCase,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="sc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCaseSimplifier.Visitor.TryToWriteAsReducedCase(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlWhen},System.Data.Linq.SqlClient.SqlExpression,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="discriminator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newWhens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCaseSimplifier.Visitor.TryToWriteAsSimpleBooleanExpression(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlWhen},System.Boolean)">
    <parameter name="discriminator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newWhens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlClientCase.#ctor(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlClientWhen},System.Linq.Expressions.Expression)">
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlClientQuery.#ctor(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="subquery">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlClientWhen.#ctor(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumn.#ctor(System.String,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumn.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Data.Linq.Mapping.MetaDataMember,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="sqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnizer.ColumnDeclarer.Declare(System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlExpression})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnizer.ColumnizeSelection(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="selection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnizer.ColumnNominator.CanRecurseColumnize(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnizer.ColumnNominator.IsClientOnly(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnizer.ColumnNominator.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnRef.#ctor(System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="col">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnRef.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlColumnRef.GetRootColumn">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlComparer.UnwrapTrivialCaseExpression(System.Data.Linq.SqlClient.SqlSimpleCase)">
    <parameter name="sc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlConnectionManager.BootUser(System.Data.Linq.SqlClient.IConnectionUser)">
    <parameter name="user">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlConnectionManager.OnInfoMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlConnectionManager.ReleaseConnection(System.Data.Linq.SqlClient.IConnectionUser)">
    <parameter name="user">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlConnectionManager.UseConnection(System.Data.Linq.SqlClient.IConnectionUser)">
    <parameter name="user">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlCrossApplyToCrossJoin.Reduce(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNodeAnnotations)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.Deflate(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlAliasDeflator.HasTrivialProjection(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlAliasDeflator.IsTrivialSelect(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlAliasDeflator.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlColumnDeflator.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlColumnEqualizer.BuildEqivalenceMap(System.Data.Linq.SqlClient.SqlSource)">
    <parameter name="scope">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlColumnEqualizer.CheckJoinCondition(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlColumnEqualizer.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlTopSelectDeflator.HasTrivialProjection(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlTopSelectDeflator.IsTrivialSelect(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlValueDeflator.SelectionDeflator.GetLiteralValue(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDeflator.SqlValueDeflator.SelectionDeflator.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDiscriminatedType.#ctor(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaType,System.Linq.Expressions.Expression)">
    <parameter name="discriminator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDoNotVisitExpression.#ctor(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitDoNotVisit(System.Data.Linq.SqlClient.SqlDoNotVisitExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitElement(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="elem">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitIncludeScope(System.Data.Linq.SqlClient.SqlIncludeScope)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitSimpleExpression(System.Data.Linq.SqlClient.SqlSimpleExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitValue(System.Data.Linq.SqlClient.SqlValue)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlDuplicator.DuplicatingVisitor.VisitVariable(System.Data.Linq.SqlClient.SqlVariable)">
    <parameter name="v">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Expand(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.ExpandIntoExprSet(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.ExpandTogether(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.ExpandUnion(System.Data.Linq.SqlClient.SqlUnion)">
    <parameter name="union">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.GatherUnionExpressions(System.Data.Linq.SqlClient.SqlNode,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpander.Visitor.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpressionNullability.CanBeNull(System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExpressionNullability.CanBeNull(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlExprSet.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Add(System.Data.Linq.SqlClient.SqlExpression,System.Int32)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Add(System.Data.Linq.SqlClient.SqlExpression[])">
    <parameter name="expressions">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.AddTimeSpan(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="dateTime">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="timeSpan">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.AddTimeSpan(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Boolean)">
    <parameter name="timeSpan">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="dateTime">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Between(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Binary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Binary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MethodInfo)">
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Binary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MethodInfo,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Binary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Case(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="matches">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="values">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.CastTo(System.Type,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.CLRLENGTH(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Concat(System.Data.Linq.SqlClient.SqlExpression[])">
    <parameter name="expressions">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertTimeToDouble(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertTo(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertTo(System.Type,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="clrType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertToBigint(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertToBool(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertToDateTime(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertToDouble(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ConvertToInt(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATALENGTH(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATEADD(System.String,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="partName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATEADD(System.String,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <parameter name="partName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATEPART(System.String,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="partName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATETIMEOFFSETADD(System.String,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="partName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DATETIMEOFFSETADD(System.String,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression,System.Boolean)">
    <parameter name="partName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Default(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DiscriminatedType(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="discriminator">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Divide(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="second">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="first">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Divide(System.Data.Linq.SqlClient.SqlExpression,System.Int64)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.DoNotVisitExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ExprSet(System.Data.Linq.SqlClient.SqlExpression[],System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.FunctionCall(System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.FunctionCall(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.In(System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.IsSqlDateTimeOffsetType(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.IsSqlDateTimeType(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.IsSqlDateType(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.IsSqlHighPrecisionDateTimeType(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.IsSqlTimeType(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.LEN(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Like(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="pattern">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Member(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaDataMember)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Member(System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MemberInfo)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.MethodCall(System.Reflection.MethodInfo,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression[],System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="method">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.MethodCall(System.Type,System.Reflection.MethodInfo,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression[],System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="method">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Mod(System.Data.Linq.SqlClient.SqlExpression,System.Int64)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Multiply(System.Data.Linq.SqlClient.SqlExpression,System.Int64)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Multiply(System.Data.Linq.SqlClient.SqlExpression[])">
    <parameter name="expressions">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.New(System.Data.Linq.Mapping.MetaType,System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlMemberAssign},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ObjectType(System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Parameter(System.Object,System.Linq.Expressions.Expression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.RowNumber(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlOrderExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="orderBy">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.SearchedCase(System.Data.Linq.SqlClient.SqlWhen[],System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.StaticType(System.Data.Linq.Mapping.MetaType,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="typeOf">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.SubSelect(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.SubSelect(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlSelect,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Subtract(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="second">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="first">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Subtract(System.Data.Linq.SqlClient.SqlExpression,System.Int32)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Table(System.Data.Linq.Mapping.MetaTable,System.Data.Linq.Mapping.MetaType,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.TableValuedFunctionCall(System.Data.Linq.Mapping.MetaType,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.TypeCase(System.Type,System.Data.Linq.Mapping.MetaType,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlTypeCaseWhen},System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.TypedLiteralNull(System.Type,System.Linq.Expressions.Expression)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sourceExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Unary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Unary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Unary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.UnaryCast(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.UnaryConvert(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.UnaryValueOf(System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.Value(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Object,System.Boolean,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ValueFromObject(System.Object,System.Boolean,System.Linq.Expressions.Expression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sourceExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ValueFromObject(System.Object,System.Linq.Expressions.Expression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sourceExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFactory.ValueFromObject(System.Object,System.Type,System.Boolean,System.Linq.Expressions.Expression)">
    <parameter name="clrType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="sourceExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Flatten(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.FlattenGroupBy(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.FlattenGroupByExpression(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.FlattenOrderBy(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlOrderExpression})">
    <parameter name="exprs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.FlattenSelection(System.Data.Linq.SqlClient.SqlRow,System.Boolean,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="selection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.FindColumn(System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlColumn},System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="columns">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.FindColumnWithExpression(System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlColumn},System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="columns">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.MakeFlattenedColumn(System.Data.Linq.SqlClient.SqlExpression,System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.SelectionFlattener.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFlattener.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.FormatBlock(System.Data.Linq.SqlClient.SqlBlock,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="block">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.EscapeSingleQuotes(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="str">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.Format(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.Format(System.Data.Linq.SqlClient.SqlNode,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.FormatType(System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.GetBoolValue(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.GetOperator(System.Data.Linq.SqlClient.SqlNodeType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitCrossJoinList(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitJoinSource(System.Data.Linq.SqlClient.SqlSource)">
    <parameter name="src">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitMemberAssign(System.Data.Linq.SqlClient.SqlMemberAssign)">
    <parameter name="ma">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitSharedExpression(System.Data.Linq.SqlClient.SqlSharedExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitSharedExpressionRef(System.Data.Linq.SqlClient.SqlSharedExpressionRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitSimpleExpression(System.Data.Linq.SqlClient.SqlSimpleExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitUserRow(System.Data.Linq.SqlClient.SqlUserRow)">
    <parameter name="row">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.VisitWithParens(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="outer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.WriteAliasName(System.Data.Linq.SqlClient.SqlAlias)">
    <parameter name="alias">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.WriteName(System.String)">
    <parameter name="s">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFormatter.Visitor.WriteVariableName(System.String)">
    <parameter name="s">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFunctionCall.#ctor(System.Data.Linq.SqlClient.SqlNodeType,System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlFunctionCall.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlGatherConsumedAliases.Gather(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlGatherConsumedAliases.Gatherer.VisitAliasConsumed(System.Data.Linq.SqlClient.SqlAlias)">
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlGatherConsumedAliases.Gatherer.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlGatherProducedAliases.Gather(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlGrouping.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="key">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="group">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlHelpers.EscapeLikeText(System.String,System.Char)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="text">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
    <parameter name="text">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
    <parameter name="text">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
    <parameter name="text">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="pattern">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlIdentifier.IsQuoted(System.String)">
    <parameter name="s">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlIdentifier.QuoteCompoundIdentifier(System.String)">
    <parameter name="s">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlIdentifier.QuoteIdentifier(System.String)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="s">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlLift.#ctor(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="liftedExpression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlLiftIndependentRowExpressions.ColumnLifter.PushSourceDown(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlColumn})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sqlSource">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="cols">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlLiftIndependentRowExpressions.Lift(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlLiftWhereClauses.Lift(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.TypeSystemProvider,System.Data.Linq.Mapping.MetaModel)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlLike.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="pattern">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMember.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlExpression,System.Reflection.MemberInfo)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMemberAssign.#ctor(System.Reflection.MemberInfo,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethodCall.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Reflection.MethodInfo,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="method">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlMultiplexer.Multiplex(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.AssignNames(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.Visitor.GetColumnNames(System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlOrderExpression})">
    <parameter name="orderList">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.Visitor.IsSimpleColumn(System.Data.Linq.SqlClient.SqlColumn,System.String)">
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.Visitor.IsUniqueName(System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlColumn},System.Collections.Generic.ICollection{System.String},System.Data.Linq.SqlClient.SqlColumn,System.String)">
    <parameter name="columns">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="reservedNames">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNamer.Visitor.VisitNamedExpression(System.Data.Linq.SqlClient.SqlExpression,System.String)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNew.#ctor(System.Data.Linq.Mapping.MetaType,System.Data.Linq.SqlClient.ProviderType,System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlMemberAssign},System.Linq.Expressions.Expression)">
    <parameter name="metaType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNew.Find(System.Reflection.MemberInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNodeAnnotations.Add(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNodeAnnotation)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="annotation">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNodeAnnotations.Get(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNodeAnnotations.HasAnnotationType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlNodeTypeOperators.IsClientAidedExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOptionalValue.#ctor(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOrderExpression.Equals(System.Data.Linq.SqlClient.SqlOrderExpression)">
    <parameter name="other">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOrderExpression.UnwrapColumn(System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.Reduce(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlFactory,System.Data.Linq.SqlClient.SqlNodeAnnotations)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlAliasDependencyChecker.IsDependent(System.Data.Linq.SqlClient.SqlNode,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias},System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlAliasDependencyChecker.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlAliasesReferenced.ReferencesAny(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlAliasesReferenced.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlGatherReferencedColumns.Gather(System.Data.Linq.SqlClient.SqlNode,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlColumn})">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlGatherReferencedColumns.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlPredicateLifter.CanLift(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias},System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlPredicateLifter.Lift(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias})">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlSelectionLifter.CanLift(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias},System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.SqlSelectionLifter.Lift(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlAlias},System.Collections.Generic.HashSet{System.Data.Linq.SqlClient.SqlExpression})">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.Visitor.AnnotateSqlIncompatibility(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlProvider.ProviderMode[])">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.Visitor.GetSelectionsBeforeJoin(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.List{System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlColumn}})">
    <parameter name="selections">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlOuterApplyReducer.Visitor.PushSourceDown(System.Data.Linq.SqlClient.SqlSource,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlColumn})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sqlSource">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="cols">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameter.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Linq.Expressions.Expression)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Parameterize(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.ParameterizeBlock(System.Data.Linq.SqlClient.SqlBlock)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="block">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.ParameterizeInternal(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Visitor.GetParameterDirection(System.Data.Linq.Mapping.MetaParameter)">
    <parameter name="p">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Visitor.InsertLookup(System.Data.Linq.SqlClient.SqlValue)">
    <parameter name="cp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Visitor.RetypeOutParameter(System.Data.Linq.SqlClient.SqlParameter)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Visitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlParameterizer.Visitor.VisitParameter(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CanBeColumn(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CheckSqlCompatibility(System.Data.Linq.SqlClient.SqlProvider.QueryInfo[],System.Data.Linq.SqlClient.SqlNodeAnnotations)">
    <parameter name="annotations">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="queries">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CompiledQuery.#ctor(System.Data.Linq.SqlClient.SqlProvider,System.Linq.Expressions.Expression,System.Data.Linq.SqlClient.SqlProvider.QueryInfo[],System.Data.Linq.SqlClient.IObjectReaderFactory,System.Data.Linq.SqlClient.ICompiledSubQuery[])">
    <parameter name="provider">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CompiledQuery.Execute(System.Data.Linq.Provider.IProvider,System.Object[])">
    <parameter name="provider">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CompiledSubQuery.Execute(System.Data.Linq.Provider.IProvider,System.Object[],System.Object[])">
    <parameter name="provider">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.CompileSubQueries(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.Execute(System.Linq.Expressions.Expression,System.Data.Linq.SqlClient.SqlProvider.QueryInfo,System.Data.Linq.SqlClient.IObjectReaderFactory,System.Object[],System.Object[],System.Data.Linq.SqlClient.ICompiledSubQuery[],System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="queryInfo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="factory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.ExecuteAll(System.Linq.Expressions.Expression,System.Data.Linq.SqlClient.SqlProvider.QueryInfo[],System.Data.Linq.SqlClient.IObjectReaderFactory,System.Object[],System.Data.Linq.SqlClient.ICompiledSubQuery[])">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="factory">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="queryInfos">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.ExecuteCommand(System.String)">
    <parameter name="command">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetCachedResult(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetConnectionString(System.String)">
    <parameter name="fileOrServerOrConnectionString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetDefaultFactory(System.Data.Linq.Mapping.MetaType)">
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetFinalSelect(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetProvider(System.String)">
    <parameter name="providerName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetReaderFactory(System.Data.Linq.SqlClient.SqlNode,System.Type)">
    <parameter name="elemType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetResultShape(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.GetResultType(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.LogCommand(System.IO.TextWriter,System.Data.Common.DbCommand)">
    <parameter name="cmd">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.MultipleResults.GetResult``1">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.OneTimeEnumerable`1.GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.OneTimeEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.SequenceOfOne`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.SingleResult`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.SingleResult`1.System#ComponentModel#IListSource#GetList">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.SubQueryCompiler.Compile(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.SubQueryCompiler.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#Compile(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#Execute(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#GetCommand(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#GetQueryText(System.Linq.Expressions.Expression)">
    <parameter name="query">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#Initialize(System.Data.Linq.Provider.IDataServices,System.Object)">
    <parameter name="connection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="dataServices">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#Translate(System.Data.Common.DbDataReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlProvider.System#Data#Linq#Provider#IProvider#Translate(System.Type,System.Data.Common.DbDataReader)">
    <parameter name="reader">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="elementType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRemoveConstantOrderBy.Remove(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlReorderer.Reorder(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlReorderer.SqlGatherColumnsProduced.GatherColumns(System.Data.Linq.SqlClient.SqlSource)">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlReorderer.SqlGatherColumnsProduced.Visitor.VisitUnion(System.Data.Linq.SqlClient.SqlUnion)">
    <parameter name="su">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.SqlClient.SqlReorderer.Visitor.Orders">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlReorderer.Visitor.PushDown(System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="column">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.GetColumnName(System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.Resolve(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.SqlBubbler.BubbleUp(System.Data.Linq.SqlClient.SqlColumn,System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="col">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.SqlBubbler.ForceLocal(System.Data.Linq.SqlClient.SqlRow,System.String)">
    <parameter name="row">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.SqlBubbler.GetOriginatingColumn(System.Data.Linq.SqlClient.SqlColumn)">
    <parameter name="col">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.SqlBubbler.IsFoundInGroup(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.Visitor.BubbleUp(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlResolver.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRetyper.Retype(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRetyper.Visitor.CanDbConvert(System.Type,System.Type)">
    <parameter name="to">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="from">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRetyper.Visitor.CoerceBinaryArgs(System.Data.Linq.SqlClient.SqlExpression@,System.Data.Linq.SqlClient.SqlExpression@)">
    <parameter name="arg1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="arg2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRetyper.Visitor.CoerceToFirst(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression@)">
    <parameter name="arg1">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="arg2">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRetyper.Visitor.VisitSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRewriteScalarSubqueries.Rewrite(System.Data.Linq.SqlClient.SqlNode)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRow.Find(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumber.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlOrderExpression},System.Linq.Expressions.Expression)">
    <parameter name="orderByList">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumberChecker.HasRowNumber(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumberChecker.HasRowNumber(System.Data.Linq.SqlClient.SqlRow)">
    <parameter name="row">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumberChecker.Visitor.VisitRowNumber(System.Data.Linq.SqlClient.SqlRowNumber)">
    <parameter name="rowNumber">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumberChecker.Visitor.VisitScalarSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlRowNumberChecker.Visitor.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSearchedCase.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlWhen},System.Data.Linq.SqlClient.SqlExpression,System.Linq.Expressions.Expression)">
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlServerCompatibilityCheck.ThrowIfUnsupported(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNodeAnnotations,System.Data.Linq.SqlClient.SqlProvider.ProviderMode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="annotations">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSharedExpression.#ctor(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSharedExpressionRef.#ctor(System.Data.Linq.SqlClient.SqlSharedExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSimpleCase.#ctor(System.Type,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlWhen},System.Linq.Expressions.Expression)">
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSimpleExpression.#ctor(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlStoredProcedureCall.#ctor(System.Data.Linq.Mapping.MetaFunction,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="function">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSubSelect.#ctor(System.Data.Linq.SqlClient.SqlNodeType,System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlSupersetValidator.Validate(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTable.Find(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTableValuedFunctionCall.#ctor(System.Data.Linq.Mapping.MetaType,System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlExpression},System.Linq.Expressions.Expression)">
    <parameter name="args">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTableValuedFunctionCall.Find(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTopReducer.Reduce(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNodeAnnotations,System.Data.Linq.SqlClient.SqlFactory)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeCase.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.Mapping.MetaType,System.Data.Linq.SqlClient.SqlExpression,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlTypeCaseWhen},System.Linq.Expressions.Expression)">
    <parameter name="whens">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.BothTypesAreStrings(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="oldSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.ConvertBitToString(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.ConvertDoubleToString(System.Data.Linq.SqlClient.SqlExpression,System.Type)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.OldWillFitInNew(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="oldSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.StringConversionIsNeeded(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="oldSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeConverter.StringConversionIsSafe(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="oldSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="newSqlType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.Create(System.Data.SqlDbType,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.Create2000Provider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.Create2005Provider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.Create2008Provider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.CreateCEProvider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.GetClosestRuntimeType(System.Data.SqlDbType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.ProviderBase.GetArgumentTypes(System.Data.Linq.SqlClient.SqlFunctionCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="fc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.ProviderBase.GetParameterValue(System.Data.Linq.SqlClient.SqlTypeSystem.SqlType,System.Object)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.Sql2005Provider.GetBestLargeType(System.Data.Linq.SqlClient.ProviderType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlTypeSystem.SqlType.Equals(System.Object)">
    <parameter name="obj">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUnion.#ctor(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.SqlClient.SqlNode,System.Boolean)">
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUnion.Validate(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUnionizer.Unionize(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUnionizer.Visitor.GetUnion(System.Data.Linq.SqlClient.SqlSource)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUpdate.#ctor(System.Data.Linq.SqlClient.SqlSelect,System.Collections.Generic.IEnumerable{System.Data.Linq.SqlClient.SqlAssign},System.Linq.Expressions.Expression)">
    <parameter name="assignments">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUserQuery.Find(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlUserRow.#ctor(System.Data.Linq.Mapping.MetaType,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.SqlUserQuery,System.Linq.Expressions.Expression)">
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVariable.#ctor(System.Type,System.Data.Linq.SqlClient.ProviderType,System.String,System.Linq.Expressions.Expression)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.Eval(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitAlias(System.Data.Linq.SqlClient.SqlAlias)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="a">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <parameter name="aref">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitAssign(System.Data.Linq.SqlClient.SqlAssign)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sa">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitBetween(System.Data.Linq.SqlClient.SqlBetween)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="between">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="bo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitBlock(System.Data.Linq.SqlClient.SqlBlock)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="b">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitCast(System.Data.Linq.SqlClient.SqlUnary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitClientArray(System.Data.Linq.SqlClient.SqlClientArray)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="scar">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitClientCase(System.Data.Linq.SqlClient.SqlClientCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitClientParameter(System.Data.Linq.SqlClient.SqlClientParameter)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="cp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitClientQuery(System.Data.Linq.SqlClient.SqlClientQuery)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="cq">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitColumn(System.Data.Linq.SqlClient.SqlColumn)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="col">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <parameter name="cref">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitDelete(System.Data.Linq.SqlClient.SqlDelete)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="delete">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitDiscriminatedType(System.Data.Linq.SqlClient.SqlDiscriminatedType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="dt">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitDiscriminatorOf(System.Data.Linq.SqlClient.SqlDiscriminatorOf)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="dof">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitDoNotVisit(System.Data.Linq.SqlClient.SqlDoNotVisitExpression)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitElement(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="elem">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitExists(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sqlExpr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitExpression(System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="exp">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitExprSet(System.Data.Linq.SqlClient.SqlExprSet)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="xs">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitFunctionCall(System.Data.Linq.SqlClient.SqlFunctionCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="fc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitGrouping(System.Data.Linq.SqlClient.SqlGrouping)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="g">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitIn(System.Data.Linq.SqlClient.SqlIn)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sin">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitIncludeScope(System.Data.Linq.SqlClient.SqlIncludeScope)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitInsert(System.Data.Linq.SqlClient.SqlInsert)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="insert">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitJoin(System.Data.Linq.SqlClient.SqlJoin)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="join">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitJoinedCollection(System.Data.Linq.SqlClient.SqlJoinedCollection)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="jc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitLift(System.Data.Linq.SqlClient.SqlLift)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="lift">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitLike(System.Data.Linq.SqlClient.SqlLike)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="like">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitLink(System.Data.Linq.SqlClient.SqlLink)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="link">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitMember(System.Data.Linq.SqlClient.SqlMember)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitMemberAssign(System.Data.Linq.SqlClient.SqlMemberAssign)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ma">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitMethodCall(System.Data.Linq.SqlClient.SqlMethodCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="mc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitMultiset(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sms">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitNew(System.Data.Linq.SqlClient.SqlNew)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sox">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitObjectType(System.Data.Linq.SqlClient.SqlObjectType)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ot">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitOptionalValue(System.Data.Linq.SqlClient.SqlOptionalValue)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="sov">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitParameter(System.Data.Linq.SqlClient.SqlParameter)">
    <parameter name="p">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitRow(System.Data.Linq.SqlClient.SqlRow)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="row">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitRowNumber(System.Data.Linq.SqlClient.SqlRowNumber)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="rowNumber">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitScalarSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSearchedCase(System.Data.Linq.SqlClient.SqlSearchedCase)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSelect(System.Data.Linq.SqlClient.SqlSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSelectCore(System.Data.Linq.SqlClient.SqlSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="select">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSequence(System.Data.Linq.SqlClient.SqlSelect)">
    <parameter name="sel">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSharedExpression(System.Data.Linq.SqlClient.SqlSharedExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="shared">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSharedExpressionRef(System.Data.Linq.SqlClient.SqlSharedExpressionRef)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="sref">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSimpleCase(System.Data.Linq.SqlClient.SqlSimpleCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="c">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSimpleExpression(System.Data.Linq.SqlClient.SqlSimpleExpression)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="simple">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSource(System.Data.Linq.SqlClient.SqlSource)">
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitStoredProcedureCall(System.Data.Linq.SqlClient.SqlStoredProcedureCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="spc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitSubSelect(System.Data.Linq.SqlClient.SqlSubSelect)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="ss">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitTable(System.Data.Linq.SqlClient.SqlTable)">
    <parameter name="tab">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitTableValuedFunctionCall(System.Data.Linq.SqlClient.SqlTableValuedFunctionCall)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="fc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitTreat(System.Data.Linq.SqlClient.SqlUnary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="t">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitTypeCase(System.Data.Linq.SqlClient.SqlTypeCase)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="tc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUnaryOperator(System.Data.Linq.SqlClient.SqlUnary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="uo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUnion(System.Data.Linq.SqlClient.SqlUnion)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="su">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUpdate(System.Data.Linq.SqlClient.SqlUpdate)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="update">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUserColumn(System.Data.Linq.SqlClient.SqlUserColumn)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="suc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUserQuery(System.Data.Linq.SqlClient.SqlUserQuery)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="suq">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitUserRow(System.Data.Linq.SqlClient.SqlUserRow)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="row">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitValue(System.Data.Linq.SqlClient.SqlValue)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlVisitor.VisitVariable(System.Data.Linq.SqlClient.SqlVariable)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="v">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SqlWhen.#ctor(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression)">
    <parameter name="value">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.SqlClient.SR.Culture">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SR.GetObject(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.SR.GetString(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.SR.GetString(System.String,System.Object[])">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ArgumentEmpty(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ArgumentTypeMismatch(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ArgumentWrongType(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ArgumentWrongValue(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.BadParameterType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.BadProjectionInSelect">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.BinaryOperatorNotRecognized(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotAggregateType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotAssignNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotAssignToMember(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CannotCompareItemsAssociatedWithDifferentTable">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotConvertToEntityRef(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotDeleteTypesOf(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CannotEnumerateResultsMoreThanOnce">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CannotMaterializeEntityType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CannotTranslateExpressionToSql">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CapturedValuesCannotBeSequences">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ClassLiteralsNotAllowed(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ClientCaseShouldNotHold(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ClrBoolDoesNotAgreeWithSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ColumnCannotReferToItself">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ColumnClrTypeDoesNotAgreeWithExpressionsClrType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ColumnIsDefinedInMultiplePlaces(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ColumnIsNotAccessibleThroughDistinct(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ColumnIsNotAccessibleThroughGroupBy(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ColumnReferencedIsNotInScope(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ComparisonNotSupportedForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CompiledQueryAgainstMultipleShapesNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CompiledQueryCannotReturnType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ConstructedArraysNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ContextNotInitialized">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ConvertToCharFromBoolNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ConvertToDateTimeOnlyForDateTimeOrString">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotAssignSequence(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotConvertToPropertyOrField(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CouldNotDetermineCatalogName">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotDetermineDbGeneratedSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotDetermineSqlType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CouldNotGetClrType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.CouldNotGetSqlType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotHandleAliasRef(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CouldNotTranslateExpressionForReading(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CreateDatabaseFailedBecauseOfClassWithNoMembers(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CreateDatabaseFailedBecauseOfContextWithNoTables(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.CreateDatabaseFailedBecauseSqlCEDatabaseAlreadyExists(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.DatabaseDeleteThroughContext">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.DeferredMemberWrongType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.DidNotExpectAs(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.DidNotExpectTypeBinding">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.DidNotExpectTypeChange(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.DistributedTransactionsAreNotAllowed">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.EmptyCaseNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ExceptNotSupportedForHierarchicalTypes">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ExpectedBitFoundPredicate">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ExpectedClrTypesToAgree(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ExpectedNoObjectType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ExpectedPredicateFoundBit">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ExpectedQueryableArgument(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ExpressionNotDeferredQuerySource">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.GeneralCollectionMaterializationNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.GroupingNotSupportedAsOrderCriterion">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.IifReturnTypesMustBeEqual(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.Impossible">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.IndexOfWithStringComparisonArgNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.InfiniteDescent">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.InsertItemMustBeConstant">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.IntersectNotSupportedForHierarchicalTypes">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidConnectionArgument(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidDbGeneratedType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidFormatNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.InvalidGroupByExpression">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidGroupByExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidMethodExecution(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidOrderByExpression(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidProviderType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.InvalidReferenceToRemovedAliasDuringDeflation">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidReturnFromSproc(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.InvalidSequenceOperatorCall(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.LastIndexOfWithStringComparisonArgNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.LenOfTextOrNTextNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.LogAttemptingToDeleteDatabase(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.LogGeneralInfoMessage(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.LogStoredProcedureExecution(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MappedTypeMustHaveDefaultConstructor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.MathRoundNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MaxSizeNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MemberAccessIllegal(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MemberCannotBeTranslated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MemberCouldNotBeTranslated(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MemberNotPartOfProjection(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MethodFormHasNoSupportConversionToSql(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MethodHasNoSupportConversionToSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.MethodNotMappedToStoredProcedure(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.NoMethodInTypeMatchingArguments(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.NonConstantExpressionsNotSupportedFor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.NonConstantExpressionsNotSupportedForRounding">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.NonCountAggregateFunctionsAreNotValidOnProjections(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.OwningTeam">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ParameterNotInScope(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ParametersCannotBeSequences">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ProviderCannotBeUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ProviderNotInstalled(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.QueryOnLocalCollectionNotSupported">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.QueryOperatorNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.QueryOperatorOverloadNotSupported(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ReaderUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.RequiredColumnDoesNotExist(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ResultTypeNotMappedToFunction(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.SelectManyDoesNotSupportStrings">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.SequenceOperatorsNotSupportedForType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.SimpleCaseShouldNotHold(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.SkipIsValidOnlyOverOrderedQueries">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.SkipNotSupportedForSequenceTypes">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.SkipRequiresSingleTableQueryWithPKs">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.SourceExpressionAnnotation(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.SprocsCannotBeComposed">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.SqlMethodOnlyForSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.TextNTextAndImageCannotOccurInDistinct(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.TextNTextAndImageCannotOccurInUnion(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.ToStringOnlySupportedForPrimitiveTypes">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.TransactionDoesNotMatchConnection">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.TypeBinaryOperatorNotRecognized">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.TypeCannotBeOrdered(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.TypeColumnWithUnhandledSource">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnableToBindUnmappedMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnexpectedFloatingColumn">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnexpectedNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnexpectedSharedExpression">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnexpectedSharedExpressionReference">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnexpectedTypeCode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnhandledBindingType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnhandledExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnhandledMemberAccess(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnhandledStringTypeComparison">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnionDifferentMemberOrder">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnionDifferentMembers">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnionIncompatibleConstruction">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnionOfIncompatibleDynamicTypes">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnionWithHierarchy">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnmappedDataMember(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnrecognizedExpressionNode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnrecognizedProviderMode(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnsafeStringConversion(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnsupportedDateTimeConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnsupportedDateTimeOffsetConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnsupportedNodeType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnsupportedStringConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UnsupportedTimeSpanConstructorForm">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.UnsupportedTypeConstructorForm(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.UpdateItemMustBeConstant">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.ValueHasNoLiteralInSql(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.VbLikeDoesNotSupportMultipleCharacterRanges">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.VbLikeUnclosedBracket">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SqlClient.Strings.WrongDataContext">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Strings.WrongNumberOfValuesInCollectionArgument(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.BestIdentityNode(System.Data.Linq.SqlClient.SqlTypeCase)">
    <parameter name="tc">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.BuildDefaultQuery(System.Data.Linq.Mapping.MetaType,System.Boolean,System.Data.Linq.SqlClient.SqlLink,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.BuildLink(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaDataMember,System.Linq.Expressions.Expression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.BuildProjection(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaType,System.Boolean,System.Data.Linq.SqlClient.SqlLink,System.Linq.Expressions.Expression)">
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.BuildProjectionInternal(System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.Mapping.MetaType,System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaDataMember},System.Boolean,System.Data.Linq.SqlClient.SqlLink,System.Linq.Expressions.Expression)">
    <parameter name="item">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="rowType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="members">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.GetIdentityExpressions(System.Data.Linq.Mapping.MetaType,System.Data.Linq.SqlClient.SqlExpression)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.GetIdentityMembers(System.Data.Linq.Mapping.MetaType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.IsPreloaded(System.Reflection.MemberInfo)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.RelationComposer.#ctor(System.Linq.Expressions.ParameterExpression,System.Data.Linq.Mapping.MetaAssociation,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
    <parameter name="parameter">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="association">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="otherSouce">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="parameterReplacement">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.RelationComposer.GetKeyValues(System.Linq.Expressions.Expression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Linq.Mapping.MetaDataMember})">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keys">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateAssociation(System.Data.Linq.DataContext,System.Data.Linq.Mapping.MetaAssociation,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[],System.Linq.Expressions.Expression)">
    <parameter name="context">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="association">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="thisInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="otherSource">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateEquals(System.Data.Linq.SqlClient.SqlBinary)">
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateEqualsOp(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.SqlExpression,System.Data.Linq.SqlClient.SqlExpression,System.Boolean)">
    <parameter name="left">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="right">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateLink(System.Data.Linq.SqlClient.SqlLink,System.Boolean)">
    <parameter name="link">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateLink(System.Data.Linq.SqlClient.SqlLink,System.Collections.Generic.List{System.Data.Linq.SqlClient.SqlExpression},System.Boolean)">
    <parameter name="link">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyExpressions">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateLinkEquals(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="bo">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.TranslateLinkIsNull(System.Data.Linq.SqlClient.SqlUnary)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="expr">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.Translator.WhereClauseFromSourceAndKeys(System.Linq.Expressions.Expression,System.Data.Linq.Mapping.MetaDataMember[],System.Linq.Expressions.Expression[])">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="source">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyMembers">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="keyValues">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSource.GetSourceMetaType(System.Data.Linq.SqlClient.SqlNode,System.Data.Linq.Mapping.MetaModel)">
    <parameter name="model">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSource.Visitor.Visit(System.Data.Linq.SqlClient.SqlNode)">
    <parameter name="node">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSource.Visitor.VisitAliasRef(System.Data.Linq.SqlClient.SqlAliasRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSource.Visitor.VisitColumnRef(System.Data.Linq.SqlClient.SqlColumnRef)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.ArgsMatchExact(System.Reflection.MethodInfo,System.Type[],System.Type[])">
    <parameter name="m">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="argTypes">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.FindQueryableMethod(System.String,System.Type[],System.Type[])">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.FindSequenceMethod(System.String,System.Collections.IEnumerable)">
    <parameter name="sequence">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.FindSequenceMethod(System.String,System.Type[],System.Type[])">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.FindStaticMethod(System.Type,System.String,System.Type[],System.Type[])">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.GetAllFields(System.Type,System.Reflection.BindingFlags)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.GetAllProperties(System.Type,System.Reflection.BindingFlags)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.GetNonNullableType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.IsNullAssignable(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.IsPrivate(System.Reflection.PropertyInfo)">
    <parameter name="pi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystem.IsSimpleType(System.Type)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.ChangeTypeFamilyTo(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="typeWithFamily">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.From(System.Type,System.Nullable{System.Int32})">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.GetBestLargeType(System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.GetBestType(System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="typeB">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="typeA">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.InitializeParameter(System.Data.Linq.SqlClient.ProviderType,System.Data.Common.DbParameter,System.Object)">
    <parameter name="parameter">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.MostPreciseTypeInFamily(System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="type">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.Parse(System.String)">
    <parameter name="text">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.PredictTypeForBinary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.ProviderType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="rightType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="leftType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.PredictTypeForUnary(System.Data.Linq.SqlClient.SqlNodeType,System.Data.Linq.SqlClient.ProviderType)">
    <parameter name="operandType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.TypeSystemProvider.ReturnTypeOfFunction(System.Data.Linq.SqlClient.SqlFunctionCall)">
    <parameter name="functionCall">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SqlClient.ValidateNoInvalidComparison.VisitBinaryOperator(System.Data.Linq.SqlClient.SqlBinary)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.SR.Culture">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SR.GetObject(System.String)">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SR.GetString(System.String)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SR.GetString(System.String,System.Object[])">
    <parameter name="name">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.ArgumentTypeHasNoIdentityKey(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotAddChangeConflicts">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotAttachAddNonNewEntities">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotAttachAlreadyExistingEntity">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotAttachAsModifiedWithoutOriginalState">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.CannotChangeInheritanceType(System.Object,System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.CannotPerformCUDOnReadOnlyTable(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotPerformOperationDuringSubmitChanges">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotPerformOperationForUntrackedObject">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotPerformOperationOutsideSubmitChanges">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotRemoveChangeConflicts">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CannotRemoveUnattachedEntity">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CantAddAlreadyExistingItem">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CantAddAlreadyExistingKey">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.ColumnMappedMoreThanOnce(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CouldNotAttach">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.CouldNotConvert(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.CouldNotGetTableForSubtype(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.CouldNotRemoveRelationshipBecauseOneSideCannotBeNull(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.CycleDetected">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.DatabaseGeneratedAlreadyExistingKey">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.DataContextCannotBeUsedAfterDispose">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.DbGeneratedChangeNotAllowed(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.DeferredLoadingRequiresObjectTracking">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.DeleteCallbackComment">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.EntityIsTheWrongType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.EntitySetAlreadyLoaded">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.EntitySetDataBindingWithAbstractBaseClass(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.EntitySetDataBindingWithNonPublicDefaultConstructor(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.EntitySetModifiedDuringEnumeration">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.ExpectedQueryableArgument(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.ExpectedUpdateDeleteOrChange">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.IdentityChangeNotAllowed(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.IncludeCycleNotAllowed">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.IncludeNotAllowedAfterFreeze">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.InconsistentAssociationAndKeyChange(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.InsertAutoSyncFailure">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.InsertCallbackComment">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.InvalidLoadOptionsLoadMemberSpecification">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.KeyIsWrongSize(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.KeyValueIsWrongType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.LoadOptionsChangeNotAllowedAfterQuery">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.ModifyDuringAddOrRemove">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.NonEntityAssociationMapping(System.Object,System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.ObjectTrackingRequired">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.OptionsCannotBeModifiedAfterQuery">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.OriginalEntityIsWrongType">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.OwningTeam">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.ProviderDoesNotImplementRequiredInterface(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.ProviderTypeNull">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.RefreshOfDeletedObject">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.RowNotFoundOrChanged">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.SubqueryDoesNotSupportOperator(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.SubqueryMustBeSequence">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.SubqueryNotAllowedAfterFreeze">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.SubqueryNotSupportedOn(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.SubqueryNotSupportedOnType(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.TypeCouldNotBeAdded(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.TypeCouldNotBeRemoved(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.TypeCouldNotBeTracked(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.TypeIsNotEntity(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.TypeIsNotMarkedAsTable(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.UnableToDetermineDataContext">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.UnhandledBindingType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.UnhandledExpressionType(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.UnrecognizedRefreshObject">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Strings.UpdateCallbackComment">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Strings.UpdatesFailedMessage(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.SubqueryRules.IsSequenceOperatorCall(System.Reflection.MethodInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.SubqueryRules.IsSupportedTopLevelMethod(System.Reflection.MethodInfo)">
    <parameter name="mi">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.Attach(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
    <parameter name="entities">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
    <parameter name="entity">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
    <parameter name="expression">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.ConvertToPossiblyModified(System.Object)">
    <parameter name="original">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.CreateDataCopy(System.Object)">
    <parameter name="instance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.HasChangedValue(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="mm">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.IsMemberPendingGeneration(System.Data.Linq.Mapping.MetaDataMember)">
    <parameter name="keyMember">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.IsPendingGeneration(System.Collections.Generic.IEnumerable{System.Data.Linq.Mapping.MetaDataMember})">
    <parameter name="keyMembers">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.Refresh(System.Data.Linq.RefreshMode,System.Object)">
    <parameter name="freshInstance">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  <member name="M:System.Data.Linq.TrackedObject.RefreshMember(System.Data.Linq.Mapping.MetaDataMember,System.Data.Linq.RefreshMode,System.Object)">
    <parameter name="member">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
</assembly>