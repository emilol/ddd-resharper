<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.VisualStudio.Core</name>
    </assembly>
    <members>
        <member name="T:JetBrains.VsIntegration.resources.ReSharperPlatformImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductAboutBox">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductError">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.ReSharperPlatformImages.ProductSuspended">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverExecute}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverExecute))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = RunConfigThemedIcons.DotCoverExecute.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(RunConfigThemedIcons.DotCoverExecute), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverExecute&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverExecute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotCoverExecute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverExecute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverExecute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotCoverExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverExecute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotCoverExecute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverExecute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverExecute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotCoverExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotCoverNoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotCoverNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotCoverNoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotCoverNoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotCoverNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotCoverNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotCoverNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotCoverNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryExecute">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotMemoryExecute Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryExecute.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryExecute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotMemoryExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryExecute.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotMemoryExecute Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryExecute"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryExecute}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryExecute))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotMemoryExecute.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryExecute&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the DotMemoryNoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotMemoryNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the DotMemoryNoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.DotMemoryNoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+DotMemoryNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.DotMemoryNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.DotMemoryNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.DotMemoryNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ExecuteWithBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+ExecuteWithBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.ExecuteWithBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.ExecuteWithBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.ExecuteWithBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ExecuteWithBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.ExecuteWithBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+ExecuteWithBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.ExecuteWithBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.ExecuteWithBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.ExecuteWithBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunConfigExe Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigExe}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigExe))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigExe.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigExe&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunConfigExe Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigExe"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigExe}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigExe))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigExe.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigExe&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunConfigMethod Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigMethod))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunConfigMethod Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigMethod"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigMethod}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigMethod))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigMethod.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigMethod&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunConfigProject Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunConfigProject Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigProject"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigProject}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigProject))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigProject.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigProject&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunConfigRun Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunConfigRun Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunConfigRun"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunConfigRun}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunConfigRun))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunConfigRun.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunConfigRun&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunDebug Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunDebug Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebug"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunDebugNoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunDebugNoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunDebugNoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunNoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunNoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunNoDebug Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunNoDebug Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebug"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebug}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebug))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoDebug.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebug&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild">
             <summary>
              <para>
                <para>Autogenerated identifier class for the RunNoDebugNoBuild Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the RunNoDebugNoBuild Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons.RunNoDebugNoBuild"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.RunConfigThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:RunConfigThemedIcons+RunNoDebugNoBuild}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(RunConfigThemedIcons.RunNoDebugNoBuild))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = RunConfigThemedIcons.RunNoDebugNoBuild.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;RunConfigThemedIcons.RunNoDebugNoBuild&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.resources.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.ConnectionPointCookie_AdviseFail">
            <summary>
              Looks up a localized string similar to Could not advise the connection point of type {0} on {1}. {2}.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.ConnnectionPointCookie_CantFindNoReason">
            <summary>
              Looks up a localized string similar to Could not find the connection point of type {0} on {1} due to an unknown reason..
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.ConnnectionPointCookie_CantFindWithReason">
            <summary>
              Looks up a localized string similar to Could not find the connection point of type {0} on {1}. {2}.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.Editor_FileOpenFail_Generic">
            <summary>
              Looks up a localized string similar to Could not open the project file {0}..
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.Editor_FileOpenFail_NoProject">
            <summary>
              Looks up a localized string similar to Could not open the project file {0} because it does not belong to any known Visual Studio project..
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.resources.SR.Editor_OpenForEditing">
            <summary>
              Looks up a localized string similar to Open for Editing.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:VsIntegrationThemedIcons+ProductSuspended}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(VsIntegrationThemedIcons.ProductSuspended))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes — either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = VsIntegrationThemedIcons.ProductSuspended.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(VsIntegrationThemedIcons.ProductSuspended), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;VsIntegrationThemedIcons.ProductSuspended&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.ProductSuspended">
             <summary>
              <para>
                <para>Autogenerated identifier class for the ProductSuspended Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.ProductSuspended.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:VsIntegrationThemedIcons+ProductSuspended}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(VsIntegrationThemedIcons.ProductSuspended))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = VsIntegrationThemedIcons.ProductSuspended.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;VsIntegrationThemedIcons.ProductSuspended&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.ProductSuspended.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the ProductSuspended Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.ProductSuspended"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:VsIntegrationThemedIcons+ProductSuspended}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(VsIntegrationThemedIcons.ProductSuspended))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = VsIntegrationThemedIcons.ProductSuspended.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;VsIntegrationThemedIcons.ProductSuspended&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.VsShortcutOptionsPage">
             <summary>
              <para>
                <para>Autogenerated identifier class for the VsShortcutOptionsPage Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.VsShortcutOptionsPage.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:VsIntegrationThemedIcons+VsShortcutOptionsPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(VsIntegrationThemedIcons.VsShortcutOptionsPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = VsIntegrationThemedIcons.VsShortcutOptionsPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;VsIntegrationThemedIcons.VsShortcutOptionsPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.VsShortcutOptionsPage.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the VsShortcutOptionsPage Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons.VsShortcutOptionsPage"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.VsIntegration.Resources.VsIntegrationThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:VsIntegrationThemedIcons+VsShortcutOptionsPage}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(VsIntegrationThemedIcons.VsShortcutOptionsPage))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = VsIntegrationThemedIcons.VsShortcutOptionsPage.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;VsIntegrationThemedIcons.VsShortcutOptionsPage&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.VsDocumentModelExceptionsStrategy.LogExceptionLoudlyOrSilently(System.Exception)">
            <summary>
            Turned all of the exceptions ON, let's see if they were suppressed for good.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.ExecRunConfigView">
            <summary>
            ExecRunConfigView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.ExecRunConfigView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigCommonView">
            <summary>
            RunConfigCommonView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigCommonView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigMethodView">
            <summary>
            RunConfigMethodView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigMethodView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigProjectView">
            <summary>
            RunConfigProjectView
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigProjectView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.RunConfig.RunConfigSettingsDialog">
            <summary>
            RunConfigSettingsDialog
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunConfigSettingsDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.DebugLaunch(EnvDTE.Project,System.Boolean)">
            <summary>
            Do a project launch just like VS does it
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.GetStartupInfo(EnvDTE.Project)">
            <summary>
            Gets the process start info (executable, cmdline args, and working folder) for the startup project of the solution.
            Throws on fatal errors.
            </summary>
            <param name="projStartup"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.RunConfig.RunStartupProject.GetStartupProject(EnvDTE.DTE)">
            <summary>
            Gets the VS Project for the startup project in the solution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.SolutionBuilders.VsSolutionBuilder">
            <summary>
            Invokes Visual Studio to build the projects.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.SolutionBuilders.VsSolutionBuilder.ProtoGetProjectLayers(System.Collections.Generic.IEnumerable{JetBrains.ProjectModel.IProject})">
            <summary>
            [PROTOTYPE IMPLEMENTATION, INTERNAL USE ONLY]
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.SolutionBuilders.VsSolutionBuilder.InitAttachDevenv(JetBrains.DataFlow.Lifetime)">
            <summary>
            Listen to the DEVENV events.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.SolutionBuilders.VsSolutionBuilder.BeginRun(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilder.CreateSession(JetBrains.IDE.SolutionBuilders.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilder.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.SolutionBuilders.VsSolutionBuilder.CreateSession(JetBrains.IDE.SolutionBuilders.BuildSessionSeverity,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="F:JetBrains.VsIntegration.Internal.Actions.DebugActions.DTEPropertiesTesterWindow.ShowWindow">
            <summary>
            Shows the monitor window.
            Routed thru a signal to deactivate on disposal.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Internal.Actions.DebugActions.DTEPropertiesTesterWindow.DTEPropertiesTesterShowAction.JetBrains#UI#ActionsRevised#IExecutableAction#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Internal.Actions.DebugActions.DTEPropertiesTesterWindow.DTEPropertiesTesterShowAction.JetBrains#UI#ActionsRevised#IExecutableAction#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBufferEx.IsIgnoreBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            TODO: refactor. (Leonid.Shalupov 2010-09-10)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBufferEx.SetIgnoreBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,System.Boolean)">
            <summary>
            TODO: refactor. (Leonid.Shalupov 2010-09-10)
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Internal.Logging.LogConfigPage">
            <summary>
            LogConfigPage
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Internal.Logging.LogConfigPage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon">
            <summary>
            Icons to be emitted to package's CTO and (since VS14) to image manifest.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.IconId">
            <summary>
            Identifier of the icon which was precompiled into the product DLL.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.ImageID">
            <summary>
            Image ID for CTO and image manifest.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageIcon.InImageManifest">
            <summary>
            Whether the icon should be includec into the image manifest.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsResetCurrentFrameTextControlWhenSwitchingVsFrames.GetVsActiveTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2)">
            <summary>
            Looks up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> we consider active.
            </summary>
            <param name="vsTextManager2"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsResetCurrentFrameTextControlWhenSwitchingVsFrames.InitResetCurrentFrameTextControl(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell,JetBrains.TextControl.Impl.TextControlProperties,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell,JetBrains.Threading.IThreading)">
            <summary>
            Resets the last-focused when the selection travels really far.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel">
            <summary>
            Exposes the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel">Visual Studio Shell Selection</see>, including <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents">its events</see>.
            This class requires the Project Model Module Zone, see base class for Shell-only uses.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell">
            <summary>
            Exposes the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">Visual Studio Shell Selection</see>, including <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents">its events</see>.
            This is the base class which knows only of the Shell. To see hierarchy-related events, use the Project Model Module Zone aware derived class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelection">
            <summary>
            Here used to be a class wrapping the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">Visual Studio Shell Selection</see>, but it had to be split into Project Model Module Zone aware and non-aware parts, so choose between the class' derived types.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell,JetBrains.Util.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.SelectedWindowFrame">
            <summary>
              <para>Gets the live value of the currently-selected window frame.</para>
              <para>The value is the same as in <see cref="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectedWindowFrame"/>, but with change notifications.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell.VsMonitorSelectionShell">
            <summary>
            Access to VS selection interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell,JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel,Microsoft.VisualStudio.Shell.Interop.IVsSolution,JetBrains.Util.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.Selection">
            <summary>
            Exposes the current Visual Studio selected items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChanged">
            <summary>
            Fires when selection changes in Visual Studio.
            Exposes the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)"/> sink.
            Warning: the old selection object in the arguments is known to be inaccurate, use
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.VsMonitorSelectionProjectModel">
            <summary>
            Access to VS selection interface.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChangedEventArgs.ItemsNew">
            <summary>
            Currently selected items.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.ProjectModel.VsSelectionProjectModel.SelectionChangedEventArgs.ItemsOld">
            <summary>
            Previous selection. Could well be <c>Null</c> if not supported by impl. In VS9 and below, multiselection object for old items is not available because it's singleton and already contains selection for the new items. In this case, we'd pass <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelection">
            <seealso cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell"/>
            <seealso cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel"/>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell">
            <summary>
            A part of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection"/> interface which does not know about the Project Model Module Zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectedWindowFrame">
            <summary>
              <para>Gets the selected window frame. Might be <c>Null</c> when there's no window frame selected (check for <see cref="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.IsNotNull"/>).</para>
              <para>If you want to track this value live, use the <see cref="!:VsSelection.SelectedWindowFrame"/> property.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.GetSelectionContainer">
            <summary>
            Tries to get vs selection container from the current monitor selection
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.TryGetCurrentElementValue``1(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSELELEMID)">
            <summary>
            Tries to get the value and then to cast it to the requested type.
            </summary>
            <returns>The value, or <c>Null</c> if there's no value or if it's of a wrong type.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell.AdviseSelectionEventsInternal(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents)">
            <summary>
            Do not use directly. Use <see cref="T:JetBrains.VsIntegration.Interop.Events.Shell.VsSelectionShell"/> or its Project Model aware counterpart instead.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Transactions.IVsFilesAndFoldersEditor">
            <summary>
            Implementation of files and folders operation is Visual Studio for a certain type of project
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VsOpenSolutionsInIde">
            <summary>
            VS specific IDE solution opener.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSSolutionManager.StartOpenExistingSolution(JetBrains.Util.FileSystemPath,System.Action)">
            <summary>
            This method is consumed by Integration Tests only
            Starts loading solution and executes specified callback after
            </summary>
            <param name="solutionFilePath">Path to solution file</param>
            <param name="callback">Callback to call on finish</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSSolutionManager.OpenExistingSolution(JetBrains.Util.FileSystemPath)">
            <summary>
            Create instance of solution using specified solution file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.Adapters.IVCAdaptersJustVsXX">
            <summary>
            This is the central interface which wires up all of the adapters.
            Get it as a solution component.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VisualC.Adapters.IVCConfigurationJustVsXX.GetEvaluatedPropertyValue_SinceVs11(System.String)">
            <summary>
            Would throw before VS11. Might as well have separate interfaces, but it's a bit of a mess for the single method.
            </summary>
            <since>VS 11</since>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.Adapters.VCeFileTypeJustVsXX">
            <summary>
            Used by the <see cref="P:Microsoft.VisualStudio.VCProjectEngine.VCFile.FileType" /> property.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.Adapters.VCTypeOfDebuggerJustVsXX">
            <summary>
            Corresponds to <see cref="!:Microsoft.VisualStudio.VCProjectEngine.TypeOfDebugger"/> 
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.VCFileMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.IVSDescriptorBuilder">
            <summary>
            Base interface for all custom builders, that produce <see cref="T:JetBrains.ProjectModel.Update.IProjectDescriptor"/> and its content from Visual Studio
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.IVSProjectFilePropertiesBuilder.FillProjectFilePropertiesDispatch(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem,System.Object,JetBrains.ProjectModel.Properties.IProjectFileProperties)">
            <summary>
            Fills project file properties using dispatch (fast) API. If fails, automation will be called.
            </summary>
            <param name="hitem">Hierarchy item which properties is to be filled</param>
            <param name="browseObject">Its browse object (some providers may use it)</param>
            <param name="projectFileProperties">Properties to be filled</param>
            <returns>Whether filling was successful</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.VCProjectEngineMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.VcxProjectContentBuilderMirror">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.VisualC.VcxProjectEventHandler">
            <summary>
            This class is shared across all VS versions.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.ProjectProperties.ManagedProjectPropertiesBuilder.GetOutputFilePath(EnvDTE.Configuration)">
            <summary>
            When C++ project is being queried while solution is opening, COMException is thrown
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.ChangeExportedVsSettingsUtil.UpdateShortcuts(System.IO.TextWriter,JetBrains.Util.FileSystemPath,System.Func{System.String,System.String,System.String,System.Boolean,System.Boolean},System.Action{System.IO.TextWriter,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            Writes file with changed shortucts to import
            </summary>
            <param name="to">Destination file writer</param>
            <param name="exportedSettingsPath">Path to exported settings file</param>
            <param name="isToBeRemoved">Function to process read shortcut. Returns true if the shortcut should not be copied to output.</param>
            <param name="writeShortcutsAction">Action to be called when it's time to write new  shortcuts</param>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.IVsDocumentReadOnlyRegions">
            <summary>
            Can create readonly regions over various VS documents.
            Brought out of the Markup Model because the latter belongs to the text control zone, and this interface is required even in the DocumentModel zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.IVsDocumentReadOnlyRegions.MakeReadonly(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.DocumentModel.VsDocumentCommon,JetBrains.Util.TextRange)">
            <summary>
            Creates a readonly lock for the given text range.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsCtoCommandConstants.CommandNamePrefix">
            <summary>
            The prefix we add to all command names we generate for the CTO, to distinguish them from other commands.
            Normally VS adds the parent menu name as a prefix with a dot, but this happens only for menu-parented commands, and we want a consistent behavior for all our commands.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsCtoCommandConstants.GuidVsGroupsCommandSet">
            <summary>
              <para>
                <c>#define GuidVsGroupsCommandSet {9142D617-6500-478F-9DE9-3185145372D0}</c>
              </para>
              <para>Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
                The IDs are entirely autogenerated by VSCT/CTO tool.
                In a VS-integrated product, must be overridden with a meaningful GUID.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.OptionsPage.VsShortcutOptionsPage">
            <summary>
            The environment options page.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsKeyBindingsCache">
            <summary>
            Caches VS key bindings.
            </summary>
            <remarks>Note: the cache does not initialized automatically, one has to call CollectKeyBindings.</remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.IVsOleCommandTargetExecuter.ExecuteVsCommand(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.Object@,System.Object@)">
            <summary>
            Executes a command in the Visual Studio main OLE Command Target.
            </summary>
            <param name="commandid">A GUID:int ID of the command.</param>
            <param name="cmdExecOpt">Specifies how the object should execute the command.</param>
            <param name="customIn">Optional. In-parameter for the command.</param>
            <param name="customOut">Optional. Out-parameter (result) of the command.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.IVsOleCommandTargetExecuter.QueryVsCommandStatus(System.ComponentModel.Design.CommandID)">
            <summary>
            Query if the command is available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetExecuter.ExecuteVsCommand(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.Object@,System.Object@)">
            <summary>
            Executes a command in the Visual Studio main OLE Command Target.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.CommandTargetQueryStatus(System.Guid,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT*)">
            <summary>
            Queries the command status against a list of Visual Studio identifiers.
            Capable of handling the comboboxes and their aux commands.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.CommandTargetExec(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)">
            <summary>
            Executes a command against its Visual Studio identifier.
            Capable of handling the comboboxes and their aux commands.
            </summary>
            <param name="commandid">The command.</param>
            <param name="cmdExecOpt">Specifies how the command should be handled. Only two modes are distinguished: execution (any type, user-modal or not), and help.</param>
            <returns>HRESULT to give out to OLE callers.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.QueryProductCommandStatus(JetBrains.UI.ActionsRevised.Loader.IActionDefWithId,Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT*)">
            <summary>
            Return the command status of R# action.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.QueryOverriddenCommandStatus(JetBrains.VsIntegration.Shell.Actions.Revised.VsOverridingDef)">
            <summary>
            Return the command status of an overridden VS command, Null if the command should not be intercepted.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.TryFallBackToVs(JetBrains.UI.ActionsRevised.Loader.IActionDefWithId,System.Action{System.ComponentModel.Design.CommandID})">
            <summary>
            Try fall R# command back to VS command.
            </summary>
            <remarks>
            Works for overridden VS commands only.
            If R# action is not supported (R# doesn't support the current language), try to fall back to the overridden VS command.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Actions.Revised.VsOleCommandTargetHandler.Evaluate(JetBrains.UI.ActionsRevised.Loader.IActionDefWithId)">
            <summary>
            Evaluate the action.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsActionsDefs.GuidToVsctSymbolPart">
            <summary>
            VsctGuidSymbolAttribute marked type to it's vsct guid
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Actions.Revised.VsActionsDefs.PartTypeToVsAttributes">
            <summary>
            VsctIDSymbolAttribute marked class to it's command id and command type.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResourceWithAssignedId">
            <summary>
            See <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyEmitter">
            <summary>
            The entry point for emitting the VS package assembly with all of the generated classes and resources.
            NOTE: most of the particular operations reside next to subsystems which require those operations, like tool window icons etc, or in the Platform VS-Core assembly where interfaces are declared. This is the preferred strategy.
            Some components however essentially belong to buildtasks assembly (because they reference non-runtime DLLs, such as VSCT compiler), so this cannot be removed.
            That's why this class has to remain here.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyEmitter.MarkEmittedAssemblyZone(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.VsIntegration.Shell.Install.VsEnvironmentAutoselectedZoneArtifact,JetBrains.Util.ILogger)">
            <summary>
            To enable instantiating components from the emitted assembly, it must be zone marked.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsCmdNameMappingEx.MapCommandIdToVsCommandName(Microsoft.VisualStudio.Shell.Interop.IVsCmdNameMapping,System.ComponentModel.Design.CommandID)">
            <summary>
            Translates the AppID — GUID:ID mapping for VS commands.
            Does not query Registry, like DTE Commands object would do for names.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.TextControlActionAttribute">
            <summary>
            Even though marks the action as related to text control, is not marked with text controls zone itself, because it's used for marking the common VS Command IDs set which should be shell-available in all zones.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Updates.UpdateLocalEnvironmentInfoVs">
            <summary>
            Extends <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> with VisualStudio-related info.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Updates.UpdatesLocalInfoManagerVs">
            <summary>
            The VisualStudio-aware environment info harvester.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget">
            <summary>
            Anonymous implementation for OLE command target, optionally taking a guard.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget.ExecHandler">
            <summary>
            Executes the command just like in <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.AnonymousOleCommandTarget.QueryStatusHandler">
            <summary>
            Splits <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)"/> into one call per action.
            </summary>
            <param name="commandid">The command.</param>
            <param name="sOutCmdText">The box is non-Null if you're allowed to modify the command text. Set box contents (initially Null) to supply text.</param>
            <returns>OLE command status. N.B. <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OLECMDF.OLECMDF_SUPPORTED"/>, or your value will be ignored.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsDebuggerMonitor">
            <summary>
            Monitors changes of the debugger state.
            </summary>
            The difference between DebuggerState property and DebuggerStateChanged signal is that the property does't reflect all the changes.
            For example you are standing at a breakpoint and than run to the next breakpoint.
            IVsDebuggerEvents can skip the Run state and generate the next Breakpoint event only.
            So the value of DebuggerState property won't changed, but DebuggerStateChanged signal will be raised.
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsProjectFileExtensionMappingIde">
            <summary>
            Combines Project Model and Text Controls for collecting the <see cref="T:JetBrains.VsIntegration.ProjectModel.ProjectModel.VsProjectFileExtensionMapping"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.VsProjectFileExtensionMappingIde.SubscribeToTextControlEvents(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IViewable{JetBrains.VsIntegration.ProjectModel.ProjectModel.IVsEditorGuidToFileTypeConverter},JetBrains.TextControl.TextControlManager,JetBrains.ProjectModel.SolutionsManager,JetBrains.Application.IShellLocks)">
            <summary>
            // Do not inline method to aviod local variables getting to a common closure with other lambda in .ctor
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsResultListIdeActions">
            <summary>
            Binds to the VS ResultList.
            When our result list is present, it's guaranteed to also be present in VS (because we NULL it down when VS publishes smth else), so we might be calling directly in this case.
            When our result list is missing, check VS's to see if it's there. If not, return disabled state (VS' action would never report as disabled). If yes, delegate to VS for action execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.VsResultListSync">
            <summary>
            Syncs our results list management with VS'es.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart">
            <summary>
            An artifact for providing clipart of a VS extension.
            Create a build step yielding this artifcat in your product so that the package assembly emitter and VSIX writer could use it.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart.BmpForVsSplashScreen">
            <summary>
            The Splash Screen icon, see <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdBmpSplash(System.UInt32@)"/>.
            This resource will be post-build-compiled into RESX.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsExtensionClipart.ProductPreviewExtensionManager">
            <summary>
            Gets an image that should appear on the product entry in VS 10 Extension Manager.
            Optional.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageProjectItemDiskFile">
            <summary>
            To add a file to the project to be compiled into assembly:
            (1) Add a <see cref="!:VsPackageMsbuildItem"/> so that it would be included with the project.
            (2) Add a <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageProjectItemDiskFile"/> to write the content on disk when building the project, under the same relative path as the <see cref="!:VsPackageMsbuildItem"/>'s <see cref="!:VsPackageMsbuildItem.ItemSpec"/>.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartResourceIds.IdBmpSplash">
            <summary>
            Bitmap for the VS Splash Screen. Applicable to VS 9 and below. Or probably even to VS7, as VS8-9 seem to use about box icon for the splash screen.
            Emitted to resources, value assigned here by package emitted class. Zero means not supported.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartResourceIds.IdIcoLogoForAboutbox">
            <summary>
            Icon for the VS About Box. Applicable to all VS versions. VS 8-9 also use this for splash screen.
            Emitted to resources, value assigned here by package emitted class. Zero means not supported.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageHostComponentsEmitter">
            <summary>
            Emits the host components which should be available in the component container at runtime.
            Serializes them into the resources as a structured storage.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.ProjectProperties.ProjectActiveConfigurationAccessor">
            <summary>
            Project.ConfigurationManager.ActiveConfiguration is way slow comparing to Project.ConfigurationManager.Item(configName, platformName)
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.DebugVsActionManagerServices">
            <summary>
            Debug helper for VS Action Manager.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.OleCmdText">
            <summary>
            A helper class taken from the JetBrains VSIP Helper.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsConflictingShortcutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.Guid,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSStd97CmdID)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="cmdGroupGuid"> Real guid of command usually it is: VSConstants.GUID_VSStandardCommandSet97</param>
             <param name="cmdid">Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.ComponentModel.Design.CommandID)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="commandid"> Real GUID:ID of command usually it is: VSConstants.GUID_VSStandardCommandSet97, Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerEx.ExecuteVsCommand(JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,System.Guid,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSStd97CmdID,System.Object@,System.Object@)">
             <summary>
             used to call VS internal commands
             </summary>
            <param name="actionman"></param>
            <param name="cmdGroupGuid"> Real guid of command usually it is: VSConstants.GUID_VSStandardCommandSet97</param>
             <param name="cmdid">Id of command look into http://msdn.microsoft.com/en-us/library/microsoft.visualstudio.vsconstants.vsstd97cmdid(VS.80).aspx</param>
             <param name="customIn">custom IN param, see comand</param>
             <param name="customOut">custom OUT Param, see command</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Actions.Revised.VsActionManagerPriorityCommandTarget">
            <summary>
            Intercepts first-chance VS command execution to enable overriding VS commands.
            Also handles dynamic product commands because they wouldn't be routed to the package, even though they have its command set guid.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerSettings.ShortcutSchemeName">
            <summary>
            Overrides <see cref="F:JetBrains.UI.UserInterfaceSettings.ShortcutSchemeName"/>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsStringResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.ActionManagement.VsStringResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.ActionManagement.VsStringResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.ActionManagement.VsStringResources.Localization">
            <summary>
              Looks up a localized resource of type System.IO.UnmanagedMemoryStream similar to System.IO.MemoryStream.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommand.Equals(JetBrains.VsIntegration.Shell.ActionManagement.VsCommand)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommand.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManagerMnemonicHelper">
            <summary>
            Handles updating mnemonics on action groups.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandExtensions.TryGetItem(EnvDTE.Commands,System.ComponentModel.Design.CommandID)">
            <summary>
            Calls the commands collection by the GUID:INT command ID. Returns <c>Null</c> if missing.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers">
            <summary>
            Manipulates VS commands and command bars.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.EnumDescendantCommandBars(Microsoft.VisualStudio.CommandBars.CommandBar,JetBrains.Util.CompoundException)">
            <summary>
            BFS-enums descendant command bars of a command bar. Includes the starting command bar itself as the first item.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.EnumDescendantControls(Microsoft.VisualStudio.CommandBars.CommandBar,JetBrains.Util.CompoundException)">
            <summary>
            Does BFS on descendant controls and command bars of a command bar.
            Each returned item is the descandant control plus an array of its parents, top to bottom.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.GetLocationInMainMenu(System.ComponentModel.Design.CommandID,EnvDTE.DTE)">
            <summary>
            <para>Looks up the command in the main menu. If found, returns the step-by-step path to the action, including the name of the command that represents the action.</para>
            <para>If not found, returns <c>""</c>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.GetVsCommandAutomationObject(System.ComponentModel.Design.CommandID,EnvDTE.DTE)">
            <summary>
            Gets the VS Automation (DTE) object by the ID of a command.
            Avoid using automation objects whenever possible, prefer early-bound COM interfaces when available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpers.TryGetVsCommandAutomationObject(System.ComponentModel.Design.CommandID,EnvDTE.DTE)">
            <summary>
            Gets the VS Automation (DTE) object by the ID of a command.
            Avoid using automation objects whenever possible, prefer early-bound COM interfaces when available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpersTodo.ParseVsCommandNameOrCommandId(System.String,System.ComponentModel.Design.CommandID@,System.String@)">
            <summary>
            Parses a string representation of a VS command, which can either be a “<c>(GUID:INT)</c>” command ID, or a command name.
            </summary>
            <param name="commandstring">String to parse.</param>
            <param name="commandid">GUID:INT command ID. Mutually exclusive with <paramref name="cmdName"/>.</param>
            <param name="cmdName">String VS command name. Mutually exclusive with <paramref name="commandid"/>.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandHelpersTodo.EnumerateAllCommandBars(EnvDTE.DTE)">
            <summary>
            Does a recursive enumeration on VS command bars.
            </summary>
            <param name="dte"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter">
            <summary>
            Roundtripping for <see cref="T:System.ComponentModel.Design.CommandID"/> in our format.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertFromInvariantString(System.String)">
            <summary>
            Parses the special format of the <see cref="T:System.ComponentModel.Design.CommandID"/> we use in Actions.Xml for referring to VS actions.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertToInvariantString(System.ComponentModel.Design.CommandID)">
            <summary>
            Converts a <see cref="T:System.ComponentModel.Design.CommandID"/> to a string so that it could roundtrip with <see cref="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)"/>.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CommandID_To_String(System.ComponentModel.Design.CommandID,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:System.ComponentModel.Design.CommandID"/> to a string so that it could roundtrip with <see cref="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)"/>.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.String_To_CommandID(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the special format of the <see cref="T:System.ComponentModel.Design.CommandID"/> we use in Actions.Xml for referring to VS actions.
            It contains the GUID:ID of a command in the “(GUID:INT)” format.
            Eg: <c>({D309F791-903F-11D0-9EFC-00A0C911004F}:260)</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.ActionManagement.VsCommandIDConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.ActionManagement.VsLocalizer.XamlUIDesignerScope">
            <summary>
            First appeared in VS11
            Necessary to override shortcuts in the scope as well as in <see cref="T:EnvDTE.TextEditor"/>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorUserControl">
            <summary>
            This class is used to implement CodeEditorUserControl
            </summary>
            <seealso cref="T:System.Windows.Forms.UserControl"/>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorUserControl.Init(JetBrains.VsIntegration.Shell.RawVsServiceProvider,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Creation and initialization of <see cref="T:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow"/> class.
            </summary>
            <param name="serviceProvider">The IOleServiceProvider interface is a generic access mechanism to locate a globally unique identifier (GUID) identified service.</param>
            <param name="textLines"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorUserControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a
            regular input key or a special key that requires preprocessing.        
            </summary>
            <param name="keyData">Specifies key codes and modifiers</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorUserControl.OnGotFocus(System.EventArgs)">
            <summary>
            Overrides OnGotFocus method to handle OnGotFocus event
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorUserControl.OnSizeChanged(System.EventArgs)">
            <summary>
            Overrides OnSizeChanged method to handle OnSizeChanged event
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow">
            <summary>
            This class inherits from NativeWindow class, that provides a low-level encapsulation of a window handle and a window procedure
            </summary>
            <seealso cref="T:System.Windows.Forms.NativeWindow"/>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.myCodeWindow">
            <summary>
            Reference to VsCodeWindow object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.myCommandHwnd">
            <summary>
            Command window handle
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.myCommandTarget">
            <summary>
            The IOleCommandTarget interface enables objects and their containers to dispatch commands to each other.
            For example, an object's toolbars may contain buttons for commands such as Print, Print Preview, Save, New, and Zoom. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.myEditorHwnd">
            <summary>
            Editor window handle
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.myServiceProvider">
            <summary>
            Service provider
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.CreateCodeWindow(System.IntPtr,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow@,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Used to create Code Window
            </summary>
            <param name="parentHandle">Parent window handle</param>
            <param name="codeWindow">Represents a multiple-document interface (MDI) child that contains one or more code views.</param>
            <param name="textBuffer"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.CreateObject(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid,System.Guid)">
            <summary>
            Creates an object
            </summary>
            <param name="localRegistry">Establishes a locally-registered COM object relative to the local Visual Studio registry hive</param>
            <param name="clsid">GUID if object to be created</param>
            <param name="iid">GUID assotiated with specified System.Type</param>
            <returns>An object</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.Focus">
            <summary>
            Sets focus to Editor's Window
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.Init(System.Windows.Forms.UserControl,JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Window initialization
            </summary>
            <param name="parent">Control, that can be used to create other controls</param>
            <param name="textLines"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.AssignHandle(System.IntPtr)">
            <summary>
            Make handle assignment go thru our code.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.QueryService``1(System.Type)">
            <summary>
             This method is used to get service of specified type
            </summary>
            <typeparam name="InterfaceType">A name of the interface which the caller wishes to receive for the service</typeparam>
            <param name="serviceType">A name of the requested service</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.DestroyHandle">
            <summary>
            Releases the handle, previously assigned in Init method
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched
            </summary>
            <param name="m">The message to be dispatched. You cannot modify this message.</param>
            <returns>True to filter the message and stop it from being dispatched; 
            false to allow the message to continue to the next filter or control.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Executes a specified command or displays help for a command.
            </summary>
            <param name="pguidCmdGroup">Pointer to command group</param>
            <param name="nCmdId">Identifier of command to execute</param>
            <param name="nCmdexecopt">Options for executing the command</param>
            <param name="pvaIn">Pointer to input arguments</param>
            <param name="pvaOut">Pointer to command output</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            Queries the object for the status of one or more commands generated by user interface events.
            </summary>
            <param name="pguidCmdGroup">Pointer to command group</param>
            <param name="cCmds">Number of commands in prgCmds array</param>
            <param name="prgCmds">Array of commands</param>
            <param name="pCmdText">Pointer to name or status of command</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.Area">
            <summary>
            Determines editor's window placement
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CodeEditorNativeWindow.CodeWindow">
            <summary>
            Reference to VsCodeWindow object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.VsCodeEditorUserDataKey">
            <summary>
            Key for <see cref="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.GetByTextControl(JetBrains.TextControl.ITextControl)"/> and <see cref="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.TryGetByTextControl(JetBrains.TextControl.ITextControl)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.GetByTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Gets the VS Code Editor that owns the text control. Fails if that's not so.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.TryGetByTextControl(JetBrains.TextControl.ITextControl)">
            <summary>
            Checks if the text control is owned by a VS Code Editor.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.GetVsTextViewOleCommandTarget">
            <summary>
            Gets the command target for the current VS text view.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.PushOleCommandFilter(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
            <summary>
            Places an OLE command filter to the text control filters chain at the highest priority.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.SyncToVsGuarded">
            <summary>
            Forces sync of text control models to the VS source.
            Must be called in a guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.SyncToVsUnguarded">
            <summary>
            Callable in an unguarded context, causes <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.SyncToVsGuarded"/> to be executed in the guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.Dispose(System.Boolean)">
            <summary/>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.</remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#EmulateEnter">
            <summary>
            Emulates pressing the Enter key in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#EmulateTyping(System.Char)">
            <summary>
            Emulates typing in text control. Will cause our and host handlers to be executed. The handler will be executed in a reentrancy-safe context.
            </summary>
            <param name="c">The character to amulate typing of.</param>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.IsVsAlive">
            <summary>
            Gets whether the VS implementation of the text control is currently alive or not.
            The text control is disposed of under a guard, which is much later than the native VS object ceases to exist.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.IsVsDead">
            <summary>
            Gets whether the VS implementation of the text control is already dead or not.
            The text control is disposed of under a guard, which is much later than the native VS object ceases to exist.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Lifetime">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.JetBrains#TextControl#ITextControl#Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.CreateVsCodeEditorParams">
            <summary>
            Creates a VS Text Control that's a <see cref="T:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl"/>.
            Call <see cref="M:JetBrains.VsIntegration.TextControl.CodeEditorEmbedding.VsCodeEditorControl.GetByTextControl(JetBrains.TextControl.ITextControl)"/> on the text control created to get the WinForms control you can plant on your window.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Diagnostics.VsLastErrorExceptionReportDataProvider">
            <summary>
            Gets the detailed text of the last VS error message and attaches to the exception data.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Diagnostics.VsVersionExceptionReportDataProvider">
            <summary>
            VS versions on reported exceptions.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.DocumentEx">
            <summary>
            VS-specific exts to document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.DocumentEx.TryGetOleUndoManager(JetBrains.DocumentModel.IDocument,JetBrains.VsIntegration.ProjectDocuments.IVsOleUndoManagerProvider)">
            <summary>
            Returns an OLE Undo Manager, if it's available for this kind of documents and the document is currently open.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.IVsOleUndoManagerProvider">
            <summary>
            Switching implementation for getting an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager"/> of a VS document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.IVsOleUndoManagerProvider.TryGetOleUndoManager(JetBrains.DocumentModel.IDocument)">
            <summary>
            Returns an OLE Undo Manager, if it's available for this kind of documents and the document is currently open.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.VsDocumentCommon.PersistDocData">
            <summary>
            Gets the persist-doc-data interface, if implemented by this document, and when this document is really attached to any underlying VS buffer.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.VsDocumentManagerSynchronization">
            <summary>
            Allows callbacks from VS that come in response to our actions to merge into the current transaction.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.DocumentModel.VsDocumentManagerSynchronization.UnguardedCallbacks">
            <summary>
            Allows callbacks from VS that come in response to our actions to merge into the current transaction.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsRegisterHighlighterAttributeEx.GetMarkerTypeGuid(JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute,JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Gets the GUID of the attribute, either the hard-coded one, or the stabily-generated.
            </summary>
            <param name="attribute">CLR attribute instance.</param>
            <param name="hostInfo">The product identity to ensure different products loaded into the same VS do not conflict on GUIDs.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsRegisterHighlighterAttributeEx.GetMarkerTypeGuid(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Application.IApplicationHost)">
            <summary>
            Gets the GUID of the attribute, either the hard-coded one, or the stabily-generated.
            </summary>
            <param name="attribute">Part catalog attribute instance.</param>
            <param name="applicationHost">The product identity to ensure different products loaded into the same VS do not conflict on GUIDs.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.Documents.Whidbey.FileSystemDocumentOperationsHandlerWhidbey">
            <summary>
            Pluggable part of the <see cref="T:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey"/> implementation.
            When the document is not open in Visual Studio RDT, operates on the disk files directly.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.Documents.Whidbey.IDocumentOperationsHandlerWhidbey">
            <summary>
            Base interface for the pluggable part of the <see cref="T:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey"/> implementation that switches between feeding on file system entities and Visual Studio RDT Text Buffers (preferred if a document is known to the RDT).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.IDocumentOperationsHandlerWhidbey.ExpectChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            We're doing smth to VS that it will report back to us in an event, ack the event and let into the transaction.
            Might be nested.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.Documents.Whidbey.IDocumentOperationsHandlerWhidbey.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.FileSystemDocumentOperationsHandlerWhidbey.ExpectChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            We're doing smth to VS that it will report back to us in an event, ack the event and let into the transaction.
            Might be nested.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.Documents.Whidbey.FileSystemDocumentOperationsHandlerWhidbey.FileDidNotExist">
            <summary>
            The file did not exist at the moment when the operation handler was created.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.Documents.Whidbey.FileSystemDocumentOperationsHandlerWhidbey.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.MapVsCookieToProjectFile.TryMapDocCookieToProjectFile(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Uses the mapping we maintain to check if we know a project file related to this doccookie.
            Does not call into VS.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.MapVsCookieToProjectFile.TryMapProjectFileToDocCookie(JetBrains.ProjectModel.IProjectFile)">
            <summary>
            Looks up the cache. Does not call into VS.
            If missed, returns <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Invalid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsInMemoryDocumentFactoryWhidbey.CreateTextBuffer(System.String,System.String)">
            <summary>
            Creates a VS Text Buffer.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsInMemoryDocumentFactoryWhidbey.CreateIdeDocumentFromText(System.String,System.String,System.Func{JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie})">
            <summary>
            Creates an <see cref="T:JetBrains.DocumentModel.IDocument"/> from the given text.
            The document implementation is specific to the Shell. In tests, this is the same as <see cref="!:IDocumentFactory.CreateSimpleDocumentFromText(string,string,System.Func&lt;JetBrains.DocumentModel.IDocument,JetBrains.Util.ModificationCookie&gt;)"/>. In Visual Studio, this is a VS Text Buffer.
            </summary>
            <param name="text">Document text.</param>
            <param name="moniker">Document moniker that uniquely identifies this document.</param>
            <param name="ensureWritableHandler">Queries whether the document is allowed to be written.</param>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.myProjectModelSynchronizer">
            <summary>
            Maps known doc cookies to project files. Multithreaded. Access must be interlocked.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnNewTextViewCreateTextControl">
            <summary>
            Needed for the Whidbey implementation flavor.
            fires whenever a new VS text control creation is detected, initiates creating a wrapper.
            In: context.
            Out: whether a text control was created.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.TryGetTextBufferDataByDocCookie(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Asks DEVENV for an <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer"/> that corresponds to the given <see cref="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE"/>, plus its hierarchy.
            Does NOT do any caching/lookup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.TryGetDocCookieByTextBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Asks DEVENV for a cookie for the text buffer. Does not use any caching/lookup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.Init_RdtEvents(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents)">
            <summary>
            Advise RDT events.
            This is the main event source, from it we learn when to create new text controls (most of them, but not all and things like changes in open documents.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.Init_TextManagerEvents(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents)">
            <summary>
            Advise TextManager events.
            From here we can also see the new text controls, but most of the time they lack binding to the project file yet by the time we get this notification.
            However, sometimes we don't get the RDT event and fallback to this (when splitting a text control, for instance).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)">
            <summary>
            Normally, we get <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> first, then <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>. This means we're creating a new code editor MDI window for the file. In this case in <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> we cannot get the filename yet from the text buffer moniker data item. Probably, the text control has not been bound to the file yet. Thus, this notification gets ignored and the <see cref="!:VsTextControlWhidbey"/> is created in response to <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>, which has all of the info necessary.
            However, when an existing code editor MDI window is split, we do not get any <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>, but instead we already have the filename as the buffer moniker in <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> callback, which we use for creating the <see cref="!:VsTextControlWhidbey"/> in this case.
            This is why neither event is enough on its own.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextBufferDataChanged(JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData)">
            <summary>
            Called when text buffer data correspondence to a project file has changed and text control is supposed to be switched to a new one
            </summary>
            <param name="textBufferData"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)">
            <summary>
            A new <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> has been created somewhere.
            This applies to all text views, both regular VS and those we create in <see cref="T:JetBrains.IDE.PersistableViewManager"/>, but the latters we naturally ignore because they fail to supply any doccookie from the RDT call.
            Normally, we get <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> first, then <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>. This means we're creating a new code editor MDI window for the file. In this case in <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> we cannot get the filename yet from the text buffer moniker data item. Probably, the text control has not been bound to the file yet. Thus, this notification gets ignored and the <see cref="!:VsTextControlWhidbey"/> is created in response to <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>, which has all of the info necessary.
            However, when an existing code editor MDI window is split, we do not get any <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnRdtBeforeDocumentWindowShow(JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.BeforeDocumentWindowShowArgs)"/>, but instead we already have the filename as the buffer moniker in <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentManagerWhidbey.OnTextManagerRegisterView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)"/> callback, which we use for creating the <see cref="!:VsTextControlWhidbey"/> in this case.
            This is why neither event is enough on its own.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey">
            <summary>
            Pluggable part of the <see cref="T:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey"/> implementation.
            This is the preferred choice, but it becomes active only when the document is open in the Visual Studio Running Documents Table.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.myMruMonikerString">
            <summary>
            Caches the moniker string for the cases when we might need it after disposing of the handler.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.UserReadOnlyLocks">
            <summary>
            Assigned by owners of this document operation handler. Each user requesting the lock of the document adds to the collection. If it's non-empty, the text control gets its lock.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.IsExpectingChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            Within a <see cref="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})"/> scope.
            Params semantics is the same as in the <see cref="T:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange"/> ctor.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.DoGetText(System.Int32,System.Int32)">
            <summary>
            Gets text from VS.
            </summary>
            <param name="start">Starting index.</param>
            <param name="len">Length, or <c>-1</c> to get to the end of the document (VS document, not our document).</param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.GetMonikerShort">
            <summary>
            If the moniker is a file path, gets just the short name of the file out of it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.Init_ConnectToStream(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer)">
            <summary>
            Stores the stream object in the field.
            Sinks stream events.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.Init_ReadOnlyBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx)">
            <summary>
            Monitors requests to make the buffer readonly, calculates and applies the cumulative state.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.OnChangeStreamTextCore(JetBrains.Util.TextRange,JetBrains.Util.TextRange)">
            <summary>
            Handles changes to VS text streams by applying them to our document text copy.
            </summary>
            <param name="oldrange">Removed range.</param>
            <param name="newrange">Inserted range.</param>
            <returns>Whether we could apply the change incrementally. <c>False</c> means we accumulated more than one pending change and had to resync the full document text.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectChangeCallbackForOurActivity(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            We're doing smth to VS that it will report back to us in an event, ack the event and let into the transaction.
            Might be nested.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamAttributes(System.Int32,System.Int32)">
            <summary>
            Notifies the client that the text stream attributes have changed.
            </summary>
            <param name="iPos">[in] Starting position of the affected text.</param><param name="iLength">[in] Length of the text affected in the text stream.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.Microsoft#VisualStudio#TextManager#Interop#IVsTextStreamEvents#OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Notifies the clients when the content of a text stream in the buffer has changed.
            </summary>
            <param name="iPos">[in] Starting position of the affected text.</param><param name="iOldLen">[in] Previous length of text.</param><param name="iNewLen">[in] New length of text.</param><param name="fLast">[in] Obsolete; ignore.</param>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange">
            <summary>
            Identifies a change we expect back from VS and are about to let into the guarded execution.
            Must be a class to preserve addremove identity.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange.#ctor(System.Nullable{JetBrains.Util.TextRange},System.Nullable{JetBrains.Util.TextRange})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange.NewRange">
            <summary>
            Range of the text being inserted by the replacement.
            Undefined if <see cref="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange.OldRange"/> is <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.Whidbey.VsDocumentOperationsHandlerWhidbey.ExpectedChange.OldRange">
            <summary>
            Range of the text being overwritten by the replacement.
            <c>Null</c> if any change is expected.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey">
            <summary>
            Document implementation for Visual InterDev over <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey.myReadOnlyLockRequests">
            <summary>
            Read-only requests for the whole document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey.GetVsTextStream">
            <summary>
            Gets the VS Text Stream, if currently working over an open VS RDT document.
            Otherwise, throws. Does not return <c>Null</c> (<see cref="P:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.IsNull"/>).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey.TryGetVsTextStream">
            <summary>
            Gets the VS Text Stream, if currently working over an open VS RDT document.
            Otherwise, <c>Null</c> (<see cref="P:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.IsNull"/>).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey.MakeReadonly(JetBrains.DataFlow.Lifetime,JetBrains.Util.TextRange)">
            <summary>
            Locks a document range temporarily to prevent it from being edited. To unlock, dispose of the return value.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey.Moniker">
            <summary>
            Gets the document moniker (an arbitrary string that helps with identifying this document).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData">
            <summary>
            TextBuffer, its item in Hierarchy, plus doc cookie.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData.Equals(JetBrains.VsIntegration.ProjectDocuments.Whidbey.VsTextBufferData)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.DocumentModel.Whidbey.VsTextBufferLoadedEventSink">
            <summary>
            Sinks the buffer load event, allows to catch the moment when the buffer completes loading its data.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.DocumentModel.Whidbey.VsTextBufferLoadedEventSink.Advise(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,System.Action,JetBrains.Threading.IThreading)">
            <summary>
            Sinks the event. Self-disposes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryHelpers.GetEmittedFactoryClassLocalName(System.Type)">
            <summary>
            Local name of the class emitted into the VS Package Assembly.
            It will be in the <see cref="!:VsPackageClassEmitter.PackageInfo.PackageClass_Namespace"/> namespace.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryHelpers.GetFactoryGuid(System.Type)">
            <summary>
            This product-specific GUID will be used for registering the emitted factory class.
            note: guid no longer need to be product specific...
            </summary>
            <param name="typeFactoryBaseClass"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryHelpers.RegisterVsEditorFactory(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory,Microsoft.VisualStudio.Shell.Interop.IVsRegisterEditors)">
            <summary>
            This method is called automatically from the inherited editor factory class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsPackageEmitsEditorFactory">
            <summary>
            Emits the derived class for <see cref="T:JetBrains.VsIntegration.IDE.EditorManager.Install.InstallVsEditorFactoryAttribute"/> into the package assembly, see the attribute for comments.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsEditorManager.TryFindTextControlForFile(JetBrains.ProjectModel.IProjectModelElement)">
            <summary>
            Looks if there's a text control for the given file currently open.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsEditorManager.TryFindTextControlForFileAdvanced(JetBrains.ProjectModel.IProjectModelElement,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame)">
            <summary>
            Looks if there's a text control for the given file currently open.
            Tries to poke into the frame to cause it open the text control if not yet open (needed for xaml aspx 'n shit).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsEditorManager.CreateTextControlForFile_OnException(System.Exception,JetBrains.Util.FileSystemPath)">
            <summary>
            Exception handling when opening text controls for documents in VS (shared between a number of functions).
            Need to show some of the errors as message boxes (eg IO exceptions).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.EditorManager.VsEditorManager.ReportUserRelatedError(System.Exception,System.String,System.String)">
            <summary>
            Reports an error that could be understood by the user and should not be submitted to the tracker, eg File Not Found.
            Shows a message box.
            These should be located at one place for easier changing of the behavior, eg switching to the mode when no modal message boxes are shown.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.ILocalRegistryEx.CreateObject(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid,System.Guid)">
            <summary>
            Creates an object.
            </summary>
            <param name="localRegistry">Establishes a locally-registered COM object relative to the local Visual Studio registry hive</param>
            <param name="clsid">GUID if object to be created</param>
            <param name="iid">GUID assotiated with specified System.Type</param>
            <returns>An object</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Extension.IVsFilterKeysEx">
            <summary>
            Extensions for IVsFilterKeys2 Visual Studio interface.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi">
            <summary>
            Shared API to the <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi">
            <summary>
            Shared API to the <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi.AttachToProcess(System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.GetInstance(System.UInt32,System.String)">
            <summary>
            Gets the API to the debugger host running in the given process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.AttachToProcess(System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient">
            <summary>
            Client for controlling the debugger in another process with <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> running in that process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient.AttachDebugger(System.Diagnostics.Process,System.Diagnostics.Process,System.String)">
            <summary>
            Instructs the remote (or local) <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> in the <paramref name="debugger"/> process to attach to the <paramref name="debuggee"/> process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostClient.DetachAll(System.Diagnostics.Process,System.String)">
            <summary>
            Instructs the remote (or local) <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer"/> in the <paramref name="debugger"/> process to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer">
            <summary>
            Runs in the debugger-aware process and receives remote requests for debugging through COM RPC.
            Advertises an <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.IDebuggerHostApi"/> / <see cref="T:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostApi"/> instance to the Running Objects Table.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.GetInstance(System.UInt32,System.String)">
            <summary>
            Gets the API to the debugger host running in the given process.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.GetInstanceDynamic(System.UInt32,System.String)">
            <summary>
            Gets the API to the debugger host running in the given process as a late-bound <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.AttachToProcess(System.UInt32)">
            <summary>
            Instructs the debugger to attach to the process with the PID <paramref name="pid"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.DetachAll">
            <summary>
            Instructs the debugger to detach from all the debuggee processes.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Features.Debugger.DebuggerHostServer.InitRot(JetBrains.DataFlow.Lifetime,JetBrains.Application.IApplicationHost)">
            <summary>
            Register/Revoke the Running Objects Table entry.
            </summary>
            <param name="lifetime"></param>
            <param name="product"></param>
        </member>
        <member name="P:JetBrains.VsIntegration.UI.ShortcutBrowser.VsCommandInfo.IsDualChord">
            <summary>
            Means that there are two chords that differ in the second modifier only. One has modifier and the other does not (e.g. Ctrl+E, Ctrl-W and Ctrl-E, W).
            Such chords are merged into one dual chord.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsOnIdle">
            <summary>
            Sinks the OnIdle event from Visual Studio
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1">
            <summary>
            A bridge from COM events to a .NET interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1.CreateApartmentThreaded(JetBrains.DataFlow.Lifetime,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,`0,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed on the same thread (not necessarily the main one).
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointCookie`1.CreateSingleThreaded(JetBrains.DataFlow.Lifetime,System.Runtime.InteropServices.ComTypes.IConnectionPointContainer,`0,JetBrains.Threading.IThreading,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed of on the main thread only.
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="threading">Identifies the primary thread.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1">
            <summary>
            A bridge from COM events declared in the fucking VS PIA to a .NET interface.
            These freaks managed to create two PIAs for the same poor interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1.CreateApartmentThreaded(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer,`0,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed on the same thread (not necessarily the main one).
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.ConnectionPointVsCookie`1.CreateSingleThreaded(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer,`0,JetBrains.Threading.IThreading,System.String)">
            <summary>
            Advises for listening the COM events.
            Creates a single-threaded connection point that must be created and disposed of on the main thread only.
            </summary>
            <param name="lifetime">Allows to unadvise the cookie.</param>
            <param name="source">COM event source.</param>
            <param name="sink">The event sink that will receive the event callbacks.</param>
            <param name="threading">Identifies the primary thread.</param>
            <param name="origin">Origin of this call, for diagnostics on any failures.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.ProjectModel.IVsSolutionEx.GetSolutionHitem(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Gets the hierarchy item of the VS Solution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsConstants">
            <summary>
            Various Visual Studio Integration constants &amp; declarations.
            Taken from the JetBrains VSIP Helper DLL.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.XamlLanguageServiceGuid">
            <summary>
            XAML Language Service guid until VS12
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.ScriptLanguageServiceGuid">
            <summary>
            Until VS10 this is the common language ID for Script languages in VS (like JavaScript and VbScript)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.VbScriptLanguageServiceGuid">
            <summary>
             Since VS11 <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.ScriptLanguageServiceGuid"/> became just <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.VbScriptLanguageServiceGuid"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.JavaScriptLanguageServiceGuid">
            <summary>
            Since VS11 there is distinguished language service for JavaScript (<see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.ScriptLanguageServiceGuid"/>).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.HtmlXLanguageServiceGuid">
            <summary>
            Since VS12 Language Service guid for cshtml, vbhtml files and html files (<see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.HtmlWebFormsLanguageServiceGuid"/>)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.TypeScriptLanguageServiceGuid">
            <summary>
            TypeScript Language Service guid since VS12
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.XamlLanguageServiceGuidSinceVs14">
            <summary>
            XAML Language Service guid since VS14 (<see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.XamlLanguageServiceGuid"/>). In VS 2015 CTP XAML language service guid was changed.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsConstants.GUID_Addins">
            <summary>
            Command set GUID for Add-Ins.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsConstants.StandardToolWindows">
            <summary>
            Type: Microsoft.VisualStudio.VSConstants.StandardToolWindows
            Assembly: Microsoft.VisualStudio.Shell.12.0, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.CommandLineInstallerVs">
            <summary>
            Registers the command line switches in Visual Studio.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.InstallDirInstallerVs">
            <summary>
            Writes the InstallDir to the Registry. Works for VS shells.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.InstallDirInstallerVs.EmitInstallDirIntoRegistry(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact,JetBrains.Application.Install.InstallationData.InstalledRegistryKey@,System.Collections.Generic.IList{JetBrains.Application.Install.InstallationData.InstalledRegistryValue}@)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.InstallVsEditorFactoryAttribute">
            <summary>
            Registers a new Editor Factory.
            This involves several things:
            (1) Registry information is written to list the editor factory as affined to our package (<see cref="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryInstaller"/>).
            (2) A derived class is emitted to the VS Package Assembly. This is required because the factory class should be annotated with a GUID, and the GUID should be different for different products to avoid runtime conflicts (<see cref="!:VsPackageEmitEditorFactory"/>).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller">
            <summary>
            The post-build-emitted package assembly and class are registered in the Registry, and the file is schedulled for deployment.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller.InstallStatic_AutoLoad(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Enables loading the package right at Visual Studio startup.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller.InstallStatic_Commands(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Package commands, menus, toolbars, context menus, etc.
            </summary>
            <remarks>
            This places a registry key named CLSIDofPackage in the [HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\{version}\Menus] section.
            To avoid disrupting the existing IDE commands and menus with those of your package while you are debugging it, your VSPackage is registered in an alternate registry called the experimental hive. For more information about this, see Experimental Build.
            There are two possible values for CLSIDofPackage:
            {blank space}, 1000, 10
            {drive}:\VisualStudio\bin\MyPackage.dll, 1000, 10
            The data field for CLSIDofPackage is split into three sections separated by commas.
            First Section: The full path name to the .cto file. If you leave this field blank, which is the recommended method, then the environment searches for the .cto information in your VSPackage's satellite DLL, as specified under the VSPackages section in the registry. If you need to, however, you can provide a specific path to the .cto file.
            Second Section: The resource number of the menus in the .cto file. This must be a number, not a name or identifier.
            Third Section: The version of the menu resource. Increment this number as you update the menus. Visual Studio will detect the version number change and re-merge the menus.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller.InstallStatic_InstalledProducts(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Registers the package with the Installed Products (eg About Box, Splash Icon, etc).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller.InstallStatic_OptionsPage(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            The option pages category in Visual Studio options, and the package's main Options Page (to enable/disable the product and open the Product's Options).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.EmittedVsPackageInstaller.InstallStatic_Package(JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.ICollection{JetBrains.Application.Install.InstallationData.InstalledRegistryValue},JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Core. The package itself.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.RegistrationUtil.CleanupUIFromVisualStudio(System.String,System.String,JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,JetBrains.Application.IApplicationHost)">
            <summary>
            Performs the post-uninstallation actions that include removing the ReSharper UI items from the Visual Studio.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.RegistrationUtil.GetDevEnvInstallDirFromRegistry(System.String)">
            <summary>
            Goes to the Registry and extracts the DevEnv install dir, which points to the "Common7\IDE" folder that contains the DevEnv.exe file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.EmitsBitmapResourcesToResx">
            <summary>
            After the bitmap resources have been allocated resource IDs, they're written as ResXes.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.EmitsVsPackageResourcesToFile">
            <summary>
            Writes all package resources into the binary .resources file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource">
            <summary>
            Bitmaps which go into native package resources. These are identified with integers throughout the system, so each icon submitted to resources is assigned an integer which should be used in emitted code to represent the resource with VS.
            You emit the <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource"/> without an ID yet. When all of these are collected, they're assigned IDs and a <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResourceWithAssignedId"/> is issued per each unique original resource.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageServiceArtifact">
            <summary>
            Types which should be exposed as package services to the runtime component container.
            Currently, the emitted classes cannot be components, so if they need to be accessible as components, they're to be submitted here.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove">
            <summary>
            ResX file entries to be embedded into the package resources.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.File">
            <summary>
            The file content of the resx node (e.g. bitmap, byte array, string, etc).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.ResourceName">
            <summary>
            As in <see cref="P:System.Resources.ResXDataNode.Name"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageResXDataNode_ToRemove.Type">
            <summary>
            Serialization type for the node.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageSourceFile">
            <summary>
            Source files in the form of CodeDOM type declarations which should be added for compilation to the MSBuild project file.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants">
            <summary>
            Common convention constants used when emitting package class / assembly.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.IdBmpSplash">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdBmpSplash(System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.IdIcoLogoForAboutbox">
            <summary>
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct.IdIcoLogoForAboutbox(System.UInt32@)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageAssemblyConstants.GetDefaultGenericIconThemeForVs(System.Version,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            The default generic (non-symbol) icon theme, selected by VS version.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind.CommandImage">
            <summary>
            <para>CTO CommandImage which goes into VS menus and is produced out of our actions icons.</para>
            <para>VS8+ can have this 32-bit with alpha-channel, which covers our needs.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind.WindowFrameBitmap">
            <summary>
            <para>Bitmap for the window frame icon, e.g. tool window frame icon. Comes from our tool window descriptor.</para>
            <para>Seems like all VS versions still want to see chroma-keyed 24-bit bitmaps here.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.ProductIconClassesIndex">
            <summary>
            Allows to look up icon Ids by icon types.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.ProductIconClassesIndex.GetIconId(System.String,JetBrains.Metadata.Utils.AssemblyNameInfo,System.String)">
            <summary>
            Looks up the icon identifier.
            </summary>
            <param name="sIconTypeFullName">Type name of the icon identifier class.</param>
            <param name="assemblyUsage">Name of the assembly which contains the code referencing the icon. It's validated that the icon is reachable from that assembly.</param>
            <param name="sReferencingObjectName">Name of the entity referencing the icon, for diagnostics.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters">
            <summary>
            Emits the entry point class for the VS Package.
            Also knows all the details about the package, for use with emitter or package registration routines.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClipartWriters">
            <summary>
            Writes the spwecial package clipart.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.ChromaKeyOpacityThreshold">
            <summary>
            When converting to chroma key, we treat less opaque pixels as transparent.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.WriteIconBitmapFile(JetBrains.UI.Icons.IconId,JetBrains.Util.FileSystemPath,System.Version,JetBrains.UI.Icons.IThemedIconManager,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind)">
            <summary>
            Converts the bitmap into VS-version-specific format, and writes to disk.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.WriteIconBitmapStream(JetBrains.UI.Icons.IconId,System.IO.Stream,System.Version,JetBrains.UI.Icons.IThemedIconManager,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsBitmapResourceKind)">
            <summary>
            Converts the bitmap into VS-version-specific format, and writes to disk.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsResourceHelper.ConvertAlphaToChromaKey(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Flattens alpha channel and turns the bitmap into a chroma-keyed image on magenta background.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS">
            <summary>
            Options for the IVsTextBuffer::Get/SetStateFlags methods.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_USER_READONLY">
            <summary>
            user marked it as read only -- no editing allowed at all
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_FILESYS_READONLY">
            <summary>
            RO on filesystem; possibly under SCC
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_MODIFIED">
            <summary>
            whether it's been modified  UNDONE: what if one undoes all actions?
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS.BSF_SUPPRESS_UI">
            <summary>
            whether to prevent the buffer from showing UI (off by default)
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags">
            <summary>
            Options for the IVsTextBuffer/IVsTextLayer::Lock/UnlockBufferEx methods.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags.BLF_READ">
            <summary>
            causes writes from other threads to block, but allows reads
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.BufferLockFlags.BLF_READ_AND_WRITE">
            <summary>
            causes writes and reads from other threads to block (implies BLF_READ)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.FONTCOLORPREFERENCES.pColorTable">
            <summary>
            <see cref="T:stdole.IUnknown"/>.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.GetSelectedAtomFlags.gsaDefault">
            <summary>
            matches an atom when the selection is 1) empty &amp; to the left of it, or 2) exactly selecting it
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_DEFAULT">
            <summary>
            coords relative to the top view layer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_TOP_LAYER">
            <summary>
            coords relative to the top view layer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_BUFFER">
            <summary>
            coords relative to the buffer
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_RELATIVE_LAYER">
            <summary>
            coords relative to the layer * specified in pReference
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_SET_WITHOUT_SCROLLING">
            <summary>
            flags for SetRelativeSelection
            tells the view to not scroll to force the selection to be visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.RSS_SET_TO_NEAREST_LOCAL">
            <summary>
            flags for SetRelativeSelection
            for RSS_BUFFER or RSS_RELATIVE_LAYER, tells the view to put the caret at the nearest local position
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssDefault">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssTopLayer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssBuffer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssRelativeLayer">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.RelativeSelectionStateFlags.rssTrackSel">
            <summary>
            old flags for compatibility
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE">
            <summary>
            This struct represents the state of a selection such that it can be restored to a particular state.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.iAnchorCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.iActiveCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.dwFlags">
            <summary>
            ORing of SELECTIONSTATEFLAGS enum
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.TextManager.SELECTIONSTATE.dwReserved">
            <summary>
            unused for now
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.TextManager.ViewCol">
            <summary>
            WARNING: this is a ViewCol, NOT a CharIndex!  It may be past the end of the physical line.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMECLOSE">
            <summary>
                // these flag   bits should be the same as RDT flags
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.Hidden">
            <summary>
            obsolete, use WinHidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinHidden">
            <summary>
            window (tabbed or otherwise) is hidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinShown">
            <summary>
            a non-tabbed window is made visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.TabActivated">
            <summary>
            a tabbed window is activated (made visible)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.TabDeactivated">
            <summary>
            a tabbed window is deactivated
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinRestored">
            <summary>
            window is restored to normal state
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinMinimized">
            <summary>
            window is minimized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinMaximized">
            <summary>
            window is maximized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.WinClosed">
            <summary>
            window is closed and persisted
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.DestroyMultInst">
            <summary>
            multi instance toolwindow destroyed
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW.AutoHideSlideBegin">
            <summary>
            autohidden window is about to slide into view
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.Hidden">
            <summary>
            obsolete, use WinHidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinHidden">
            <summary>
            window (tabbed or otherwise) is hidden
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinShown">
            <summary>
            a non-tabbed window is made visible
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.TabActivated">
            <summary>
            a tabbed window is activated (made visible)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.TabDeactivated">
            <summary>
            a tabbed window is deactivated
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinRestored">
            <summary>
            window is restored to normal state
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinMinimized">
            <summary>
            window is minimized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinMaximized">
            <summary>
            window is maximized
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.WinClosed">
            <summary>
            window is closed and persisted
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.DestroyMultInst">
            <summary>
            multi instance toolwindow destroyed
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.AutoHideSlideBegin">
            <summary>
            autohidden window is about to slide into view
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.BeforeWinHidden">
            <summary>
            Before the Hide of single instance toolwindows
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.FRAMESHOW2.AutoHideSlideEnd">
            <summary>
            autohidden window is finished its slide into view
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Declarations.CSharpProjectProperties4.TargetFramework">
            <summary>
            Doesn't work - garbage
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Declarations.VBProjectProperties4.TargetFramework">
            <summary>
            Doesn't work - garbage
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_DEFAULT">
            <summary>
            Uses the default meaning for all structure members. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_DLGINDIRECT">
            <summary>
             Creates the page from the dialog box template in memory pointed to by the pTemplate member. The PropertySheet function assumes that the template that is in memory is not write-protected. A read-only template will cause an exception in some versions of Microsoft Windows.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_HASHELP">
            <summary>
            Enables the property sheet Help button when the page is active.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_HIDEHEADER">
            <summary>
            Causes the wizard property sheet to hide the header area when the page is selected. If a watermark has been provided, it will be painted on the left side of the page. This flag should be set for welcome and completion pages, and omitted for interior pages.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_PREMATURE">
            <summary>
            Causes the page to be created when the property sheet is created. If this flag is not specified, the page will not be created until it is selected the first time.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_USECALLBACK">
            <summary>
            Calls the function specified by the pfnCallback member when creating or destroying the property sheet page defined by this structure. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.PropertySheetPageFlags.PSP_USEREFPARENT">
            <summary>
            Maintains the reference count specified by the pcRefParent member for the lifetime of the property sheet page created from this structure.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID">
             <summary>
             Each VSHPROPID must return a VARIANT struct filled in with the proper VT_
                 type.  The caller may *assume* the VT_ is correct (i.e. that there is
                 no need to call VariantChangeType(), or verify the type, beyond an
                 ASSERT() to make sure there weren't header-file mismatches, etc.
             This same logic applies to the caller when setting a property: the
                 hierarchy will assume that the *caller* has passed a VARIANT already
                 converted to the proper VT_.
            ---------------------------------------------------------------------------
             WARNING: VSHPROPID values must not overlap any other *PROPID group values!
             </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NIL">
            <summary>
            !!!! NOTE !!!!  THIS MUST BE THE SAME AS THE FIRST PROP DEFINED
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Parent">
            <summary>
            I4   itemid of Parent node (ITEMID_NIL if no parent)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FirstChild">
            <summary>
            INT_PTR itemid of 1st child node (ITEMID_NIL if no children)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NextSibling">
            <summary>
            INT_PTR itemid of next sibling node (ITEMID_NIL if no more siblings) 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Root">
            <summary>
            INT_PTR [obsolete] itemid of Root must be VSITEMID_ROOT.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TypeGuid">
            <summary>
            GUID to identify type of node/hierarchy, search on GUID_ItemType
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SaveName">
            <summary>
            BSTR Needed so Shell (i.e. File.Save menu) can display UI.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Caption">
            <summary>
            BSTR Needed so Shell (i.e. project window) can display UI.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconImgList">
            <summary>
            I4   For icon. Handle to imagelist (Only for itemid==VSITEMID_ROOT)
            Hierarchy    should support IconHandle or IconImageList/IconIndex but not both.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconIndex">
            <summary>
            I4   For icon.  If Expandable=TRUE, then IconIndex+1 is used for open icon.
            Hierarchy    should support IconHandle or IconImageList/IconIndex but not both.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Expandable">
            <summary>
            BOOL Should Shell display the "open-this-folder" plus sign?
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExpandByDefault">
            <summary>
            BOOL Should Shell expand this item?
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectName">
            <summary>
            BSTR [obsolete] use VSHPROPID_Name instead
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Name">
            <summary>
            BSTR Name for project (VSITEMID_ROOT) or item
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IconHandle">
            <summary>
            I4   handle of an icon, UIHierarchyWindow will NOT call DestroyIcon on it
            Hierarchy    should support IconHandle or IconImageList/IconIndex but not both.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconHandle">
            <summary>
            I4   [optional] handle of an icon for an open folder, UIHierarchyWindow will NOT call DestroyIcon on it
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OpenFolderIconIndex">
            <summary>
            I4   [optional] for icon
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CmdUIGuid">
            <summary>
            GUID for cmdbars (for root only)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SelContainer">
            <summary>
            UNK  [optional] Returns an ISelectionContainer for property browsing
            Hierarchy    should support SelContainer or BrowseObject but not both.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_BrowseObject">
            <summary>
            DISP [optional] Returns an IDispatch for property browsing
            Hierarchy    should support SelContainer or BrowseObject but not both.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AltHierarchy">
            <summary>
            UNK  [optional] Returns an IVsHierarchy for SVsTrackSelectionEx
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AltItemid">
            <summary>
            I4   [optional] Returns an itemid for SVsTrackSelectionEx
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectDir">
            <summary>
            BSTR [optional] full path to project directory (for VSITEMID_ROOT only)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_SortPriority">
            <summary>
            I4   [optional] Sort priority in UIHierarchyWindow. Standard projects have priority 0 (default).
            MiscFiles project has priority 10000, SolutionItems project has priority 9999.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_UserContext">
            <summary>
            UNK  [optional] IVsUserContext for project/item
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_EditLabel">
            <summary>
            BSTR [optional] string displayed for in-place editing node caption
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExtObject">
            <summary>
            DISP [optional] For ITEMID_ROOT this is the ext.object of the project (Project).
            For other    itemids it is that item's ext object (ProjectItem), if any.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ExtSelectedItem">
            <summary>
            DISP [optional] Returns a custom SelectedItem object for the given itemid.
            If not supported,    then a default implementation will be provided.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StateIconIndex">
            <summary>
            I4   For state icon index. Use VsStateIcon enumeration
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectType">
            <summary>
            BSTR [obsolete] use VSHPROPID_TypeName instead
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_TypeName">
            <summary>
            BSTR display name to identify type of node/hierarchy (used in title bar)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ReloadableProjectFile">
            <summary>
            BOOL [obsolete] use VSHPROPID_HandlesOwnReload
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_HandlesOwnReload">
            <summary>
            BOOL [optional] project handles unload/reload itself (otherwise environment handles)
            (Defaults    to FALSE)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ParentHierarchy">
            <summary>
            UNK  IVsHierarchy that owns this hierarchy.  Hold as UNADDREF'ed ptr in SetProperty.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ParentHierarchyItemid">
            <summary>
            INT_PTR The itemid of this hierarchy in it's parent hierarchy
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ItemDocCookie">
            <summary>
            INT_PTR [optional] the doc cookie (VSCOOKIE) of the hierarchy item
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_Expanded">
            <summary>
            BOOL whether the node is currently expanded in the UIHierarchyWindow, start as FALSE
            and UIHierarchyWindow    will update
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ConfigurationProvider">
            <summary>
            UNK  OBSOLETE. Use IVsGetCfgProvider interface instead
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ImplantHierarchy">
            <summary>
            UNK  [optional] IVsHierarchy implant for this hierarchy. Hold as UNADDREF'ed ptr in SetProperty.
            Implant can implement    IVsFilterAddProjectItemDlg and/or IVsToolboxUser.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OwnerKey">
            <summary>
            BSTR [optional] owner key string that identifies the project GUID of the owning project.
            only projects    that implement IVsOwnedProjectFactory should support SetProperty for this property.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StartupServices">
            <summary>
            UNK  [optional] Returns an IVsProjectStartupServices* to add services to be 
            started on next project load (for    VSITEMID_ROOT only)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_FirstVisibleChild">
            <summary>
            INT_PTR [optional] similar to FirstChild but only walks items to be displayed in UIHierarchyWindow.
            required if hierarchy    supports multiple (subsetted or supersetted)  views of its contents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_NextVisibleSibling">
            <summary>
            INT_PTR [optional] similar to NextSibling but only walks items to be displayed in UIHierarchyWindow.
            required if hierarchy    supports multiple (subsetted or supersetted)  views of its contents. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsHiddenItem">
            <summary>
            BOOL [optional] is item not displayed in current UIHierarchyWindow view. required if hierarchy 
            supports multiple    (subsetted)  views of its contents.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonMemberItem">
            <summary>
            BOOL [optional] is item not considered a member of the hierarchy. required if hierarchy supports 
            (supersetted)    views of its contents (e.g. ShowAllFiles displaying files in directory that are not members of the project).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonLocalStorage">
            <summary>
            BOOL [optional] is project storage local? IPersistFileFormat is used for 
            saving project regardless    of whether it is a local "file" or not.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_StorageType">
            <summary>
            BSTR [optional] non-localize string representing storage type. same as string used in VSDIR file
            to differentiate between different location MRU lists.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ItemSubType">
            <summary>
            BSTR [optional] non-localize string representing the subtype of the item.
            It is    up to each package to agree on the meaning of this string.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_OverlayIconIndex">
            <summary>
            I4 [optional] Use VSOVERLAYICON enum.  Overlay for the item's main icon
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultNamespace">
            <summary>
            BSTR [optional] string representing the items folder based namespace: rootnamespace.folder.subfolder
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNonSearchable">
            <summary>
            BOOL [optional] is item not search-and-replace-able via Find/Replace in Files. Should be true for project file itself.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsFindInFilesForegroundOnly">
            <summary>
            BOOL [optional] if true, Find In Files runs in main thread
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_CanBuildFromMemory">
            <summary>
            BOOL [optional] if TRUE, we dont need to prompt to save before building
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_PreferredLanguageSID">
            <summary>
            GUID [optional] preferred SID of (text editor) language service for project.
            (e.g.    used to determine default language for BreakPoint dialog)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShowProjInSolutionPage">
            <summary>
            BOOL [optional] used to filter project when vb/c#   call the component picker for add-reference.
            Return VARIANT_TRUE to show the project in the list.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_AllowEditInRunMode">
            <summary>
            BOOL [optional] If FALSE or E_NOTIMPL, the compiler will disallow edits during run mode
            (this    is the most common expected behavior).  TRUE allows edits.  This property enables VSA scenarios.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_IsNewUnsavedItem">
            <summary>
            BOOL [optional] If TRUE, this is a new unsaved item (as obtained from File.New.File) 
            so the moniker will be a temporary name and the caption should be    used in the UI instead.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ShowOnlyItemCaption">
            <summary>
            BOOL [optional] If TRUE, this is an item for which only the caption should be shown in the UI instead of the full moniker.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_ProjectIDGuid">
            <summary>
            GUID [optional] Identifies a project across solutions.  Generated and set when project is created.  Retrieved when project is opened.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignerVariableNaming">
            <summary>
            I4 [optional] from the VSDESIGNER_VARIABLENAMING enumeration
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DesignerFunctionVisibility">
            <summary>
            I4 [optional] from the VSDESIGNER_FUNCTIONVISIBILITY enum
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_HasEnumerationSideEffects">
            <summary>
            BOOL [optional] If TRUE, then this hierarchy will not be enumerated for FindInFiles and  similar
            hierarchy    enumerations. (useful if enumerating might cause a login dialog or is unacceptably slow)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultEnableBuildProjectCfg">
            <summary>
            BOOL [optional] Should   "Build" be initially checked by default in the solution cfg
            Normally "Build" is checked by   default if the project supports IVsBuildableProjectCfg
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSHPROPID.VSHPROPID_DefaultEnableDeployProjectCfg">
            <summary>
            BOOL [optional] Should "Deploy" be initially checked by default in the solution cfg
            Normally "Deploy" is checked by default if   the project supports IVsDeployableProjectCfg
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_FIRST4">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_IsModal">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_LayoutIsRightToLeft">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_LocalAppDataDir">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_MainWindowDataSource">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_OpenFileStartDir">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_ShellInitialized">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_VisualEffectsAllowed">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_VisualEffectsOption">
            <summary />
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSSPROPID.VSSPROPID_ZeroConfigProjectDir">
            <summary />
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.IVsWindowFrameNotify.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents">
            <summary>
            The centralized sink for the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.ProjectDocuments.IVsRunningDocumentTableWrapper">VS Running Document Table</see> events.
            Get from <c>VsShell.Components.VsShims.VsRunningDocumentTableEvents</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.ProjectDocuments.IRunningDocumentTable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.AfterAttributeExChangeEventArgs.#ctor(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTATTRIB,JetBrains.VsIntegration.ProjectModel.VsHierarchyItem,System.String,JetBrains.VsIntegration.ProjectModel.VsHierarchyItem,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called after application of the first lock of the specified type to a document in the Running Document Table (RDT).
            </summary>
            <param name="docCookie"></param>
            <param name="dwRdtLockType"></param>
            <param name="dwReadLocksRemaining"></param>
            <param name="dwEditLocksRemaining"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).
            </summary>
            <param name="docCookie"></param>
            <param name="dwRdtLockType"></param>
            <param name="dwReadLocksRemaining"></param>
            <param name="dwEditLocksRemaining"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterSave(System.UInt32)">
            <summary>
            Called after a document in the Running Document Table (RDT) is saved.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterAttributeChange(System.UInt32,System.UInt32)">
            <summary>
            Called after an attribute of a document in the Running Document Table (RDT) changes.
            </summary>
            <param name="docCookie"></param>
            <param name="grfAttribs"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called before displaying a document window.
            </summary>
            <param name="docCookie"></param>
            <param name="fFirstShow"></param>
            <param name="pFrame"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Called after a document window is hidden.
            </summary>
            <param name="docCookie"></param>
            <param name="pFrame"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
            <summary>
            Called after a document attribute is changed. This is an advanced version of the OnAfterAttributeChange method.
            </summary>
            <param name="docCookie"></param>
            <param name="grfAttribs"></param>
            <param name="pHierOld"></param>
            <param name="itemidOld"></param>
            <param name="pszMkDocumentOld"></param>
            <param name="pHierNew"></param>
            <param name="itemidNew"></param>
            <param name="pszMkDocumentNew"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnBeforeSave(System.UInt32)">
            <summary>
            Called before saving a document.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnBeforeFirstDocumentLock(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
            <summary>
            Called before a document is locked in the Running Document Table (RDT) for the first time.
            </summary>
            <param name="pHier"></param>
            <param name="itemid"></param>
            <param name="pszMkDocument"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterSaveAll">
            <summary>
            Fired after a Save All command is executed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.ProjectDocuments.VsRunningDocumentTableEvents.Sink.OnAfterLastDocumentUnlock(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,System.Int32)">
            <summary>
            Fired after the last document in the Running Document Table (RDT) is unlocked.
            </summary>
            <param name="pHier"></param>
            <param name="itemid"></param>
            <param name="pszMkDocument"></param>
            <param name="fClosedWithoutSaving"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents">
            <summary>
            The centralized sink for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager">VS Text Manager</see> events.
            Get from <c>VsShell.Components.VsShims.VsTextManagerEvents</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.#ctor(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.TextManager.Interop.IVsTextManager,JetBrains.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.RegisterView">
            <summary>
            Fires when a view is registered.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.UnregisterView">
            <summary>
            Fires when a view is unregistered.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.UserPreferencesChanged">
            <summary>
            Fired when the user's global preferences have changed.
            When IVsTextManagerEvents::OnUserPreferencesChanged is fired, the recipient of the event should check these values.  The recipient should only react to the change event if its own category GUIDs match those of the FONTCOLORPREFERENCES struct. (pguidFontCategory, pguidColorCategory).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnRegisterMarkerType(System.Int32)">
            <summary>
            Fired when an external marker type is registered.
            </summary>
            <param name="iMarkerType">[in] External marker type that was registered.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Fires when a view is registered.
            </summary>
            <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> interface identifying the view that was registered. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Fires when a view is unregistered.
            </summary>
            <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> interface identifying the view that was unregistered.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Events.TextControls.VsTextManagerEvents.Sink.Microsoft#VisualStudio#TextManager#Interop#IVsTextManagerEvents#OnUserPreferencesChanged(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
            <summary>
            Fires when the user's global preferences are changed.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.GetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid)">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.GetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,System.Func{``0})">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.SetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,``0)">
            <summary>
            Puts user data into the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.TryGetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid,System.Action{``0})">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Invokes <paramref name="FWithData"/> only when data is present.
            Returns whether retrieving the data succeeded (whether <paramref name="FWithData"/> was called).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.IVsUserDataEx.TryGetData``1(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Guid)">
            <summary>
            Gets user data from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Returns <c>Null</c> if data is missing.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel">
            <summary>
            The Project Model Module Zone aware part of the VS Selection wrapper. See also <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsMonitorSelectionShell"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.GetCurrentSelection(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Gets the current visual studio selection.
            <see cref="P:JetBrains.Util.JetTuple`2.A"/> is the single selection, <see cref="P:JetBrains.Util.JetTuple`2.B"/> is the multiselection.
            </summary>
            <param name="vsSolution"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.TryCreateHitemFromSelectionEntry(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Creates the <see cref="T:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem"/> out of individual items reported by VS selection. The special handling is required when selection contains the solution node itself, as it fails to report its hierarchy properly.
            Cannot handle multisel, this method is rather a part of the multisel handling :)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.VsSelectionToList(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Converts a single or multiple VS selection into a list of selected hierarchy items.
            </summary>
            <param name="hierarchy">Hierarchy. Non-null if all of the selected items are of the same hierarchy. Special case: might be Null if the solution itself is selected.</param>
            <param name="itemid">Selected item ID for single selection, <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION"/> for multiple selection.</param>
            <param name="multisel">In case of the multiple selection, lists the items.</param>
            <param name="vsSolution"></param>
            <returns>The list of selected items.</returns>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMonitorSelectionProjectModel.Shell">
            <summary>
            Gets the base object which knows of the Shell properties only.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Projects.IVsMultiItemSelect.GetSelectedItems(Microsoft.VisualStudio.Shell.Interop.IVsSolution)">
            <summary>
            Enumerates the multiselection, extracts its items.
            </summary>
            <param name="vsSolution"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsShell.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsShell)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsShell.ShellPropertyChangesSink">
            <summary>
            Helps with monitoring the shell Zombie status.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.Advise(JetBrains.DataFlow.Lifetime)">
            <summary>
            Advises the window frame events. You must unadvise by disposing of the retval.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.TryGetWindowObjectKind">
            <summary>
            <para>Gives out a GUID for most of the window frames. Mimics the <see cref="!:Window.ObjectKind"/> property behavior, namely “the type of the Window object, which is a GUID string representing the tool contained in the window”.</para>
            <para>Technically, this is <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidPersistenceSlot"/> for a tool window, and <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_guidEditorType"/> for a document frame.</para>
            <para>Previously, this was obtanied as EnvDTE.Window::ObjectKind</para>
            <para>However, in VS9- that would sometimes yield a HResult for out-of-memory, which would then be turned into an exception. And in VS10+ the Window object enforces thread-marshalling calls even if we're on the main thread already, which has a performance penalty.</para>
            <para>It has been found that EnvDTE.Window::ObjectKind actually yields to the window frame properties, depending on the frame kind, so we'd now be calling the window frame directly.</para>
            <para>Possible improvement: in VS10+, take the managed WindowFrame object and call for PersistenceSlot directly, without COM wrapping thru lambdas (but I don't think that would be a big win).</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame.AdviseInternal(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify)">
            <summary>
            For use from the event sink.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.CreateStreamMarker(Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient)">
            <summary>
            Markers -- note that these are stream-oriented markers -- use IVsTextLines
            to create line markers
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkers_Count(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            // IVsTextStream::EnumMarkers enumerates ALL markers, but gets their IVsTextStreamMarker interface via IVsEnumStreamMarkers.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkers_Enumerable(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            IVsTextStream::EnumMarkers enumerates ALL markers, but gets their IVsTextStreamMarker interface via IVsEnumStreamMarkers.
            Note: you must make profit out of your <c>IVsTextStreamMarker</c> right after you get it from the enum, otherwise it will expire as the next enum item is emitted.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLengthOfLine(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLineCount">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetLineIndexOfPosition(System.Int32)">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetPositionOfLine(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{JetBrains.DocumentModel.DocLine})">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetPositionOfLineIndex(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            NOTE:  These methods could be expensive, depending upon the underlying
            implementation of the buffer (i.e. it could be very difficult to
            calculate the size of the buffer if it is a virtual-line-oriented
            implementation as VB's, etc.).  The only methods used heavily by views
            and that should be reasonably efficient by all implementations are
            GetLineCount() and GetLengthOfLine().
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetStateFlags">
            <summary>
            state flags include: modified, read-only, read-only on disk
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.GetUserData``1(System.Guid)">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Throws on errors or if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.InitializeContent(System.String)">
            <summary>
            Initialize content (will fail unless called on brand new untitled buffer)
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.IsImplementingAllTextBufferInterfaces">
            <summary>
            Checks whether this <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"/> raw interface supports all of the interfaces we might need: <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"/>, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream"/>.
            We use them all and should ignore text documents whose buffers do not implement them fully. Such buffers might be coming from custom text buffer implementations by third-party packages. Eg: RSRP-122245.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.ReplaceStreamEx(Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            More general version of ReplaceStream/ReloadStream
            </summary>
            <remarks>MSDN says that it returns "number of characters changed." In fact VS returns number of characters inserted.</remarks>
            <remarks>(DK) RSRP-272348. In VB-projects ReplaceStreamEx method returns S_OK but does not change the stream content in the following cases:
            - while debugging when Enable Edit and Continue option is turned off (x86 and x64);
            - while debugging x64 application, even when Enable Edit and Continue option is turned on;
            - while debugging an attached process (any platform, any Enable Edit and Continue option state).
            To detect situations when ReplaceStreamEx does not change the stream, we compare stream sizes before and after the operation. An exception is fired if modification has not been made.
            </remarks>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.SetStateFlags(JetBrains.VsIntegration.Interop.Declarations.TextManager.BUFFERSTATEFLAGS)">
            <summary>
            state flags include: modified, read-only, read-only on disk
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.SetUserData``1(System.Guid,``0)">
            <summary>
            Puts user data into the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.TryGetUserData``1(System.Guid,System.Action{``0})">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Invokes <paramref name="FWithData"/> only when data is present.
            Returns whether retrieving the data succeeded (whether <paramref name="FWithData"/> was called).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.TryGetUserData``1(System.Guid)">
            <summary>
            Gets user data from the text buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData"/> bag.
            Returns <c>Null</c> if data is missing.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.AssertStreamMarkerParamsValid(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS)">
            <summary>
            Thorough validation of the params, because the VS impl returns only INVALIDARG and we do need details.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.EnumMarkersCore(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE,Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS,Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers@,System.Int32@)">
            <summary>
            Impl for safely getting the enumeration and the count.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer.JetDocument">
            <summary>
            <para>Gets our <see cref="T:JetBrains.DocumentModel.IDocument"/> object attached to the given Visual Studio text buffer.</para>
            <para>Note that the object from our model corresponding to the Visual Studio model object is not guaranteed to exist at the moment of your call (eg you're calling from MEF and our Shell is not running yet/already). In this case the returned non-<c>Null</c> property has a <c>Null</c> value, and you should listen to the changes to its value (eg with <see cref="M:JetBrains.DataFlow.IPropertyEx.ForEachValue_NotNull``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Action{JetBrains.DataFlow.Lifetime,``0})"/>).</para>
            <para>This technique allows to combine lifetimes of MEF and Shell entities: whether you look into this property before jet model object is created or when it's already available, your handler will be called when jet model object is ready.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextLayer.BaseLineIndexToLocal(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Translates the coordinates from the base buffer coordinate space (bottom layer, doc-line-col) to the local view coordinate space (topmost layer, text-control-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            </summary>
            <param name="posDoc">Base buffer line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextLayer.LocalLineIndexToBase(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Translates the coordinates from the local view coordinate space (topmost layer, text-control-line-col) to the base buffer coordinate space (bottom layer, doc-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            </summary>
            <param name="posTxt">Local view line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.BaseLineIndexToLocal(JetBrains.DocumentModel.DocumentCoords)">
            <summary>
            Uses the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/> interface of the view to translate the coordinates from the base buffer coordinate space (bottom layer, doc-line-col) to the local view coordinate space (topmost layer, text-control-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            If the view is not layered, translates the coordinates transparently.
            </summary>
            <param name="posDoc">Base buffer line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.EnsureSpanVisible(JetBrains.DocumentModel.DocLineColumnRange)">
            <summary>
            Ensures that text is in view, both vertically and horizontally.
            </summary>
            <returns>
            If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"/>. If it fails, it returns an error code.
            </returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.GetTopmostLayer">
            <summary>
            <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/>::<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetTopmostLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)"/>.
            Could return a <c>Null</c> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.IsCompletorWindowActive">
            <summary>
            Calls thru <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.IsDetachedFromBuffer">
            <summary>
            Checks if this view has lost its buffer (<see cref="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.GetBuffer"/> throws in such cases).
            Observed on DevTen if a queued action is executed after the view is somewhat dead (NP-131 and alike).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.LocalLineIndexToBase(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Uses the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView"/> interface of the view to translate the coordinates from the local view coordinate space (topmost layer, text-control-line-col) to the base buffer coordinate space (bottom layer, doc-line-col).
            If the conversion fails (layer returns an error code), returns <c>Null</c>.
            If the view is not layered, translates the coordinates transparently.
            </summary>
            <param name="posTxt">Local view line-col coordinates.</param>
            <returns>A non-<c>Null</c> value in case of success.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView.ScrollBarAxis">
            <summary>
            Identifies the Visual Studio text control scroll axis.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.Markup.VsHighlighterCustomizationCommon">
            <summary>
            Common for all VSes.
            As reading from VS might be costly, applies caching.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.Markup.VsHighlighterCustomizationCommon.ApplyVsCustomizations(JetBrains.TextControl.DocumentMarkup.HighlighterAttributes,System.String)">
            <summary>
            Much like <see cref="M:JetBrains.VsIntegration.TextControl.Markup.VsHighlighterCustomizationCommon.ApplyIdeCustomizations(JetBrains.TextControl.DocumentMarkup.HighlighterAttributes,System.String)"/>, but actually accessing VS.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.PackageSuspendResumeActions">
            <summary>
            Stub implementation for the actions. As most of them (resume and toggle-as-resume) must work without any shell running, these actions are intercepted by the package itself and executed without calling this handler thru the Actions Manager.
            We need to declare the actions in Actions.Xml to be registered with VS, and then provide the dummy handlers for the product to pass load-time validation.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackage">
            <summary>
            An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"/> implementation that binds the package to the JetBrains .NET Platform.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage"/> base implementation originally inherited from some early preview of the VS 7 SDK.
            Probably, could be merged into <see cref="T:JetBrains.VsIntegration.Shell.Package.VsPackage"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub.myCommandTargetHandlers">
            <seealso cref="!:QueryStatus"/>
            <seealso cref="!:Exec"/>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub.PackageLifetime">
            <summary>
            The lifetime until the package is unloaded by VS.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub.ExecHandler">
            <seealso cref="!:VsPackageSdkStub.Exec"/>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageSdkStub.QueryStatusHandler">
            <seealso cref="!:VsPackageSdkStub.QueryStatus"/>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackage.#ctor">
            <summary>
            The base ctor to be called by the auto-emitted derived implementation (see <see cref="T:JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters"/>).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackage.GetPropertyPage_CreateAvalonPage(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE*,System.Func{JetBrains.DataFlow.Lifetime,System.Windows.Media.Visual})">
            <summary>
            Fills in the VS property page request structure at <paramref name="pPage" /> with a HWND host for the <paramref name="FCreateContent" />-emitted content, and disposes of the HWND host when the property page gets released. The content functor is given the lifetime of the page.
            </summary>
            <param name="lifetimeParent"></param>
            <param name="pPage"></param>
            <param name="FCreateContent"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackage.Init_CreateHostAndEnvironment(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,JetBrains.VsIntegration.Shell.Package.VsPackageCommandTargetHandlers)">
            <summary>
            Creates the empty host. Product is added later.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageCommandTargetHandlers">
            <summary>
            Allows <see cref="T:JetBrains.VsIntegration.Shell.Package.VsPackage"/> and <see cref="!:VsActionManagerObsolete"/> to connect together and process command execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageServices">
            <summary>
            Allows <see cref="T:JetBrains.VsIntegration.Shell.Package.VsPackage"/> and <see cref="!:VsActionManagerObsolete"/> to connect together and process command execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Package.VsPackageUniversalActionHandlers">
            <summary>
            Handles such actions which are available even without the product shell running.
            Currently, these are for suspending and resuming the product.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackageUniversalActionHandlers.UniversalActionsExec(System.ComponentModel.Design.CommandID,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT,System.IntPtr,System.IntPtr)">
            <summary>
            Hanldes the Universal actions that are available even when the package is not running a product application shell.
            Eg actions that enable/disable that shell.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Package.VsPackageUniversalActionHandlers.UniversalActionsQueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT*)">
            <summary>
            Hanldes the Universal actions that are available even when the package is not running a product application shell.
            Eg actions that enable/disable that shell.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewEditorFactory">
            <summary>
            Implements the editor factory for the Persistable Views subsystem.
            // NOTE: MUST NOT call for GUID on this component, it's defined by the autoemitted derived class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy">
            <summary>
            Registers the document in our-maintained VS hierarchy.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy.PersistableDocument">
            <summary>
            The document object.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewManager.PersistableDocumentRegisteredInVsHierarchy.VsHierarchyItem">
            <summary>
            The hierarchy and item ID of the document object registered in it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewWindowPane.OpenVsEditor(Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument,JetBrains.VsIntegration.Shell.RawVsServiceProvider,JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            <para>Opens the window pane in a VS window frame.</para>
            <para>This actually makes use of the freshly-created pane in VS: VS prepares a window frame in a document tab and calls our IVsWindowPane::CreatePaneWindow to actually create the content control.</para> 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.AddItem(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            Adds an item to the hierarchy, returns the VS Item ID assigned to the item.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.GetHierarchyItem(System.String)">
            <summary>
            Gets the hierarchy item by its registered moniker.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.SetIcon(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID,System.Void*)">
            <summary>
            Assigns an icon to the hierarchy item for the given lifetime.
            </summary>
            <param name="lifetime"></param>
            <param name="itemid"></param>
            <param name="hIcon">Non-<c>Null</c> icon. NOTE: to remove an icon, just terminate the lifetime of the previous icon.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.FireVsHierarchyEvents(System.Action{Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents})">
            <summary>
            Helps with firing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"/> to those that have called <see cref="M:JetBrains.VsIntegration.IDE.PersistableView.VsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.CannotMakeWritableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.MSBuildExtensions.GetBoolValue(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.Boolean,System.String)">
            <summary>
            Returns boolean value of property <see cref="!:propertyName"/> if available or <see cref="!:defaultValue"/>
            </summary>
            <param name="hierarchy">Visual Studio hierarchy to get property value from</param>
            <param name="propertyName">Property name</param>
            <param name="defaultValue">Value to return if property is not specified</param>
            <param name="activeConfigurationName">Necessary to specify for VS 2005 because null is not working</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.VSProjectModelDescriptionBuilder.CreateProjectDescriptorWithMissingItems(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem,System.Func{Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.ProjectModel.IProject})">
            <summary>
            It may happen that we receive a notification about move of a project item,
            but the parent (and higher ancestors) of the item are not present in our model yet.
            In this case we create the missing ancestors, and return the lowest ancestor that 
            has been created (if the parent is present in our model, we return the parent).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer">
            <summary>
            Updates ReSharper project model according to changes to the VS's one
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.RefreshProjectProperties(JetBrains.ProjectModel.IProject,System.Boolean)">
            <summary>
            Refreshes project build settings
            </summary>
            <returns> True, if succeeded, False if exception happened. I.e. this is possible if we query settings of C+ project 
            while solution is being open
            </returns>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryResolveReferencesUsingMsBuild(JetBrains.VsIntegration.ProjectDocuments.VSProjectInfo)">
            <summary>
            Retirns tumple of assembly refernces, project references, project outputs
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryResolveReferencesUsingMsBuildInternal(JetBrains.VsIntegration.ProjectDocuments.VSProjectInfo)">
            <summary>
            Retirns tumple of assembly refernces, project references, project outputs
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetOrCreateProjectItemByHierarchyItem_TranslateForCurrentContext(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
              <para>Returns a project file from our model for any VS HItem that belongs to the solution (i.e. will disappear from VS when solution is closed in VS, and its editors will be closed). On non-solution HItems (such as our LiveTemplates editor), should return <c>Null</c>. Such items do not logically belong to the solution, and should not map to Project Model.</para>
              <para>TranslateForCurrentContext means that if thie HItem belongs to a shared linked file source, should actually use the linked file target, whichever currently is selected for opening in the context.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetOrCreateProjectItemByHierarchyItem(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Returns a project file from our model for any VS HItem that belongs to the solution (i.e. will disappear from VS when solution is closed in VS, and its editors will be closed). On non-solution HItems (such as our LiveTemplates editor), should return <c>Null</c>. Such items do not logically belong to the solution, and should not map to Project Model.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.TryGetHierarchyItemByProjectItem(JetBrains.ProjectModel.IProjectModelElement,System.Boolean)">
            <summary>
            Gets the VS Hierarchy item for a project item, or a project itself, or the solution. Nulls on errors.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItem(JetBrains.ProjectModel.IProjectModelElement,System.Boolean)">
            <summary>
            Gets the VS Hierarchy item for a project item, or a project itself, or the solution. Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItemCore(JetBrains.ProjectModel.IProjectModelElement,System.Boolean,JetBrains.Util.OnError)">
            <summary>
            Looks up a VS Hierarchy item for a project item (or a project, or a solution).
            Works as either NotNull or CanBeNull.
            </summary>
            <param name="elem">Element to look up.</param>
            <param name="forceBackgroundLoad"></param>
            <param name="onerror">What to do with errors, throw to be NotNull, ignore to be CanBeNull.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.GetHierarchyItemByProjectItemCore(JetBrains.ProjectModel.IProject,JetBrains.Util.FileSystemPath,System.Boolean,System.Boolean,JetBrains.Util.OnError)">
            <summary>
            Looks up a VS Hierarchy item for a project item (or a project) by the containing project and the location of the item, which will be parsed by the project's VS Hierarchy.
            Works as either NotNull or CanBeNull.
            </summary>
            <param name="project">Containing project. Provides the VS Hierarchy.</param>
            <param name="path">Path of the project item. Will be parsed by the project hierarchy. Use <see cref="F:JetBrains.Util.FileSystemPath.Empty"/> or project's <see cref="P:JetBrains.ProjectModel.IProjectItem.Location"/> to get the hierarchy item of the project itself.</param>
            <param name="isFileExpected"> </param>
            <param name="forceBackgroundLoad">Return hierarchy items for projects that haven't been synchronized yet</param>
            <param name="onError">What to do with errors, throw to be NotNull, ignore to be CanBeNull.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Projects.Builder.ProjectModelSynchronizer.Init_SaveProjectOrSolution(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution)">
            <summary>
            When Visual Studio is saving some document, checks if it's a project or solution, and if our settings for them should be saved, or properties updated from them.
            Moved from <c>VsDocumentManager</c>, seems like a more fit place.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.ProjectModel.ProjectModel.StandardEditorsToFileTypeConverter.myEditorsMap">
            <summary>
            General editor to file type map
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.ProjectModel.ProjectModel.StandardEditorsToFileTypeConverter.myEditorExtensionsMap">
            <summary>
            More specific file type map, including editor AND extension
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsEnsureWritableVbWhileDebugging">
            <summary>
            Solve RSRP-272348 issue.
            </summary>
            <remarks>(DK) In VB-projects IVsTextStream.ReplaceStreamEx method returns S_OK but does not change the stream content in the following cases:
            - while debugging when Enable Edit and Continue option is turned off (x86 and x64);
            - while debugging x64 application, even when Enable Edit and Continue option is turned on;
            - while debugging an attached process (any platform, any Enable Edit and Continue option state).
            We should detect such situations beforehand and don't allow to make changes to VB-file(s), otherwse an exception will be thrown.
            </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsSolutionWrapper">
            <summary>
            Wraps VS specific solution state
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsEnsureWritableHandler">
            <summary>
            Attaches to <see cref="!:SolutionBase"/> events related to handling making the files writable.
            Common implementation across VS versions.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsEnsureWritableHandler.OnMakingWritable(JetBrains.ProjectModel.MakingWritableEventArgs)">
            <summary>
            Attempts to make the requested files writable (e.g. check out from SCC).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyEx.IsTopLevelHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Code borrowed from VS Source Code.
            Tells whether this is the top-level hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyEx.IsSolutionHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets whether this hierarchy maps to the Solution (the very root hierarchy).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem">
            <summary>
            Represents a pair of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> and <see cref="T:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID"/> that together uniquely identify an item in the hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Represents a hierarchy item.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.CreateRoot(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Creates an item that is the root of this <paramref name="hierarchy"/> (<see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT"/>).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.TryCreate(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            A shortcut for creating a hierarchy if <paramref name="hierarchy"/> is non-<c>Null</c> and returning <c>Null</c> otherwise.
            In short, turns a <c>Null</c> <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> into a <c>Null</c> container.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.GetItem(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Gets another item from the same hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.Equals(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.Hierarchy">
            <summary>
            The hierarchy of the item.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsNullItem">
            <summary>
            Gets whether this hierarchy item is <c>Null</c> (<see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_NIL"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsRootItem">
            <summary>
            Gets whether this hierarchy item is the hierarchy root (<see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsSelectionItem">
            <summary>
            Gets whether this hierarchy item is the selection item (<see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ItemId"/> = <see cref="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION"/>).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.ItemId">
            <summary>
            The pointer-size identifier of the item within its <see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.Hierarchy"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE.Equals(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCOOKIE)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_ForceNew">
            <summary>
            force create
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_FrameMdiChild">
            <summary>
            default
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSCREATEWEBBROWSER.VSCWB_OptionNoDocProps">
            <summary>
            default
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Type">
            <summary>
            I4 -> 1 == Document Frame, 2 == Tool Frame
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocView">
            <summary>
            UNK object filling client area of window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_SPFrame">
            <summary>
            UNK IServiceProvider which is site object for DocView object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_SPProjContext">
            <summary>
            UNK IServiceProvider provided by the owning IVsHierarchy
            This can be QS'ed for project context services
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Caption">
            <summary>
            BSTR -> full window caption
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Obsolete3005">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Obsolete3006">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowState">
            <summary>
            I4 -> see VSWINDOWSTATE above
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_FrameMode">
            <summary>
            I4 -> see VSFRAMEMODE above
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_IsWindowTabbed">
            <summary>
            I2 returns 0 if window not tabbed, 
                       1 if window is Tabbed and is Active Tab
                       2 if window is Tabbed and is Not Active tab
               Document windows always return 0
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_UserContext">
            <summary>
            Note: VSFPROPID_UserContext   should now be used by all toolwindows to push context
            UNK IVsUserContext
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ViewHelper">
            <summary>
            UNK Helper object can override add/override interfaces 
                normally implemented on the DocView object
                ViewHelper can implement following interfaces:
                    IVsWindowFrameNotify
                    IOleCommandTarget
                    IVsToolboxUser
                    IVsDocOutlineProvider
                    IDocHostUIHandler
                    IVsBackForwardNavigation
                    IVsWindowView
                    IVsStatusbarUser
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ShortCaption">
            <summary>
            BSTR -> partial window caption (ie Foo.Txt)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowHelpKeyword">
            <summary>
            Note: to use the default windowhelp   implementation, leave these properties unset
               you should only be using these properties if you are not pushing usercontext
               (e.g. you are a help window and don't want to blank out other user context)
            BSTR -> keyword to be used for cmdidWindowHelp
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_WindowHelpCmdText">
            <summary>
            Note: to use the default windowhelp   implementation, leave these properties unset
               you should only be using these properties if you are not pushing usercontext
               (e.g. you are a help window and don't want to blank out other user context)
            BSTR -> command text for cmdidWindowHelp (e.g. Help on: Help Index)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocCookie">
            <summary>
            The following properties are for all document frames
            I4 -> IVsRunningDocumentTable (RDT) key
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OwnerCaption">
            <summary>
            The following properties are for all document frames
            BSTR portion of caption defined by owner IVsHierarchy
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_EditorCaption">
            <summary>
            The following properties are for all document frames
            BSTR portion of caption defined by editor implementation
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_pszMkDocument">
            <summary>
            The following properties are for all document frames
            BSTR pszMkDocument passed to CreateDocumentWindow
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_DocData">
            <summary>
            The following properties are for all document frames
            UNK returns the AltDocData if available else the RDTDocData
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_Hierarchy">
            <summary>
            The following properties are for all document frames
            UNK owning IVsHierarchy
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ItemID">
            <summary>
            The following properties are for all document frames
            I4  VSITEMID of document
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CmdUIGuid">
            <summary>
            The following properties are for all document frames
            GUID used to control visibility of toolbars and AutoVisible tool windows
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CreateDocWinFlags">
            <summary>
            The following properties are for all document frames
            I4 VSCREATEDOCWIN flags passed to CreateDocumentWindow 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_guidEditorType">
            <summary>
            The following properties are for all document frames
            GUID guidEditorType uniquely identify which IVsEditorFactory created the document.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_pszPhysicalView">
            <summary>
            The following properties are for all document frames
            BSTR identifies the type of window created by the IVsEditorFactory (e.g. "Form")
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_InheritKeyBindings">
            <summary>
            The following properties are for all document frames
            GUID most often used by an window to inherit the key bindings of the TextEditor
                 e.g.: pFrame->SetGuidProperty(VSFPROPID_InheritKeyBindings, CMDUIGUID_TextEditor)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_RDTDocData">
            <summary>
            The following properties are for all document frames
            UNK  the DocData registered in the RDT for the document in this frame
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_AltDocData">
            <summary>
            UNK
                 if this window is only editing a piece of a larger document
                 then AltDocData is the DocData object for the piece of the document
                 that is being edited within the window where as the RDTDocData 
                 is the DocData object for the entire document registered in the RDT.
                 AltDocData objects are not registered in the RDT. Document Windows
                 that have AltDocData objects are created using CDW_fAltDocData flag.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidPersistenceSlot">
            <summary>
            The following properties are for all tool frames
            GUID that uniquely identifies a tool window type.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_GuidAutoActivate">
            <summary>
            The following properties are for all tool frames
            GUID OBSOLETE. Do NOT use.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_CreateToolWinFlags">
            <summary>
            The following properties are for all tool frames
            I4 VSCREATETOOLWIN flags passed to CreateToolWindow 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ExtWindowObject">
            <summary>
            the followin properties are for extensibility
            UNK returns the Environment's "Window" automation IDispatch object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_MultiInstanceToolNum">
            <summary>
            The following properties are for all tool frames
            I4 ID of a multi-instance tool window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_BitmapResource">
            <summary>
            The following properties are for all tool frames
            I4 Resource number of bitmap in satellite dll
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_BitmapIndex">
            <summary>
            The following properties are for all tool frames
            I4 index into strip if bitmap handle is a strip
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ToolbarHost">
            <summary>
            UNK IVsToolbarHost   used to add toolbars to window.  Property is only valid if 
            CTW_fToolbarHost or UIHWF_SupportToolWindowToolbars is   specfied.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_HideToolwinContainer">
            <summary>
            I2 make the toolwindow's cntr hidden when saving data file
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OverrideDirtyState">
            <summary>
            BOOL/EMPTY. Tri-state value of dirty star (*) in window caption
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_OLEDocObjectDocument">
            <summary>
            OOL. Specifies whether pane is holding OLE doc object
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ParentHwnd">
            <summary>
            HWND parent of OwnerDocked window
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ParentFrame">
            <summary>
            IVsWindowFrame of parent container for OwnerDocked window.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_ToolWindowDocCookie">
            <summary>
            VT_INT_PTR value for IVsRunningDocumentTable (RDT) key for document associated with a tool window (eg. Code Definition Window). 
            Setting this property enables both caption dirty indicator (*) management and the firing of OnBeforeDocumentWindowShow RDT events for the tool window. 
            It is assumed that the frame caption is set correctly, without a dirty indicator (*), before this property is set, 
            as setting this property will cause a caption dirty indicator (*) to be added, if the document is dirty. 
            Also, when this property is set, the OnBeforeDocumentWindowShow RDT event is immediately fired to indicate that a new document has been show.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSFPROPID.VSFPROPID_FIRST">
            <summary>
            !!!! NOTE !!!!   THIS MUST BE THE SAME AS THE LAST PROP DEFINED
            </summary>
            <remarks>
            (DK) ???? WHY ????
            </remarks>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_NIL">
            <summary>
            A Visual Studio item identifier that represents the absence of a project item. This value is used when there is no current selection. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_ROOT">
            <summary>
            A Visual Studio item identifier that represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed to a single item. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.VSITEMID_SELECTION">
            <summary>
            A Visual Studio item identifier that represents the currently selected item or items, which can include the root of the hierarchy.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.CompareTo(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID.Equals(JetBrains.VsIntegration.Interop.Declarations.VsShell.VSITEMID)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTATTRIB.RDTA_NOTIFYDOCCHANGEDMASK">
            <summary>
            The following attribute events   are fired by calling NotifyDocumentChanged
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTATTRIB.RDTA_DocDataReloaded">
            <summary>
            The following attribute events   are fired by calling NotifyDocumentChanged
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTATTRIB.RDTA_AltHierarchyItemID">
            <summary>
            The following attribute events   are fired by calling NotifyDocumentChanged
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTFLAGS.RDT_NoLock">
            <summary>
            can be used with FindAndLockDocument(RDT_NoLock,...,&amp;docCookie) to get DocCookie w/o taking a lock
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTFLAGS.RDT_DOCMASK">
            <summary>
            allow VSCREATEDOCWIN flags in doc mask
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveIfDirty">
            <summary>
            save only if dirty (this is the default)
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.PromptSave">
            <summary>
            prompt user whether to save
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.ForceSave">
            <summary>
            force save even if not dirty
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveNoChildren">
            <summary>
            save only the root of the hierarchy passed in, don't include its children
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.SaveOnlyChildren">
            <summary>
            save only children of the hierarchy passed in, don't include hierarchy itself
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.ActivateDocOnErr">
            <summary>
            activates the editor window of a doc if it errors on save
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.DocClose">
            <summary>
            indicates save is a result of a document close
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSRDTSAVEOPTIONS.Reserved">
            <summary>
            reserved internal bits
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Interop.Declarations.VsShell.VSREGDOCLOCKHOLDER.RDLH_WeakLockHolder">
            <summary>
            A weak lock holder only wants to hold an EditLlock if there are no other edit locks
            IVsDocumentLockHolder::Close() will be called on next EditLock.
            A weak lock holder must first check the existing lock count, and only take its
            EditLock if there are no other EditLocks. It should take its EditLock before
            calling RegisterDocumentLockHolder.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsExtenderInstaller">
            <summary>
            Registers and unregisters the highlighters.
            Due to the <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/>, it's invoked for each <see cref="T:JetBrains.VsIntegration.ProjectModel.VsRegisterExtenderAttribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemEx.GetFirstChild(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Gets the first child of the hierarchy. <see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemEx.GetFirstVisibleChild(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Gets the first visible child of the hierarchy. <see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemEx.GetNextSibling(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Gets the next sibling child of the hierarchy. <see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemEx.GetNextVisibleSibling(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Gets the next visible sibling child of the hierarchy. <see cref="P:JetBrains.VsIntegration.ProjectModel.VsHierarchyItem.IsNullItem"/> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectModel.VsHierarchyItemEx.IsSolutionHierarchyItem(JetBrains.VsIntegration.ProjectModel.VsHierarchyItem)">
            <summary>
            Gets whether this hierarchy item represents the Solution node.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.VSProjectInfo.UpdateProjectReferences(System.Collections.Generic.IDictionary{JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Update.IProjectReferenceProperties},System.Collections.Generic.IDictionary{JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Update.IProjectReferenceProperties})">
            <summary>
            Updates project refernces and returns their quantity
            </summary>
            <param name="resolvedAssemblyReferences">
              References resolved by msbuild. This is obsolete hack for VS2012 early builds. Not in use any more.
            </param>
            <param name="resolvedProjectReferences"></param>
            <returns>-1 on error, number of references otherwise</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.VsRegisterObjectInstaller">
            <summary>
            Registers and unregisters the highlighters.
            Due to the <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/>, it's invoked for each <see cref="T:JetBrains.VsIntegration.ProjectModel.VsRegisterObjectAttribute"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Interop.Extension.DteEx">
            <summary>
            Extensions for the <see cref="T:EnvDTE.DTE"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Interop.Extension.DteEx.CommandBars(EnvDTE.DTE)">
            <summary>
            Casts the <see cref="!:_DTE.CommandBars"/> property to its specific type.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.ProjectModel.WellKnownFoldersTracker">
            <summary>
            Advices FileSystemTracker on some well known folders in order to merge subsequent FileSystemTracker jobs
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsSaveMonitor.SaveExecuted">
            <summary>
            <para>When user changes Visual Studio options, sometimes this event would fire.</para>
            <para>It's not quite guaranteed that any VS options change will be advertised with this event, but it's a suitable workaround if you haven't gotten the real event.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsToolsOptionsMonitor.VsOptionsMightHaveChanged">
            <summary>
            <para>When user changes Visual Studio options, sometimes this event would fire.</para>
            <para>It's not quite guaranteed that any VS options change will be advertised with this event, but it's a suitable workaround if you haven't gotten the real event.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.AddVsVersionToLogs">
            <summary>
            On startup and shutdown, exposes the VS version in the logs.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Build.VsPackageAssemblyArtifact">
            <summary>
            Represents the VS integartion entry assembly, which is generated dynamically out of all the installation data provided, including the actions etc.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation">
            <summary>
            Provides info on the VS environment.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.GetVisualStudioGlobalRegistryPath">
            <summary>
            Gets the Visual Studio registry path prefix for a specific Registry hive.
            Example: <c>“Software\Microsoft\VisualStudio\8.0Receptor”</c>.
            Note: this path is not redirected to the local hive of the current Visual Studio running instance.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.GetVsAppDataPath(System.Environment.SpecialFolder)">
            <summary>
            Gets the path to the Visual Studio local/roaming/common appdata folder for the given VS Hive.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.GetVsInstallDirFromRegistry">
            <summary>
            Reads the Registry Hive of the currently running Visual Studio instance to read its InstallDir.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.GetVsRegistryKey(JetBrains.Util.RelativePath)">
            <summary>
            Gets the Registry key path to the given subkey in the current VS Registry Hive.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.DevEnvInstallDir">
            <summary>
            InstallDir of the current VS version.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.VsHive">
            <summary>
            Gets the VS Hive that is the VS Version + VS RootSuffix.
            Examples: “8.0”, “8.0Receptor”.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.VsRootSuffix">
            <summary>
            Gets the VS Root Suffix, eg the main one (an empty string) or the experimental one (eg “Receptor”).
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.VsVersion2">
            <summary>
            Gets the version of the Visual Studio we're running under, two components only, <c>Major.Minor</c>. Example: “8.0”.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation.VsVersion4">
            <summary>
            Gets the version of the Visual Studio we're running under, the full 4-component thing. Example: “9.0.30729.1”.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact.#ctor(JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Wraps an existing VS environment object.
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact.#ctor(System.Version,System.String)">
            <summary>
            Supplies manual info about VS environment.
            </summary>
            <param name="versionVs">VS version. Two first components are important, the rest is only for special applications (in most cases OK to have zeroes in there).</param>
            <param name="sRootSuffix">VS root suffix, <c>NULL</c> or <c>""</c> for the default hive.</param>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.IServiceProviderEx">
            <summary>
            Generic extensions to the OLE <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Queries a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <typeparam name="TService">Identifier of the service.</typeparam>
            <typeparam name="TInterface">Interface to query the gotten instance for.</typeparam>
            <returns>The instance.</returns>
            <example>
            <code>
            IVsDebugger2 debugger = sp.GetService&lt;SVsShellDebugger, IVsDebugger2&gt;();
            </code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.GetService(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid,System.Guid)">
            <summary><seealso cref="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"/>
            Queries a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <param name="ssid">Identifier of the service.</param>
            <param name="iid">Interface to query the gotten instance for.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.TryGetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary><seealso cref="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.GetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"/>
            Tries to query a service provider for a service.
            </summary>
            <typeparam name="TService">Identifier of the service.</typeparam>
            <typeparam name="TInterface">Interface to query the gotten instance for.</typeparam>
            <param name="sp">The service provider to be queried for a service.</param>
            <returns>The instance, or <c>Null</c> in case of a failure.</returns>
            <example>
            <code>
            IVsDebugger2 debugger = sp.TryGetService&lt;SVsShellDebugger, IVsDebugger2&gt;();
            </code>
            </example>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.TryGetService(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid,System.Guid)">
            <summary><seealso cref="M:JetBrains.VsIntegration.Shell.IServiceProviderEx.TryGetService``2(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)"/>
            Tries to query a service provider for a service.
            </summary>
            <param name="sp">The service provider to be queried for a service.</param>
            <param name="serviceGuid">Identifier of the service.</param>
            <param name="interfaceGuid">Interface to query the gotten instance for.</param>
            <returns>The instance, or <c>Null</c> in case of a failure.</returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.IVsServiceProviderEx">
            <summary>
            VS-specific extensions to the OLE <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.IVsServiceProviderEx.IOleCommandTarget(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Gets the main Ole Command Target of the Visual Studio Shell.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.JetVisualStudioHost">
            <summary>
            Represents the VS host that can load our products.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsJetComponentManager">
            <summary>
            Visual Studio implementation of Jet Component Manager.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsJetComponentManager.VsJetMsoComponent.FPreTranslateMessage(JetBrains.Interop.WinApi.MSG[])">
            <summary>
            Processes the message before it is translated and dispatched.
            </summary>
            <returns>
            true if the message is consumed, false otherwise.
            </returns>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager">
            <summary>
            Adapts the one-time-init manager to VS by properly queuing the one-time-init and checking if VS is ready.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OnCheckFailed(System.Exception)">
            <summary>
            Invoked when one-time-init fails to read/write the Registry. Should report to the user in an app-dependent manner.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.IsOneTimeInitAllowed">
            <summary>
            Gets whether the one-time-init is allowed to run at the moment, eg the main window has already been created.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OneTimeInitRegistryInstaller">
            <summary>
            Resets the one-time-init in the Registry on installation and re-registration.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsOneTimeInitializationManager.OneTimeInitRegistryInstaller.MarkAsOneTimeInitDirty(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact,JetBrains.Application.Install.InstallationData.InstalledRegistryKey@,JetBrains.Application.Install.InstallationData.InstalledRegistryValue@)">
            <summary>
            Called once on the object during the registration process.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsHostCommandLine">
            <summary>
            Exposes the full command line of the VS host, with all the keys from all the products.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsAppCommandLine,System.String,JetBrains.Util.FileSystemPath)">
            <summary>
            Creates the cmdline.
            </summary>
            <param name="vsAppCommandLine">VS object.</param>
            <param name="sVsHiveRootSuffix">If VS is running in non-default hive, defines the root suffix of that hive. Keys with such a suffix will be recognized and stripped off the suffix. Keys belonging to the default hive will always be recognized. In the default hive, use an empty string.</param>
            <param name="startupDirectory">The startup directory which is required for treating relative paths in command line args.</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineArgName(System.String,System.String,System.String)">
            <summary>
            Forms the complete Visual Studio command line argument name, such as you should enter in the DEVENV command line.
            </summary>
            <param name="sArgName">Command line arg name.</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="sVsRootSuffix">Root suffix (suffixes the arg, if non-empty).</param>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineText(System.Collections.Generic.IEnumerable{JetBrains.Application.CommandLineParameter},System.String,System.String)">
            <summary>
            Forms the standalone host command line containing multiple parameters.
            </summary>
            <param name="parameters">Each parameter will be presented with <see cref="M:JetBrains.VsIntegration.Shell.VsHostCommandLine.GetCommandLineArgName(System.String,System.String,System.String)"/>, plus its value as a separate VS command line argument.</param>
            <param name="sProductName">Product name (prefixes the arg).</param>
            <param name="sVsRootSuffix">Root suffix (suffixes the arg, if non-empty).</param>
        </member>
        <member name="T:JetBrains.VsIntegration.IDE.EditorManager.Install.VsEditorFactoryInstaller">
            <summary>
            Emits Registry entries for registering the editor factories.
            NOTE that the main <see cref="T:JetBrains.VsIntegration.IDE.PersistableView.VsPersistableViewEditorFactory"/> does NOT use this mechanism because its particular registered class is in the emitted VS Package assembly.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.GetVsInstallDirFromRegistry">
            <summary>
            Reads the Registry Hive of the currently running Visual Studio instance to read its InstallDir.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetMsEnvDllPath">
            <summary>
            Knowing that VS environment is based on <c>msenv.dll</c>, gets the path of the loaded module.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.TryGetVsVersionFromDllVersion">
            <summary>
            As recommended by MSFT, tries to get the full 4-component VS version from fileversion of <c>msenv.dll</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVsRootSuffix(System.Version,Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)">
            <summary>
            VS Root Suffix for the <see cref="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVsHive(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)"/>.
            We assume that hive is <c>{Version}{RootSuffix}</c>. Knowing the version and hive, we can deduce the root suffix.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVsHive(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2)">
            <summary>
            VS hive retriever.
            Get from the local registry root key name.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVisualStudioRegistryPath(System.String)">
            <summary>
            Gets the Visual Studio registry path prefix for a specific Registry hive.
            Example: <c>“Software\Microsoft\VisualStudio\8.0ReSharper”</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVsAppDataPath(System.Environment.SpecialFolder,System.Version,System.String)">
            <summary>
            Gets the path to the Visual Studio local/roaming/common appdata folder for the given VS Hive.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.VisualStudioRegistryPathNoHive">
            <summary>
            Gets the version-independent Registry Visuyal Studio path prefix.
            Currently, <c>"Software\Microsoft\VisualStudio"</c>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformation.Discovery.GetVsInstallDirFromRegistry(JetBrains.Util.RelativePath)">
            <summary>
            Reads the Registry Hive at the supplied Registry path to read the InstallDir.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsEnvironmentInformationEmulated">
            <summary>
            Main implementation of <see cref="T:JetBrains.VsIntegration.Shell.IVsEnvironmentInformation"/> is <see cref="T:JetBrains.VsIntegration.Shell.VsEnvironmentInformation"/> which relies on information from a live Visual Studio instance to function.
            If you'd like to emulate this behavior outside Visual Studio (e.g. to get vs-version-specific product settings location), create an instance of this object on explicitly-supplied parameters.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsEnvironmentInformationEmulated.#ctor(System.Version,System.String)">
            <summary>
            Supplies manual info about VS environment.
            </summary>
            <param name="versionVs">VS version. Two first components are important, the rest is only for special applications (in most cases OK to have zeroes in there).</param>
            <param name="sRootSuffix">VS root suffix, <c>NULL</c> or <c>""</c> for the default hive.</param>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsMainWindow.MainWindowHandle">
            <summary>
            A real VS main window handle.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsMainWindow.ActiveWindowHandle">
            <summary>
            A handle of the active VS top level window: main or floating tab well or floating tool window.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.Shell.VsMainWindow.System#Windows#Forms#IWin32Window#Handle">
            <summary>
            Return the current active VS window to be used as an owner of popups.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsNonZombiedProductCanBeStarted">
            <summary>
            <para>Exposes the VS Service Provider, but only at times when its VS Shell is not in the zombied state. Otherwise, <c>Null</c>.</para>
            <para>You can bind to the lifetime of this property to make sure you're operating in a live environment.</para>
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsNonZombiedProductCanBeStarted.SiteNonZombiedUnguarded">
            <summary>
            <para>Exposes the VS Service Provider, but only at times when its VS Shell is not in the zombied state. Otherwise, <c>Null</c>.</para>
            <para>You can bind to the lifetime of this property to make sure you're operating in a live environment.</para>
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Zones.AutoselectZoneByVsVersionRangeAttribute">
            <summary>
            Marker to help the Visual Studio JetHost choose the applicable zones by the current VS version in a universal fashion, without any special knowledge of the “Until…” stuff.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Zones.AutoselectZoneByVsVersionRangeAttribute.AutoselectZoneByJustThisVsVersion(System.Version,System.Collections.Generic.IEnumerable{JetBrains.Application.Parts.IPartsCatalogue},JetBrains.Util.OnError)">
            <summary>
            Gets the JustVsXX zone.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.Zones.AutoselectZoneByVsVersionRangeAttribute.AutoselectZonesByVsVersionInRange(System.Version,System.Collections.Generic.IEnumerable{JetBrains.Application.Parts.IPartsCatalogue},JetBrains.Util.OnError)">
            <summary>
            Gets all zones hitting the giving version (Just, Since, Until).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Zones.ISinceVs08Zone">
            <summary>
            Visual Studio integrated products, VS 8.0 and above.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.Zones.IVisualStudioZone">
            <summary>
            Visual Studio integrated products, all Visual Studio versions.
            </summary>
            <remarks>Basically the same as <see cref="T:JetBrains.VsIntegration.Shell.Zones.ISinceVs08Zone"/>, but more semantically specific.</remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.Install.VsPackageEmitsToolWindowIcons">
            <summary>
            Tool window: collects icons of tool windows, schedulles for package resources, emits mapping class for using in code.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.Install.VsPackageEmitsToolWindowIcons.EmitResourceMapping(System.Collections.Generic.List{JetBrains.Util.JetTuple{System.String,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageBitmapResource}})">
            <summary>
            Emit a class implementing <see cref="T:JetBrains.VsIntegration.UI.WindowManagement.IVsToolWindowIconResourceIds"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.IVsToolWindowIconResourceIds">
            <summary>
            <para>Syncs autogenerated tool window data with statically-defined tool window data.</para>
            <para>This interface implementation must be available as a component on the environment level. It's autogenerated into the VS bootstrapper assembly.</para>
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.IVsToolWindowIconResourceIds.TryGetIconResourceId(System.String)">
            <summary>
            Gets the ID of the package bitmap resource which contains an icon for the tool window of the current product identified by the given product-neutral tool window ID.
            </summary>
            <param name="sProductNeutralToolWindowId"><see cref="P:JetBrains.UI.ToolWindowManagement.ToolWindowDescriptorAttribute.ProductNeutralId"/></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsThemedIconSettingsLoader">
            <summary>
            Select default icon theme based on VS version.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsPopulateAboutBox">
            <summary>
            Adds VS version and RootSuffix to the About Box.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsPopulateAboutBox.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.StdApplicationUI.About.AboutBox,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.UI.Application.IUIApplication)">
            <summary>
            Supplies VS version info to the About Box.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsServiceProviderResolver">
            <summary>
            Exposes "components" in the VS Service Provider to our component model.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.RegisterCommonVsServices(JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap)">
            <summary>
            Registers VS services allowed in all VS versions.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.myFRegisterService">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryService``1"/> (cached delegate).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryService``1">
            <summary>
            Initiates adding a record for allowed service queries. Pass the class whose GUID gives out the SSID to query for.
            Fluent-call <see cref="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.As``1"/> to register interface types for which this service should be queried. 
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.RegisterService(System.Type,System.Type)">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryService``1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.Resolve(System.Type,JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Tries resolving this as a lazy/optional/etc and interface itself.
            </summary>
            <param name="typeInterface">The type (unwrapping as we try more).</param>
            <param name="outside">What we have already unwrapped (un terms of lazy/optional etc).</param>
            <returns>Descriptor, if found. Otherwise, Null.</returns>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.Ban``1(System.String)">
            <summary>
            Bans the interface from being imported. Throws an exception upon resolve.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.Wrapper``1(System.Func{``0},JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Registers a custom VS interface wrapper. In this case the <typeparamref name="TInterface"/> is not actually a VS interface, but is logically related.
            Adds an assertion for the primary thread to your function.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy">
            <summary>
            Impl for <see cref="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryService``1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.As``1">
            <summary>
            Adds an interface for which (when imported into the component) the service should be queried.
            Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.LazyOnly">
            <summary>
            Restricts importing this interface as Lazy{Interface} kind only, to defer creating Visual Studio entities serving these components.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.SetFlags(JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceFlags)">
            <summary>
            Applies newcoming flags to descriptors already created.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.QueryServiceProxy.Optional">
            <summary>
            Marks the interface which might be missing on the end user machine, and should be requested as wrapped in the <see cref="!:Optional&lt;T&gt;"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceMap.DeferredComponentDescriptorWithLazyFlag.Flags">
            <summary>
            Flags describing access to this descriptor.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceFlags.IsLazyOnly">
            <summary>
            When <c>True</c>, this descriptor can only be returned out of the container when wrapped into <see cref="T:JetBrains.Application.Components.LazyValueResolver.LazyDescriptor`1"/>.
            This helps to ensure VS services are not instantiated forcibly at startup.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsServiceProviderResolver.VsServiceFlags.IsOptional">
            <summary>
            When <c>True</c>, this descriptor wraps an interface that might be missing in actual environments. All access to this component must be wrapped with the <see cref="T:JetBrains.Application.Components.Optional`1"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.RawVsServiceProvider">
            <summary>
            Means for getting the raw VS Service Provider if <see cref="T:JetBrains.VsIntegration.Shell.VsServiceProviderResolver"/> cannot satisfy your needs by the means of injection.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.IExposeVsServices">
            <summary>
            Helps <see cref="T:JetBrains.VsIntegration.Shell.VsServiceProviderResolver"/> with exposing VS services it does not know about (eg VS10-specific).
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.Shell.VsUIHostCommandDispatcher">
            <summary>
            Wraps and exposes the VS global command target object to make sure it could be imported reliably (otherwise might get some other <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"/> on a local component in a nearby container, because this interface is implemented by various classes in our product).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.Shell.VsUIHostCommandDispatcher.Raw">
            <summary>
            Raw VS global command target.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.ProjectDocuments.Template.VsTemplateManager.AddFromTemplate(JetBrains.ProjectModel.IProjectFolder,JetBrains.Util.FileSystemPath,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Cope template to temporary folder, replace/add custom parameters and execute template
            </summary>
            <param name="folder"></param>
            <param name="templatePath"></param>
            <param name="name"></param>
            <param name="customParameters"></param>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.VsTextControlCommon">
            <summary>
            Base common impl for VS-based text controls.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlCommon.myIsDisposedUnguarded">
            <summary>
            When the owning frame of the text control gets disposed of, raises immediately, without waiting for the guarded context.
            This flag should be checked by any party going into the unmanaged API to ask for smth, as such calls are likely to return <see cref="F:JetBrains.Interop.WinApi.HResults.E_FAIL"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.#ctor(JetBrains.VsIntegration.DocumentModel.VsDocumentCommon,JetBrains.Application.IShellLocks,JetBrains.TextControl.Impl.TextControlTypingHandlers,JetBrains.VsIntegration.Shell.VsCommandProcessor,JetBrains.VsIntegration.Shell.ActionManagement.IVsActionManager,JetBrains.Application.changes.ChangeManager,JetBrains.DocumentModel.Impl.DocumentChangeManager,JetBrains.VsIntegration.DocumentModel.VsDocumentManagerSynchronization,JetBrains.TextControl.DefaultTextControlSchemeManager)">
            <summary>
            Protected ctor.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Lifetime">
            <summary>
            Guarded disposal of the text control.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlCommon.DisposablesUnguarded">
            <summary>
            Dropped immediately as the native window gets closed.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlCommon.FireTextControlChange">
            <summary>
            Initiates firing a text control change, but only if the object is currently ready for change manager interaction.
            If ready, the event is sinked and processed. Otherwise, does nothing (transitional states on creation and dispose).
            // TODO: ITextControlChange is obsolete, phase out.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.GetVsTextViewOleCommandTarget">
            <summary>
            Gets the command target for the current VS text view.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.PushOleCommandFilter(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
            <summary>
            Places an OLE command filter to the text control filters chain at the highest priority.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.SyncToVsGuarded">
            <summary>
            Forces sync of text control models to the VS source.
            Must be called in a guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.SyncToVsUnguarded">
            <summary>
            Callable in an unguarded context, causes <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.SyncToVsGuarded"/> to be executed in the guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Execute(JetBrains.Application.changes.IChangeMap)">
            <summary>
            Changemanager entry point.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.GetVsTextViewCompoundAction">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction"/> interface for the text control.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Init_AfterFieldInit">
            <summary>
            Base init. Must be called by the inheritors after the text control is fully initialized.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Init_Disposes">
            <summary>
            Behavior on dispose (guarded, unguarded).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCommon.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>
            Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.
            Generic implementation common for all VS text controls.
            If we go from document to text control and then back successfully, then the point is not covered by a collapsed region or any other layered model artifact.
            Slow because at points that are actually under a collapsed region the calculations are complex sometimes.
            Overriding with a more specific method is recommended.
            </remarks>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.IsVsAlive">
            <summary>
            Gets whether the VS implementation of the text control is currently alive or not.
            The text control is disposed of under a guard, which is much later than the native VS object ceases to exist.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.IsVsDead">
            <summary>
            Gets whether the VS implementation of the text control is already dead or not.
            The text control is disposed of under a guard, which is much later than the native VS object ceases to exist.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Caret">
            <summary>
            Caret access.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Document">
            <summary>
            <para>Gets the document that supplies this text control with content.</para>
            <para>The rendered text gets from the document, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            Use <see cref="P:JetBrains.TextControl.ITextControl.Coords"/> to convert between various text control coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Selection">
            <summary>
            Selection access.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.Window">
            <summary>
            Provides various UI framework-related information about the <see cref="T:JetBrains.TextControl.ITextControl">text control</see>.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.TextControl.VsTextControlCommon.JetBrains#TextControl#ITextControl#Lifetime">
            <summary>
            Gets the Disposables collection that controls the text control lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlCreatorCommon.CreateShellTextControl(JetBrains.DocumentModel.IDocument,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             <para>Creates the text control of the default kind in the current application environment, and attaches it to the given document (there might be multiple text controls for the same document).</para>
             <para>You're responsible for disposing of the returned text control when needed no more.</para>
             </summary>
            <param name="document">
              The document for the text control.
            </param>
            <param name="frame">
              The logical owner of the text control in the UI hierarchy.
            </param>
            <returns>The new text control.</returns>
             <remarks>
             <para>Note that Visual Studio Integration uses other methods for attaching to existing Visual Studio text controls.</para>
             </remarks>
        </member>
        <member name="T:JetBrains.VsIntegration.TextControl.VsTextControlUpdateCookieOnBatchChange">
            <summary>
            On each batch change, takes an Update Cookie on text controls automatically.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.myLocalReentrancyGuardPromote">
            <summary>
            Controls recursion in <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.Promote"/>.
            Note: not sure if it actually happens, but were reported in a couple builds.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.myRegisterDelegateBackToVsLog">
            <summary>
            There used to be queer bugs like ending up with <see cref="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.myRegisteredDelegateBackToVsHandlers"/> empty while sitting on callstack in between Push and Pop, so we'd log the transitions here and throw along with the exception. 
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.myRegisteredDelegateBackToVsHandlers">
            <summary>
            Handlers currently inside <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.WithRegisteredDelegateBackToVsHandler(System.String,System.Action{System.String},System.Action)"/>.
            It is yet unclear as of whether they can really be nested (usually, VS won't allow nested commands).
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.BeforeDelegateToTypingHandlers">
            <summary>
            Fires before we ever attempt to delegate to the typing handlers. Gives a chance to cancel the activity if the text view should process the keystrokes on its own, e.g. when showing VS completion window, or doing incremental search.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.IsDelegatingBackToVs">
            <summary>
            High while we're in <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.ExecDelegateBackToVs(System.String,System.ComponentModel.Design.CommandID,System.UInt32,System.IntPtr,System.IntPtr)"/> and calling into VS.
            We'd like to allow the VS typing handler to modify the document and let that change into our guarded context.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.CanDelegateToVs">
            <summary>
            For <see cref="T:JetBrains.VsIntegration.TextControl.VsTextControlActionExecuter"/> only.
            Gets whether <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.DelegateToVs"/> has any delegate-to-vs-handlers to call into. Otherwise the former will throw.
            // TODO: what are the nondeterministics scenarios when we have to check this before calling into the func?..
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.DelegateToVs">
            <summary>
            If we're running from inside <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.TryDelegateToTypingHandlers(System.Boolean,System.ComponentModel.Design.CommandID,System.IntPtr,System.Action{System.String})"/>, then there's an option to hand the command back to VS, for which we have the <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.ExecDelegateBackToVs(System.String,System.ComponentModel.Design.CommandID,System.UInt32,System.IntPtr,System.IntPtr)"/> parameters saved.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.CreateExceptionWithRegisteredDelegatesLog(System.String)">
            <summary>
            Adds <see cref="F:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.myRegisterDelegateBackToVsLog">log messages</see> to the exception.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.ExecDelegateBackToVs(System.String,System.ComponentModel.Design.CommandID,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            When we intercept a VS typing action, we deletate its execution to a R# action handler. In case the handler fails to handle the action, we delegate it back to VS to execute, but surround said execution with proper suppressions.
            This function delegates the action-delegated-to-R# back to VS.
            <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.TryDelegateToTypingHandlers(System.Boolean,System.ComponentModel.Design.CommandID,System.IntPtr,System.Action{System.String})"/> -&gt; <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.ExecDelegateBackToVs(System.String,System.ComponentModel.Design.CommandID,System.UInt32,System.IntPtr,System.IntPtr)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.Promote">
            <summary>
            Creates or updates the command filter.
            The goal of calling the Promote perioducally is to keep ourselves as the very first filter in the filters chain (©dsha).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.TryDelegateToTypingHandlers(System.Boolean,System.ComponentModel.Design.CommandID,System.IntPtr,System.Action{System.String})">
            <summary>
            When we intercept a typing command in the text editor, we ask R# if it'd like to handle it first. If it wouldn't, we hand the command back to VS.
            Note that if R# doesn't know the command, we refuse intercepting it and let VS continue. However, if the command is known but R# refuses to handle it, we'd delegate the command ourselves instead of letting it go further the filters chain, and have that delegation surrounded with special marks.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.TryDelegateToTypingHandlers_NonTyping(System.ComponentModel.Design.CommandID,System.Action{System.String})">
            <summary>
            When we intercept a typing command in the text editor, we ask R# if it'd like to handle it first. If it wouldn't, we hand the command back to VS.
            Note that if R# doesn't know the command, we refuse intercepting it and let VS continue. However, if the command is known but R# refuses to handle it, we'd delegate the command ourselves instead of letting it go further the filters chain, and have that delegation surrounded with special marks.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.TryDelegateToTypingHandlers_Typing(System.IntPtr,System.Action{System.String})">
            <summary>
            When we intercept a typing command in the text editor, we ask R# if it'd like to handle it first. If it wouldn't, we hand the command back to VS.
            Note that if R# doesn't know the command, we refuse intercepting it and let VS continue. However, if the command is known but R# refuses to handle it, we'd delegate the command ourselves instead of letting it go further the filters chain, and have that delegation surrounded with special marks.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.WithRegisteredDelegateBackToVsHandler(System.String,System.Action{System.String},System.Action)">
            <summary>
            When we intercept a typing command in the text editor, we ask R# if it'd like to handle it first. If it wouldn't, we hand the command back to VS.
            Note that if R# doesn't know the command, we refuse intercepting it and let VS continue. However, if the command is known but R# refuses to handle it, we'd delegate the command ourselves instead of letting it go further the filters chain, and have that delegation surrounded with special marks.
            This method stores availability for <see cref="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.ExecDelegateBackToVs(System.String,System.ComponentModel.Design.CommandID,System.UInt32,System.IntPtr,System.IntPtr)"/> in case the delegation to R# wants to call back.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Here we intercept a typing command in the Visual Studio text editor, and give R# the first chance to handle it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.TextControl.VsTextControlOleCommandTarget.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <summary>
            We do not change the availablility of commands, we only intercept execution.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsSpecialColorTableFromSysColorEx">
            <summary>
            Reads VS colors from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)"/> and feeds them into <see cref="T:JetBrains.CommonControls.VsSpecialColorTable"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.VsStatusBarTextCommon">
            <summary>
            Manipulates status bar text in Visual Studios, which is currently done in a common way.
            Status bar subclassing is done in vs-version-specific way instead.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.Install.VsToolWindowInstaller">
            <summary>
            Registers and unregisters the tool windows.
            Due to the <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/>, it's invoked for each <see cref="T:JetBrains.UI.ToolWindowManagement.ToolWindowDescriptorAttribute"/>.
            </summary>
        </member>
        <member name="T:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager">
            <summary>
            Helps with making a <see cref="T:JetBrains.UI.WindowManagement.WindowFrame"/> for VS-based text controls when you have an <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame"/> to begin with. Note that a VS-based text control is not required to have an <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame"/> under it.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.#ctor(JetBrains.Application.IShellLocks)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
        </member>
        <member name="F:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.VsWindowFrameKey">
            <summary>
            Specifies the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame">VS window frame</see> on a <see cref="T:JetBrains.UI.WindowManagement.WindowFrame"/> that has been created from a VS frame.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.TryGetSelfOrParentVsWindowFrame(JetBrains.UI.WindowManagement.WindowFrame)">
            <summary>
            If the frame is associated with a VS window frame (with <see cref="F:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.VsWindowFrameKey"/> bag entry), returns such.
            Otherwise attempts to walk up the parents chain and repeat.
            NOTE: Don't use if you need to get VS info for the SPECIFIC text control! You might be getting the frame (and all other info) for the parent text control, e.g. in case of an Embedded Peek Text View).
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.VsWindowFrameManager.CreateFromVsWindowFrame(JetBrains.DataFlow.Lifetime,JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame)">
            <summary>
            Creates a <see cref="T:JetBrains.UI.WindowManagement.WindowFrame">Window Frame</see> based on the Visual Studio <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame"/>.
            For text controls, you may have to add <c>VsAttachTextControlsToTextViews::AttachWindowFrameToTextViewRootParent</c>.
            Warning: the Frame does not know when it's closed (IVsWindowFrameNotify2::OnClose fires before the user can cancel closing), so it's up to you to dispose of the frame (if it has valueable resources attached) when whoever owns the frame closes.
            </summary>
        </member>
        <member name="P:JetBrains.VsIntegration.UI.WindowManagement.WinFormsToolWindowPane.BackgroundColor">
            <summary>
            Themed tool window background color.
            </summary>
        </member>
        <member name="M:JetBrains.VsIntegration.UI.WindowManagement.WinFormsToolWindowPane.ToolWindowPaneRootControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
             Paint themed tool window background.
            </summary>
        </member>
    </members>
</doc>
