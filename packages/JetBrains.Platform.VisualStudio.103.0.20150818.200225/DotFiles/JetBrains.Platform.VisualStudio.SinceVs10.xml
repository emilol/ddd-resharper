<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.VisualStudio.SinceVs10</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsAttachTextControlsToTextViews">
            <summary>
            Whenever we see a new text view, create our text control over it.
            We must give a document to the text control, which is normally per-solution, that's why 'tis a solution component.
            Solutionless text controls (eg LT editor) are created elsewhere.
            We hope no text view's buffer has corresponding IDocument in more than one solution :)
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsAttachTextControlsToTextViews.AttachWindowFrameToTextViewRootParent(JetBrains.DataFlow.Lifetime,JetBrains.UI.WindowManagement.WindowFrame,System.Object,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService,JetBrains.Application.Interop.NativeHook.IWindowsHookManager)">
            <summary>
            We cannot yet rip off information about the window off the <see cref="T:JetBrains.VsIntegration.Interop.Shim.VsShell.Shell.IVsWindowFrame"/>.
            Thus, when we're attaching to a VS text control, we only know its <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.RootParentHwnd"/> from the text view.
            </summary>
            <param name="lifetime"></param>
            <param name="frame">Frame of the text control, to be completed with <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.RootParentHwnd"/> info.</param>
            <param name="textview">Text view of either implementation. HWND-based in Whidbey, Avalon-based in DevTen.</param>
            <param name="vsEditorAdaptersFactoryService"></param>
            <param name="hookman"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsAttachTextControlsToTextViews.GetCreateParamsCore(JetBrains.DataFlow.Lifetime,JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewDataForTextControlDevTen,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,System.Collections.Generic.IEnumerable{JetBrains.Platform.VisualStudio.SinceVs10.TextControl.IFindWindowFrameForVsTextView})">
            <summary>
            Collects env for creating a text control.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewCollectorDevTen">
            <summary>
            Collects text views, getting them from any possible sources (MEF export collector, RDT events, by enumerating available text views periodically).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewCollectorDevTen.AdviseViewClosedSafe(Microsoft.VisualStudio.Text.Editor.IWpfTextView,JetBrains.Util.JetWeakReference{JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewCollectorDevTen})">
            <summary>
            Prevents fucking csc from pulling too many objects into the closure. Should have just the view (which defines the lifetime of all this stuff) and a weak ref to our object (which might live shorter if we're suspended).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewCollectorDevTen.VsTextViewsGuarded">
            <summary>
            Lists the VS text controls (views) currently discovered. Guarded.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewCollectorDevTen.GetCurrentVsViewsFromRdt(JetBrains.VsIntegration.Interop.Shim.VsShell.ProjectDocuments.IRunningDocumentTable,JetBrains.Threading.IThreading,JetBrains.Util.Lazy.Lazy{Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService},JetBrains.Util.Lazy.Lazy{Microsoft.VisualStudio.TextManager.Interop.IVsTextManager})">
            <summary>
            Enums RDT buffers, then gets text views attached to them.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CurrentLine.VsCurrentLineDevTen.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.TextControl.ITextControlManager,JetBrains.Util.Lazy.Lazy{Microsoft.VisualStudio.Text.Classification.IClassificationTypeRegistryService},JetBrains.Util.Lazy.Lazy{Microsoft.VisualStudio.Text.Classification.IClassificationFormatMapService})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.GutterMargin.VsGutterMargin">
            <summary>
            The common margin implementation type.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.GutterMargin.VsGutterMarginProvider">
            <summary>
            Bottom standard margin.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.Markup.VsDocumentMarkupTagger.myMoniker">
            <summary>
            N/A unless <see cref="!:TextControlManager.OptionTrace"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.Markup.VsDocumentMarkupTagger.myName">
            <summary>
            N/A unless <see cref="!:TextControlManager.OptionTrace"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.Markup.VsDocumentMarkupTaggerProvider.myName">
            <summary>
            N/A unless <see cref="!:TextControlManager.OptionTrace"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsErrorStripeLayoutManagerDevTen.InitErrorStripe(JetBrains.DataFlow.Lifetime,JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen)">
            <summary>
            Wires up together (1) error stripe doc (2) error stripe control (3) text control.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.#ctor(JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.TextControlLineColumn_To_Viewport(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            This is the central char-to-pixel conversion method in the DevTen case.
            It has no such immanent thing as canvas coordinate system, only viewport-relative coords are defined with acceptable accuracy.
            The scrolling is probably in lines, and canvas coord depends on the line height of the lines above the view, which is not calculated until they get into the viewport.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.Viewport_To_TextControlLineColumn(System.Windows.Point)">
            <summary>
            This is the central pixel-to-char conversion method in the DevTen case.
            It has no such immanent thing as canvas coordinate system, only viewport-relative coords are defined with acceptable accuracy.
            The scrolling is probably in lines, and canvas coord depends on the line height of the lines above the view, which is not calculated until they get into the viewport.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.GetAverageLineHeight(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Lines outside the viewport do not have layout, pixel coordinates, or height values.
            To approximate pixel y-coordinates outside the viewport, we use the average viewport line height.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.GetTextViewLineNumber(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.PointTrackingMode)">
            <summary>
            Takes the text view formatted line, maps it to the visual buffer and gets its line number in the visual buffer.
            </summary>
            <param name="textview">The owning text view. Used for getting the visual buffer.</param>
            <param name="line">The formatted line to get the number of.</param>
            <param name="whichend">Whether to try the beginning or the end of the formatted line for the text view line number. They're not mathematically guaranteed to be the same.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.GetViewportRectFromTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Calculates the viewport rectangle in canvas coordinates. Exposed by <see cref="P:JetBrains.TextControl.ITextControlScrolling.ViewportRect"/>.
            Unguarded (ie updates even when under a guard).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.MapVsVirtualPoint_DocToTextControl(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Raw mapping of VS snapshot points. Preserves virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.MapVsVirtualPoint_TextControlToDoc(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Raw mapping of VS snapshot points. Preserves virtual space.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.Screen_To_Viewport(System.Windows.Point)">
            <summary>
            The version that does not lose precision.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.Viewport_To_Screen(System.Windows.Point)">
            <summary>
            The version that does not lose precision.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.Canvas_To_TextControlLineColumn(JetBrains.TextControl.Graphics.PointEx)">
            <summary>
            Gets the canvas coords from two points in viewport coords: sample plus origin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.Screen_To_TextControlLineColumn(System.Drawing.Point)">
            <summary>
            Use text-to-viewport &amp; viewport-to-screen conversions.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.TextControlLineColumn_To_Canvas(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Gets the canvas coords from two points in viewport coords: sample plus origin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCoordinateConversionDevTen.TextControlLineColumn_To_Screen(JetBrains.TextControl.TextControlLineColumn)">
            <summary>
            Use text-to-viewport &amp; viewport-to-screen conversions.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlCreatorDevTen.CreateTextControl``1(JetBrains.TextControl.CreateTextControlParams{``0})">
            <summary>
            Creates a new text control for some document (there might be multiple text controls for the same document).
             The document and the type of the text control created are determined by the <paramref name="param"/>, for which any <see cref="T:JetBrains.TextControl.CreateTextControlParams`1"/> inheritor could be used.
            </summary>
            <typeparam name="TTextControl">Type of the text control to create.</typeparam><param name="param">Text control context and parameters.</param>
            <returns>
            The new text control.
            </returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen">
            <summary>
            Wraps Visual Studio text controls with our model, VS 10.0 implementation.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.Init_AdvertiseOnVsObject">
            <summary>
            When we're ready (and until we begin teardown), advertise the jet model object on the VS model object.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.Init_SyncOnDocChange">
            <summary>
            When the doc changes, do vs-sync for the important model parts.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.GetVsTextViewOleCommandTarget">
            <summary>
            Gets the command target for the current VS text view.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.IsPositionInTextView(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets whether the given document position is present in the text view of the text control.
            </summary>
            <param name="position">The document position in the unified position format (<see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocOffset(System.Int32)"/> or <see cref="P:JetBrains.TextControl.ITextControl.Coords"/>.<see cref="M:JetBrains.TextControl.Coords.ITextControlCoords.FromDocLineColumn(JetBrains.DocumentModel.DocumentCoords)"/>).</param>
            <remarks>
            Even though every position could be converted to a text view (and usually a reasonable value will be returned), sometimes that would be only an approximate position (that would not roundtrip). For example, a document position could be hidden from the text view by a collapsed region.
            Generic implementation common for all VS text controls.
            If we go from document to text control and then back successfully, then the point is not covered by a collapsed region or any other layered model artifact.
            Slow because at points that are actually under a collapsed region the calculations are complex sometimes.
            Overriding with a more specific method is recommended.
            </remarks>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.PushOleCommandFilter(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
            <summary>
            Places an OLE command filter to the text control filters chain at the highest priority.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.Init_AfterFieldInit">
            <summary>
            Base init. Must be called by the inheritors after the text control is fully initialized.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.Coords">
            <summary>
            <para>Provides access to the text control coordinate conversion, which makes it possible to represent a point on the text control or in the document in a unified way.</para>
            <para>The rendered text gets from the <see cref="P:JetBrains.TextControl.ITextControl.Document">document</see>, however, it might be transformed or filtered (eg projections and collapsed regions).</para>
            <para>That's why document line-column positions (<see cref="T:JetBrains.DocumentModel.DocumentCoords"/>) do not always agree to the text control line-column positions (<see cref="T:JetBrains.TextControl.TextControlLineColumn"/>). Currently, these coordinates have different CLR types and are not so easily mixed together.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen.Scrolling">
            <summary>
            Gets the scrolling parameters of the text control, both for quering and manipulating.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlScrollingDevTen.#ctor(JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService,JetBrains.Application.IShellLocks)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlScrollingDevTen.ScrollTo(JetBrains.TextControl.Coords.ITextControlPos,JetBrains.TextControl.TextControlScrollType)">
            <summary>
            Scrolls the view to make the <paramref name="position"/> visible in the viewport, placing it based on the <paramref name="scrolltype"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlSelectionDevTen.#ctor(JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlDevTen,JetBrains.Application.IShellLocks)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlWindowDevTen.Init_ErrorStripe">
            <summary>
            Wires up together (1) error stripe doc (2) error stripe control (3) text control.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlWindowDevTen.CreateViewportAnchorCore(JetBrains.DataFlow.Lifetime)">
            <summary>
            Should create the anchoring rect core object. Do not use caching, the impl already does it instead of calling the method directly.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.VsTextControlWindowDevTen.FocusCore">
            <summary>
            Should cause the text control to achieve keyboard focus.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.VsEnsureWritableHandlerDevTen">
            <summary>
            Attaches to <see cref="!:SolutionBase"/> events related to handling making the files writable.
            Overrides common behavior.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Declarations.VsSettingsScope">
            <summary>
            See Microsoft.VisualStudio.Settings.SettingsScope
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Declarations.VsSettingsType">
            <summary>
            See Microsoft.VisualStudio.Settings.SettingsType
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.BackgroundOperations.VsBackgroundOperationControl">
            <summary>
            VsBackgroundOperationControl
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.BackgroundOperations.VsBackgroundOperationControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.ExclusionFlags.ExcludeOwnVersion">
            <summary>
            <para>Don't return the extension of the current version of the current product (only return other versions).</para>
            <para>Note that there might be multiple registrations for this version in different locations, but we cannot know which one is better (or currently running), so either all or non can be included.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.ExclusionFlags.ExcludePerMachineLocation">
            <summary>
            Don't return per-machine extensions (they're all-users-all-hives).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.ExclusionFlags.ExcludePerUserPerHiveLocations">
            <summary>
            Don't return per-user-per-hive locations in various appdata folders.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.MsiExtensionManifestInstaller">
            <summary>
            For MSI-based installs of METH-aware products, emits the Extension Manifest to the Bin folder and creates a shortcut to it from the VS InstallDir.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.MsiExtensionManifestInstaller.GetEmittedExtensionManifestFilePath(JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Full path to the emitted file.
            Written to a VS-version-specific subfolder on the build system (with a fixed filename), and scheduled for installation into DEVENV folder.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter">
            <summary>
            Writes the VS PkgDef file from the product <see cref="T:JetBrains.Application.Install.InstallationData.InstallationData"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.IsPackageDefFile">
            <summary>
            <see cref="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata"/> entry key for files that should be referenced in VSIX Manifest as PackageDef files.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.Install(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,System.IO.TextWriter,System.Collections.Generic.Dictionary{JetBrains.Application.Install.InstallationData.InstallationMacroName,System.String})">
            <summary>
            Writes the product VS-specific Registry keys that go under the VS Registry hive into the PkgDef file.
            </summary>
            <param name="data">Installation Data, as collected from the <see cref="T:JetBrains.Application.Install.Installer"/>.</param>
            <param name="vsenv"></param>
            <param name="writer">The output stream.</param>
            <param name="macrosOverride">Optional override for select <see cref="T:JetBrains.Application.Install.InstallationData.InstallationMacroName"/> macro values.</param>
            <returns>Returns what Registry data could not be put into PkgDef.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.CollectEntries(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,System.Collections.Generic.IDictionary{JetBrains.Util.RelativePath,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Collect all non-duplicate Registry entries for writing into pkgdef.
            Returns what Registry data could not be put into PkgDef.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.CreatePkgDefMacros(System.Collections.Generic.Dictionary{JetBrains.Application.Install.InstallationData.InstallationMacroName,System.String})">
            <summary>
            In addition to the externally defined macros, adds PkgDef-specific substitutions to be resolved when reading the PkgDef in Visual Studio.
            </summary>
            <param name="macrosOverride"> </param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.FormatForReg(System.Collections.Generic.IDictionary{JetBrains.Util.RelativePath,System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Prepares entries for writing to the Reg file "as is", converting the values to strings and escaping the strings.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.SubstituteMacros(System.Collections.Generic.IDictionary{JetBrains.Util.RelativePath,System.Collections.Generic.Dictionary{System.String,System.Object}},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Applies macro substitutions to the entries and prepares them for writing into the REG file.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.WriteReg(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.String}},System.IO.TextWriter)">
            <summary>
            Dumps the strings that are ready for writing.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros">
            <summary>
            Macros that can be used in the form of <c>$MacroName$</c> within a pkgdef file.
            Taken from the <c>"PkgDef Management Design.docx"</c> classified document.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.AppDataLocalFolder">
            <summary>
            Path to the sub-folder of CSIDL_LOCAL_APPDATA used by this application – based on the user settings root (e.g. “C:\Users\{user}\AppData\Local\VisualStudio\10.0”).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.AppName">
            <summary>
            Name of the Boutique application (not defined for other appids).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.BaseInstallDir">
            <summary>
            Synonym for ShellFolder for backward compatibility.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.CommonFiles">
            <summary>
            Path to the common files folder for the application (i.e., value of CSICL_PROGRAM_FILES_COMMON) (e.g., “C:\ProgramData\VisualStudio\10.0”)
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.HivelessRootKey">
            <summary>
            Same as RootKey, without the HKEY_CURRENT_USER portion.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.MyDocuments">
            <summary>
            Path to the user’s Documents folder (e.g., “C:\Users\{user}\Documents”).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.PackageFolder">
            <summary>
            Folder in which the PkgDef file was found.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.ProgramFiles">
            <summary>
            Parent folder for all program installations (e.g., “C:\Program Files”)
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.RootFolder">
            <summary>
            Path to the root of the application installation; for Visual Studio and the Express SKUs, this is the same as ShellFolder; for Boutique applications (Isolated shell) this is a different folder, specific to the application. In the latter case, the value is read from HKEY_LOCAL_MACHINE\{registry root}\RootFolder.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.RootKey">
            <summary>
            Parent key for all Configuration values (e.g. “HKEY_CURRENT_USER\Software\Microsoft\VisualStudio\10.0_Config”).
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.ShellFolder">
            <summary>
            Path to the root of the Visual Studio shell installation; read from HKEY_LOCAL_MACHINE\{registry root}\InstallDir; for Portable SKUs, this is computed by removing the last two levels of the path to the executable or by applying the rule specified by RelativeRootFolderPath.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.System">
            <summary>
            Windows\System32 directory.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.PackageDefWriter.PkgDefMacros.WinDir">
            <summary>
            Windows installation directory
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.RegistryToPackageDefConverter">
            <summary>
            When emitting for vs10+, turns VS-related Registry installation data into a Package Def file.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller">
            <summary>
            Common paths forr installing VS-integration-related things.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.DevEnvExtensionsRelPath">
            <summary>
            A relative path from VS InstallDir (the IDE folder) to the Extensions folder.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.Vs11LocalAppDataComponentModelCacheFolderRelPath">
            <summary>
            Path to the MEF component model cache folder in local app data, relative to the VS local app data folder.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.Vs11MachineExtensionsConfigurationChangedFileRelPath">
            <summary>
            A relative path from VS InstallDir to the special file which has to be touched on VS11 to signal that configuration has to be rebuilt on doing devenv/setup.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.Vs11PerUserExtensionsConfigurationChangedRegistryValueName">
            <summary>
            A Registry value name under the root VS Registry Hive key in HKCU which has to be touched on VS11 to signal that configuration has to be rebuilt.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetExtensionFolderRelPath(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Gets the path to the folder into which the LNK files to R# VSIX Manifest and PkgDef (or the files themselves) are installed in per-machine or per-user installation scenario.
            Per-machine: the path is relative to the VS installdir, which is what's written into Registry by VS, and it points to the "IDE" folder not the very VS installation root.
            Per-user: the path is relative to the VS LocalAppData hive-specific folder.
            </summary>
            <example><c>Extensions\JetBrains\Receptor\v5.0</c></example>
            <example><c>Extensions\JetBrains\NameOfVsHostWithWave</c></example>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetExtensionFolderRelPath_NoVersionNumber(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>Much like <see cref="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetExtensionFolderRelPath(JetBrains.Application.BuildScript.Application.HostInfo)"/>, but without the product version number.</summary>
            <example><c>Extensions\JetBrains\Receptor</c></example>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetProductBinariesVsSpecificDir(JetBrains.Application.Install.Installer.InstallerSourceFoldersResolver,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Gets the full path to the compile-time folder under product binaries which contains vs-version-specific things.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetProductBinariesVsSpecificDir_Relative(System.Version)">
            <summary>
            Gets the relative path (based on product binaries dir) to the compile-time folder under product binaries which contains vs-version-specific things.
            Might be used as a relative path on the target system also.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.GetProductBinariesVsSpecificDir_Relative(JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Gets the relative path (based on product binaries dir) to the compile-time folder under product binaries which contains vs-version-specific things.
            Might be used as a relative path on the target system also.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsIntegrationInstaller.Base">
            <summary>
            Declarations to avoid dependencies between static field initializers which might use uninitialized fields easily.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.AdjustExtensionToRunPerUser(JetBrains.Util.FileSystemPath,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            A per-machine extension is enabled by default, but a per-user must be augmented.
            This includes both modifying the extension manifest and telling extman it's enabled.
            </summary>
            <param name="pathManifest">Path to the extension manifest file. Use <see cref="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.FindExtensionManifest(JetBrains.Util.FileSystemPath)"/> if you got just a folder.</param>
            <param name="hostInfo">Env.</param>
            <param name="vsenv">Visual Studio hive identification.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.AdjustExtensionToRunPerUser_EnableInRegistry(JetBrains.Util.FileSystemPath,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            </summary>
            <param name="pathManifest"></param>
            <param name="hostInfo"></param>
            <param name="vsenv">Visual Studio hive identification.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.EnableExtensionInRegistry(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            Writes the Registry information so that Visual Studio treated the extension as being enabled.
            </summary>
            <param name="hostInfo">Gives a product name and version of the extension. We then expect the extension to be in the folder named against our standard.</param>
            <param name="vsenv">Visual Studio hive identification.</param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.EnableExtensionInRegistry(JetBrains.Util.FileSystemPath,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            Writes the Registry information so that Visual Studio treated the extension as being enabled.
            </summary>
            <param name="pathExtensionFolder">Path to the folder containing the extension.</param>
            <param name="vsenv">Visual Studio hive identification.</param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.EnsureValidRegistry(JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
              <para>Makes sure all of the Registry keys required to have the extension enabled &amp; loaded into VS are present.</para>
              <para>VS11 RC builds have a problem that they wouldn't create certain keys and would then fail to function (ExtensionTypes key).</para>
              <para>Also sets the EnableAdminExtensions which is required to load extensions from non-program-files locations in VS10—VS11.</para>
            </summary>
            <param name="vsenv">Visual Studio hive identification.</param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.FindAllCompanyExtensionsInHive(JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.ExclusionFlags,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Finds all extensions by this company in the extensions folders for this VS version.
            </summary>
            <param name="exclusionflags"> </param>
            <param name="vsenv">Visual Studio hive identification.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.FindExtensionManifest(JetBrains.Util.FileSystemPath)">
            <summary>
            In the extension folder, looks for the manifest. Or a shell link to the manifest, in which case it's resolved to the target.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.GetExtensionsInHive(JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.ExclusionFlags,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Looks for any extensions of a different version in the same hive.
            </summary>
            <param name="exclusionflags">What to exclude from enumeration.</param>
            <param name="hostInfo">AppDesc.</param>
            <param name="vsenv">Visual Studio hive identification.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.GetVsExtensionManagerEnabledExtensionsRegistryPath(JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            </summary>
            <param name="vsenv">Visual Studio hive identification.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.GetVsExtensionManagerRegistryPath(JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            </summary>
            <param name="vsenv">Visual Studio hive identification.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.LocalEnableCompanyVsExtensions(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            The standard Local Installation step for enabling all of our extensions in VS.
            </summary>
            <param name="product"></param>
            <param name="vsenv"></param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.LocalEnableProductVsExtension(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            The standard Local Installation step for enabling just the VS extension being installed.
            </summary>
            <param name="hostInfo"></param>
            <param name="vsenv"></param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.MarkVs11ConfigurationChanged(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.BuildScript.Install.LocalRegisterIsolationOptionsArtifact)">
            <summary>
            VS 11: reset VS flag which means that configuration has changed, otherwise VS won't re-read its extensions for any updates.
            </summary>
            <param name="product"> </param>
            <param name="vsenv">Visual Studio hive identification.</param>
            <param name="localRegisterIsolationOptionsArtifact"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixHelper.WipeVsExtensionCaches(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            This applies to VS10+. Mostly to VS11+ actually, because VS10 is not so aggressive
            </summary>
            <param name="product"> </param>
            <param name="vsenv">Visual Studio hive identification.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter">
            <summary>
            Produces a VSIX Manifest XML File for the product.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.GetExtensionIdentifier(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            Extension identifier (goes to the Identifier field of the Extension, used to identify it eg in VS Ext Man Registry).
            Pattern: <c>$(CompanyName).$(ProductName)</c>.
            Example: <c>JetBrains.ReSharper</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.GetExtensionVersionString(JetBrains.Application.BuildScript.Application.HostInfo)">
            <summary>
            The exact version of the extension, as written into its VSIX manifest.
            Pattern: <c>$(ProductVersionMajor).$(ProductVersionMinor)</c>.
            Example: <c>5.5</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.Install(System.Xml.XmlWriter,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,System.Uri,System.Uri,System.Uri,System.Uri,JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.DeploymentMode,JetBrains.Application.SinceClr4.BuildScript.Solution.AllAssembliesOnPackagesEx,System.String)">
            <summary>
             Produces a VSIX Manifest XML File for the product.
            </summary>
            <param name="uriPartPreview">Part URI.</param>
            <param name="writer">Writer for the XML output.</param>
            <param name="vsenv"></param>
            <param name="uriPartPkgDef">Path to the PkgDef file that should be referenced in the manifest. Must be relative to the root of the future VSIX container, ie a relative pack part path.</param>
            <param name="uriPartIcon">Part URI.</param>
            <param name="uriPartLicense">Part URI.</param>
            <param name="deploymentmode">Whether we're generating a manifest for the product installed MSI-way, where the manifest is needed for enabling MEF only. <c>False</c> means we're writing the standalone VSIX file.</param>
            <param name="allassPkg"></param>
            <param name="sContentLocationPrefix">For location of content files referenced from manifest, defines an optional prefix which might denote an absolute path to the content location.</param>
            <param name="applicationHost"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.GetFileNameOfProductAssembly(JetBrains.Metadata.Utils.AssemblyItem)">
            <summary>
            Gets the disk filename for an assembly. Usually it's the assname + extension, but the extension might vary (.dll/.exe) and has to be specified exactly as on disk.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.GetMefAssemblyItems(JetBrains.Application.SinceClr4.BuildScript.Solution.AllAssembliesOnPackagesEx)">
            <summary>
            Lists assemblies to be inspected by VS in search of MEF components.
            </summary>
            <param name="allassPkg"></param>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.DeploymentMode.Msi">
            <summary>
            Packaged into MSI.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.DeploymentMode.Manual">
            <summary>
            Just copied manually.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.DeploymentMode.Vsix">
            <summary>
            Packaged into VSIX.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.Elem._N">
            <summary>
            Embeds XML namespace into the element names, to ensure we always use them namespaced.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixManifestWriter.XsdBoolean">
            <summary>
            Matches what XSD thinks to be a boolean constant.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter">
            <summary>
            Writes a VSIX package from the product <see cref="T:JetBrains.Application.Install.InstallationData.InstallationData"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.Install(JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.Application.Install.Installer,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,System.IO.Stream,JetBrains.Util.FileSystemPath,JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags,JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Produces a VSIX package with product binaries, shipped files, and Registry entries in the form of a PkgDef file.
            </summary>
            <param name="hostInfo"></param>
            <param name="installer">The installation context.</param>
            <param name="vsenv"></param>
            <param name="streamVsixOutput">Output stream for the VSIX package content.</param>
            <param name="pathProductLicenseFile">Path to the Product License file on the local file system.</param>
            <param name="flags">Additional parameters.</param>
            <param name="installationData"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsVersionNeutralInstaller(JetBrains.DataFlow.Lifetime,JetBrains.Application.Install.Installer)">
            <summary>
            Takes the installer bound to a specific Visual Studio version and creates an installer that collects VS-neutral data.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteAssemblySet(System.IO.Packaging.Package,JetBrains.Build.AllAssemblies.AssemblyKind,JetBrains.Application.Install.Installer,JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags)">
            <summary>
            Writes product assemblies / references.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteFile(JetBrains.Util.Storage.SimpleFileItem,System.IO.Packaging.Package,System.String,System.String,System.Func{System.String})">
            <summary>
            Writes a single file to the package part.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteFile(JetBrains.Util.Storage.SimpleFileItem,System.IO.Packaging.Package,System.Uri,System.String,System.Func{System.String})">
            <summary>
            Writes a single file to the package part.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteInstallationDataFiles(System.IO.Packaging.Package,JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Installation data: Files part, goes to the parts inside the package.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteInstallationDataRegistry(System.IO.Packaging.Package,JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Installation data: Registry part, goes to the PkgDef file.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteProductBinaries(System.IO.Packaging.Package,JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags)">
            <summary>
            Product binaries, plus the shipped references, as VSIX package parts.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteProductClipart(System.IO.Packaging.Package)">
            <summary>
            Images for the ext manager.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteProductLicense(System.IO.Packaging.Package,JetBrains.Util.FileSystemPath)">
            <summary>
            Packs the product license into the VSIX at the <see cref="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.UriPartLicense"/> URI.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.WriteVsixManifest(System.IO.Packaging.Package,JetBrains.Application.BuildScript.Application.HostInfo,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation,JetBrains.Application.SinceClr4.BuildScript.Solution.AllAssembliesOnPackagesEx)">
            <summary>
            VSIX Manifest: XML part with extension description.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags.OptionIncludePdb">
            <summary>
            Program database (.pdb) files are added along with the DLLs.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags.OptionIncludeXmlDoc">
            <summary>
            XML documentation (.xml) files are added along with the DLLs.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Install.VsixWriter.CreateVsixFlags.OptionRequireStrongName">
            <summary>
            Managed product DLLs must have strong names (be signed with a key).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.IPropertyOwnerEx.GetPropertyByType``1(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Gets property keyed by Type. Throws if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.IPropertyOwnerEx.GetPropertyByType``1(Microsoft.VisualStudio.Utilities.IPropertyOwner,System.Func{``0})">
            <summary>
            Gets property keyed by Type. Creates with <paramref name="FCreateIfMissing"/> if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.IPropertyOwnerEx.TryGetPropertyByType``1(Microsoft.VisualStudio.Utilities.IPropertyOwner)">
            <summary>
            Gets property keyed by Type. <c>Null</c> if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.Documents.ITextBufferEx.GetIVsTextBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the adapter to the legacy interface by the new interface.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.Documents.ITextBufferEx.GetTextBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the new interface by the legacy interface.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.Documents.ITextBufferEx.TryGetIVsTextBuffer(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Tries to get the adapter to the legacy interface by the new interface.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.Documents.ITextBufferEx.TryGetPathFromTextDocument(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Helps with identifying VS buffers.
            In case the underlying document is file-based, extracts its path.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.Documents.ITextBufferEx.TryGetTextBuffer(JetBrains.VsIntegration.Interop.Shim.TextManager.Documents.IVsTextBuffer,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Tries to get the new interface by the legacy interface.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx">
            <summary>
            Extensions to <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> and related things (<see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.EnsureOutliningExpanded(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService)">
            <summary>
            Makes sure that the text control that supports outlining has the specified position expanded.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.EnsureOutliningExpanded(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.Outlining.IOutliningManagerService)">
            <summary>
            Makes sure that the text control that supports outlining has the specified span expanded.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetITextView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the managed text view from the adapter class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetIVsTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the adapter class that exposes the pre-VS-10 interfaces from the text view.
            DO NOT USE for things that could be achieved thru the modern API!
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.TryGetIVsTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the adapter class that exposes the pre-VS-10 interfaces from the text view.
            DO NOT USE for things that could be achieved thru the modern API!
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetServiceProvider(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the Service Provider of the text view.
            It wraps the Visual Studio <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> object, but exposes it with the System <see cref="T:System.IServiceProvider"/> API.
            The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/>-implementing object is the <c>VsTextViewAdapter</c> who derives from <c>WindowPane</c> who implements the system <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.TryGetServiceProvider(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the Service Provider of the text view.
            It wraps the Visual Studio <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> object, but exposes it with the System <see cref="T:System.IServiceProvider"/> API.
            The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/>-implementing object is the <c>VsTextViewAdapter</c> who derives from <c>WindowPane</c> who implements the system <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetTextViewHost(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the WPF host of the given view.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetTextViewHost(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView)">
            <summary>
            Gets the WPF host of the given view.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.GetWindowFrame(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the old-fashioned COM interface for the VS window frame.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.JetTextControl(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            <para>Gets our <see cref="T:JetBrains.TextControl.ITextControl"/> object attached to the given Visual Studio text control.</para>
            <para>Note that the object from our model corresponding to the Visual Studio model object is not guaranteed to exist at the moment of your call (eg you're calling from MEF and our Shell is not running yet/already). In this case the returned non-<c>Null</c> property has a <c>Null</c> value, and you should listen to the changes to its value (eg with <see cref="M:JetBrains.DataFlow.IPropertyEx.ForEachValue_NotNull``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,System.Action{JetBrains.DataFlow.Lifetime,``0})"/>).</para>
            <para>This technique allows to combine lifetimes of MEF and Shell entities: whether you look into this property before jet model object is created or when it's already available, your handler will be called when jet model object is ready.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.TryGetITextView(JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Tries to get the managed text view from the adapter class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.TryGetWindowFrame(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Gets the old-fashioned COM interface for the VS window frame.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.TextControl.IWpfTextViewEx.ToTextBoundsRect(Microsoft.VisualStudio.Text.Formatting.TextBounds)">
            <summary>
            To text-only bounds (not including the full line height).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Extension.SnapshotSpanEx.ContainsFullyInclusive(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            By default, <see cref="M:Microsoft.VisualStudio.Text.SnapshotSpan.Contains(Microsoft.VisualStudio.Text.SnapshotPoint)"/> wouldn't include the end point.
            Include both start and end points.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.AsDocLineColumn(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            This method does not perform coordinate conversion. You MUST make sure that <paramref name="vpt"/> is already in the text control coordinate space.
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.AsDocOffsetAndVirtual(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            This method does not perform coordinate conversion. You MUST make sure that <paramref name="vpt"/> is already in the text control coordinate space.
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.AsTextControlLineColumn(Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            This method does not perform coordinate conversion. You MUST make sure that <paramref name="vpt"/> is already in the text control coordinate space.
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.MapUpToTop2(Microsoft.VisualStudio.Text.Projection.IBufferGraph,Microsoft.VisualStudio.Text.SnapshotPoint,Microsoft.VisualStudio.Text.PointTrackingMode,Microsoft.VisualStudio.Text.PositionAffinity)">
            <summary>
            Maps the point to the topmost buffer of the graph. Emulates <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>::<c>MapUpToTop</c> function that were present in Beta1 but was gone in between August and September CTPs.
            </summary>
            <param name="graph">Buffer graph.</param>
            <param name="pointNonTop">A point in some buffer in the <see cref="T:Microsoft.VisualStudio.Text.Projection.IBufferGraph"/>.</param>
            <param name="pointTrackingMode">How <paramref name="pointNonTop"/> is tracked to the current snapshot if necessary.</param>
            <param name="positionAffinity">If the mapping is ambiguous (the position is on a source span seam), determines
                        whether the mapping should target the position immediately after the preceding
                        character or immediately before the following character in the top buffer.
                        This setting has no effect if the mapping is unambiguous.</param>
            <returns>The corresponding position in a snapshot of the top buffer, or null if the position does not map to the top buffer using
                        this graph.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.ToDocVsVirtualSnapshotPoint(JetBrains.TextControl.Coords.ITextControlPos)">
            <summary>
            Gets a virtual snapshot point in the document coordinate space.
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.ToVsVirtualSnapshotPoint(JetBrains.TextControl.DocOffsetAndVirtual,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.ToVsVirtualSnapshotPoint(JetBrains.DocumentModel.DocumentCoords,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.IDE.ConversionDevTen.ToVsVirtualSnapshotPoint(JetBrains.TextControl.TextControlLineColumn,Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            <para>DO NOT USE this low-level routine unless absolutely sure the surface API will not do.</para>
            <para>Use <see cref="T:JetBrains.TextControl.ITextControl"/>::<see cref="P:JetBrains.TextControl.ITextControl.Coords"/> and <see cref="T:JetBrains.TextControl.Coords.ITextControlPos"/> methods instead.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Interop.Shim.ShimDynamicApi">
            <summary>
            Temporary class while the API is non-stable. Shims the dynamic things.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser">
            <summary>
            In Internal mode, suggests turning a per-machine install into a per-user one.
            This is needed to have more than one hive: starting with DevTen, per-machine components can only be registered for ALL hives at once.
            This code takes the product shortcuts installed into <c>Common7\IDE\Extensions</c> and relocates them to <c>%LOCALAPPDATA%\Microsoft\VisualStudio\10.0\Extensions</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.AskCleanupInstallationsByOtherVersions">
            <summary>
            Checks if there are any extensions of the same product but different version registered into the same hive.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.AskJump">
            <summary>
            Asks whether to jump. Returns whether a jump was needed (if dialog will be shown, returns before actually doing the jump, and the jump could then be canceled by the user).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.DoIfNotJumping">
            <summary>
            Called by <see cref="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.AskJump"/> when it's decided (by logic or user) not to jump.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.DoJumpWithUI">
            <summary>
            User chose to jump (or we did it automatically). Error handling in UI.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.Jump_CleanupAllPerHiveExtensionsInThisHive(JetBrains.Application.IApplicationHost,JetBrains.VsIntegration.Shell.IVsEnvironmentInformation)">
            <summary>
            Before doing a jump, delete all possible per-hive extensions in this hive.
            More aggressive than <see cref="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Local.JumpVsixFromMachineToPerUser.AskCleanupInstallationsByOtherVersions"/>.
            </summary>
            <param name="applicationHost"> </param>
            <param name="vsenv"> </param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.VsGlyphFactory.Microsoft#VisualStudio#Text#Editor#IGlyphFactory#GenerateGlyph(Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine,Microsoft.VisualStudio.Text.Editor.IGlyphTag)">
            <summary>
            Generates a new glyph visual for the given line.
            </summary>
            <param name="line">The line that this glyph will be placed on.</param><param name="tag">Information about the glyph for which the visual is being generated.</param>
            <returns>
            The visual element for the given tag.
            </returns>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.TagInfoForAdornments.MarkersSingleLinePadding">
            <summary>
            Borrowed from <c>Microsoft.VisualStudio.Text.Utilities.Markers::SingleLinePadding</c>. Used when calculating marker background rect from text boundaries.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.TagInfoForAdornments.EnumSpanGeometries">
            <summary>
            Full text bounds
            This means the full height of the line, including any possible in-line adornments, like in VS12beta
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.TagInfoForAdornments.EnumTextGeometries(JetBrains.Util.dataStructures.FrugalLocalList{System.Windows.Rect}@)">
            <summary>
            This includes only the text glyphs, not any space allocated within the text view line for in-line adornments, like in VS12beta.
            This also does not include the whitespace in the beginning of the line.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.TagInfoForAdornments.MakeOutlineGeometry">
            <summary>
            Makes an outline geometry for the tag.
            Basically, it's a minimum spanning rect. But it must have cuts on the first and the last lines, to let out anything not falling into the span (example: java-style braces).
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.TagInfoForAdornments.GetSignificantTextBounds(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean,System.Boolean,JetBrains.Util.dataStructures.FrugalLocalList{System.Windows.Rect}@,JetBrains.Util.dataStructures.FrugalLocalList{System.Windows.Rect}@,System.Boolean)">
            <summary>
            Bounds of covered text, leading/tail whitespace excluded.
            </summary>
            <param name="line">Current text control line (not document line!).</param>
            <param name="spanTagMultiline">The whole tag (might cover many lines), we're analyzing only one line here.</param>
            <param name="isLineFirst">For rects height (text only / fill to adjacent line).</param>
            <param name="isLineLast">For rects height (text only / fill to adjacent line).</param>
            <param name="boundrects">Filled with rects with text covered with span.</param>
            <param name="rectsWithExcludedNonWhitespaceChars">Optionally fills with rects of all non-edge-wsp chars in this line not covered with our span.</param>
            <param name="isCollectingExcludedNonWhitespaceChars">Whether to fill prev param. If <c>False</c>, safe to pass the same list twice, won't touch the second one.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.FormatDefinitions.Install.VsPackageEmitsVsClassificationFormatDefinitions">
            <summary>
            Classification definition classes are required to have highlighters in VS10+ text editor.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.VsHighlighterClassificationHelper">
            <summary>
            Helps with conversion between our <see cref="T:JetBrains.TextControl.DocumentMarkup.RegisterHighlighterAttribute"/> and <see cref="T:Microsoft.VisualStudio.Text.Classification.ClassificationFormatDefinition"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.Zones.ISinceVs10Zone">
            <summary>
            Visual Studio integrated products, VS 10.0 and above.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.VsSkipFirstLaunchSetupProductCanBeStarted">
            <summary>
            On first startup, newer versions of VS might be spawning a secondary instance to have it perform certain one-time tasks.
            Our product shell should not be started up in these instances, because they're considered user-invisible, and our dialogs like licensing are unexpected in this mode.
            To detect the state, we're reading the FirstLaunchSetup VS cmdline parameter, as suggested by MSFT (maybe there's a better method, but we don't know of one yet.
            </summary>
            <remarks>NP-939 Product Shell Should Not Be Started in "FirstLaunchSetup" Mode</remarks>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.ITrackVsTextViewDataForTextControlChanges">
            <summary>
            Tracks when any VS text view properties change which might need respawning a text control.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.ITrackVsTextViewDataForTextControlChanges.TextViewDataChanged">
            <summary>
            Notifies of the possible change in the view, or any of the existing views if value is NULL.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewDataForTextControlDevTen">
            <summary>
            Based on an <see cref="T:JetBrains.VsIntegration.Interop.Shim.TextManager.TextControl.IVsTextView"/>, adds the data which is:
            (1) Sufficient to successfully create a text control over it.
            (2) Uniquely identifies the text control — that is, if this info changes, the text control should be respawned over the same text view.
            The main cause is that out text control strongly binds to the single document
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewDataForTextControlCollectorDevTen">
            <summary>
            Maintains a listing of <see cref="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewDataForTextControlDevTen"/>, on which text controls shoudl be created.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.AttachTextControlsToTextViews.VsTextViewDataForTextControlCollectorDevTen.VsTextViewsWithData">
            <summary>
            Text views which are ready for spawning text controls over them.
            When some crucial property changes for the text control, like a document to be attached to it, an item is revoked from this collection and re-added with new properties, so that the text control could be correctly re-created with the new properties, following the whole text control creation pipeline.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.FindWindowFrameViaTextViewServiceProvider">
            <summary>
            For most text views, their window frame is but a wrapper over the VS Window Frame representing a document tab.
            Get it out of the servide provider on the VS wrapper of the WPF text view.
            VS 10–11: We skip attaching text controls without frames, those should be handled manually, otherwise we do not have full context (eg a DevTen text control locally (bypassing RDT), eg in a refactoring preview, will not have a VS window frame — ok to skip here).
            VS 12: Here we got the new “Embedded Peek Text View” inserted as an island inside a big text view, which we also would like to treat as a text control, and it actually does not have a VS Window Frame on its own — we should execute special operations for finding its window frame.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.IFindWindowFrameForVsTextView">
            <summary>
            For most text views, their window frame is but a wrapper over the VS Window Frame representing a document tab. But sometimes it gets complicated.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.IFindWindowFrameForVsTextView.TryFindWindowFrameForVsTextView(JetBrains.DataFlow.Lifetime,Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            For most text views, their window frame is but a wrapper over the VS Window Frame representing a document tab. But sometimes it gets complicated.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.ProjectDocuments.ProjectReferenceManager10.FixReferencesWithoutDescriptor(System.Collections.Generic.List{VSLangProj.Reference},System.Collections.Generic.IList{JetBrains.Util.Pair{JetBrains.ProjectModel.Update.IProjectReferenceDescriptor,JetBrains.ProjectModel.Update.IProjectReferenceProperties}},System.Collections.Generic.IDictionary{JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.Update.IProjectReferenceProperties})">
            <summary>
            Explicitly call MsBuild to resolve references to unloaded projects.
            In VisualStudio 2010/ 2012 when unloaded project is referenced, Reference object does not contain path to its output unlike VisualStudio 2010
            see http://youtrack.jetbrains.com/issue/RSRP-329744
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.CreateObject(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid,System.Guid)">
            <summary>
            Creates an object
            </summary>
            <param name="localRegistry">Establishes a locally-registered COM object relative to the local Visual Studio registry hive</param>
            <param name="clsid">GUID if object to be created</param>
            <param name="iid">GUID assotiated with specified System.Type</param>
            <returns>An object</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
            <summary>
            Processes keyboard input at the keydown message level.
            </summary>
            <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
            <param name="modifiers">Modifier keys.</param>
            <returns>true if the message was handled by the method implementation; otherwise, false.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.TabInto(System.Windows.Input.TraversalRequest)">
            <summary>
            Sets focus on either the first tab stop or the last tab stop of the sink.
            </summary>
            <param name="request">Specifies whether focus should be set to the first or the last tab stop.</param>
            <returns>true if the focus has been set as requested; false, if there are no tab stops.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
            <summary>
            Called when one of the mnemonics (access keys) for this sink is invoked.
            </summary>
            <param name="msg">The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.</param>
            <param name="modifiers">Modifier keys.</param>
            <returns>true if the message was handled; otherwise, false.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
            <summary>
            Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"/> is called.
            </summary>
            <param name="msg">The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.</param>
            <param name="modifiers">Modifier keys.</param>
            <returns>true if the message was processed and <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)"/> should not be called; otherwise, false.</returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.HasFocusWithin">
            <summary>
            Gets a value that indicates whether the sink or one of its contained components has focus.
            </summary>
            <returns>true if the sink or one of its contained components has focus; otherwise, false. </returns>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
            <summary>
            Registers the IKeyboardInputSink interface of a contained component.
            </summary>
            <returns>The IKeyboardInputSite site of the contained component.</returns>
            <remarks>
            Components with child components should maintain internal collections of sites and use this method to add a new sink and return the new site. 
            You only need to maintain the site collection, because the sink can be obtained from the site.
            </remarks>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsCodeEditorDevTen.RootWpfElement.KeyboardInputSite">
            <summary>
            Gets or sets a reference to the component's container's <see cref="T:System.Windows.Interop.IKeyboardInputSite"/> interface.
            </summary>
            <returns>A reference to the container's <see cref="T:System.Windows.Interop.IKeyboardInputSite"/> interface.</returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsErrorStripeControlDevTen">
            <summary>
            Provides the WPF implementation of the Error Stripe in VS10+.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsErrorStripeControlDevTen.OnGetIndicatorTooltip(System.Object,JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs)">
            <summary>
            Handles requests for tooltips.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.IVsTextControlDevTenIncrementalSearchClient">
            <summary>
            Wraps the Visual Studio Incremental Search access.
            In VS10 and VS11 it's implemented differently due to the fact that in VS11 it's been integrated with regular search.
            The component is required to have an override in VS11+.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.IVsTextControlDevTenIncrementalSearchClient.IsVsIncrementalSearchActive(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Gets whether the text view is in the incremental search mode at the moment.
            </summary>
            <param name="wpfTextView"> </param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsTextControlDevTenIncrementalSearchClientSinceVs10">
            <summary>
            VS10+ client (NOTE: in VS11+ this <see cref="T:Microsoft.VisualStudio.Text.IncrementalSearch.IIncrementalSearch"/> implementation is present, but is not active).
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.UI.PublishPlatformResourceDictionaryToAvalonApplicationV4">
            <summary>
            This assembly is compiled for NETFX 4 and has PresentationFramework v4. Register our ResourceDictionary in it.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Markup.VsHighlightingViewListener.Microsoft#VisualStudio#Text#Editor#IWpfTextViewCreationListener#TextViewCreated(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Called when a text view having matchine roles is created over a text data model having a matching content type.
                        Exporters must specify at least one ContentTypeAttribute and one TextViewRole, and should mark their export using the following attribute:
                        [Export(typeof(TextViewCreationListener))], along with [ContentType()] and [TextViewRole()].
            </summary>
            <param name="textView">The newly created text view.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.IVsServiceProviderEx">
            <summary>
            VS-10-specific extensions to the OLE <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.Shell.IVsServiceProviderEx.IComponentModel(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Gets the MEF component model root in VS 10.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.MethTest.IMethTestServer">
            <summary>
            Detects broken installations.
            Now R# in DevTen consists of two separate things: VS Package and VS MEF extension. The first is the main one, but the second is required for normal operation. It's possible that one of them would fail. We consider the VS Package failure to load to be uncommon and fatal, whilst MEF would have its quirks from time to time. These situations we would like to explicitly detect and report, otherwise the symptoms could be ambiguous.
            This is the "server" part: an interface to the component registered with MEF, its presence to be checked by the package when it gets running.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.MethTest.MethTestServer">
            <summary>
            Detects broken installations.
            Now R# in DevTen consists of two separate things: VS Package and VS MEF extension. The first is the main one, but the second is required for normal operation. It's possible that one of them would fail. We consider the VS Package failure to load to be uncommon and fatal, whilst MEF would have its quirks from time to time. These situations we would like to explicitly detect and report, otherwise the symptoms could be ambiguous.
            This is the "server" part: a component registered with MEF, its presence to be checked by the package when it gets running.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.Shell.MethTest.MethTestClient">
            <summary>
            Detects broken installations.
            Now R# in DevTen consists of two separate things: VS Package and VS MEF extension. The first is the main one, but the second is required for normal operation. It's possible that one of them would fail. We consider the VS Package failure to load to be uncommon and fatal, whilst MEF would have its quirks from time to time. These situations we would like to explicitly detect and report, otherwise the symptoms could be ambiguous.
            This is the "client" part: a VS Package component to check the presence of MEF-registered components some time after startup.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CreateVsTextControlDevTenParams">
            <summary>
            Creates text controls over Visual Studio text views.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CreateVsTextControlDevTenParams.#ctor(JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey,Microsoft.VisualStudio.Text.Editor.IWpfTextView,JetBrains.UI.WindowManagement.WindowFrame)">
             <summary>
             Creates text controls over Visual Studio text views.
             The text control will be destroyed either when you call <see cref="M:System.IDisposable.Dispose"/> on it or when the text view is unregistered with VS.
             </summary>
             <param name="document">
               
               The document to be edited by the text control.
            
            </param>
             <param name="textview">
               
               The Visual Studio text control we're wrapping.
            
            </param>
             <param name="frame">Text control frame.</param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CreateVsTextControlDevTenParams.#ctor(JetBrains.VsIntegration.IDE.Documents.VsDocumentWhidbey,JetBrains.UI.WindowManagement.WindowFrame,Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
             <summary>
             Creates text controls over Visual Studio text views.
             The text control will be destroyed either when you call <see cref="M:System.IDisposable.Dispose"/> on it or when the text view is unregistered with VS.
             </summary>
             <param name="document">
               
               The document to be edited by the text control.
            
            </param>
             <param name="frame">Text control frame.</param>
             <param name="textview">
               
               The Visual Studio text control we're wrapping.
            
            </param>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CreateVsTextControlDevTenParams.Document">
            <summary>
            The document to be edited by the text control.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.IDE.TextControl.CreateVsTextControlDevTenParams.VsTextView">
            <summary>
            The Visual Studio text control we're wrapping.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginDevTenEx.GetMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Windows.Controls.Dock)">
            <summary>
            Gets our multi-control-host margin from the text view.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderBaseDevTen">
            <summary>
            Base class for standard around-the-editor margins.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderBaseDevTen.MarginTextViewRole00">
            <summary>
            Works for most of the views.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderBaseDevTen.MarginTextViewRole01">
            <summary>
            Smth new with VS12: a peek view inserted into a larger text view. Requires a separate flag to run a margin inside.
            In older VSes would be silently ignored.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin">
            <summary>
            A dynamic (runtime-defined) margin for the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>-kind text control.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.myCachedUiElement">
            <summary>
            Create one from the <see cref="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.myData"/>, cache from then on.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.#ctor(JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Data)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.AddToTextControl(Microsoft.VisualStudio.Text.Editor.IWpfTextView,JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Data,System.Windows.Controls.Dock,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService,JetBrains.Application.IApplicationHost)">
            <summary>
            Adds a margin/provider to the text control.
            </summary>
            <param name="textview">The host.</param>
            <param name="data">Describes the margin to be created.</param>
            <param name="dock">The side of the text control to dock the margin at.</param>
            <param name="vsEditorAdaptersFactoryService"></param>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Microsoft#VisualStudio#Text#Editor#ITextViewMargin#GetTextViewMargin(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> with the given <paramref name="marginName"/>.
            </summary>
            <param name="marginName">The name of the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/>.</param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewMargin"/> named <paramref name="marginName"/>, or null if no match is found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="marginName"/> is null.</exception>
            <remarks>
            A margin must return itself if passed its name, and a container margin must forward the call to its children.
            </remarks>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Microsoft#VisualStudio#Text#Editor#ITextViewMargin#Enabled">
            <summary>
            Determines whether the margin is enabled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Microsoft#VisualStudio#Text#Editor#ITextViewMargin#MarginSize">
            <summary>
            Gets the size of the margin. 
            </summary>
            <remarks>
            For a horizontal margin this is the height of the margin, 
                        since the width will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
                        For a vertical margin this is the width of the margin, since the height will be determined by the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The margin is disposed.</exception>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Microsoft#VisualStudio#Text#Editor#IWpfTextViewMargin#VisualElement">
            <summary>
            Gets the FrameworkElement that renders the margin.
            </summary>
            <exception cref="T:System.ObjectDisposedException">if the margin is disposed.</exception>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Data">
            <summary>
            Describes the margin context to be dragged thru the provider and so on.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Data.#ctor(JetBrains.DataFlow.Lifetime,System.String,System.Double,System.Func{JetBrains.DataFlow.Lifetime,System.Windows.FrameworkElement})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="lifetime"></param>
            <param name="id">Margin name. One can get a margin by its name from the text view.</param>
            <param name="width">Margin width, in logical pixels.</param>
            <param name="FCreateView">Creates the presentation for the new margin, given its lifetime.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Provider">
            <summary>
            A provider to create the preconfigured margin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Provider.Clone">
            <summary>
            Used in contexts where a <c>Func</c> for creating a provider is required.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlDynamicMargin.Provider.Microsoft#VisualStudio#Text#Editor#IWpfTextViewMarginProvider#CreateMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.
            </summary>
            d\
                        <param name="wpfTextViewHost">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> for which to create the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.</param><param name="marginContainer">The margin that will contain the newly-created margin.</param>
            <returns>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin"/>.  
                        The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewMarginProvider"/> does not participate for this context.
            </returns>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginDevTen">
            <summary>
            The common margin implementation type.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderBottomDevTen">
            <summary>
            Bottom standard margin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderBottomDevTen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderLeftDevTen">
            <summary>
            Left standard margin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderLeftDevTen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderRightDevTen">
            <summary>
            Right standard margin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderRightDevTen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderTopDevTen">
            <summary>
            Top standard margin.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.Marginal.VsTextControlMarginProviderTopDevTen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsTextViewKeyProcessor">
            <summary>
            Backend for the <see cref="P:JetBrains.TextControl.ITextControlWindow.Keyboard"/> event.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsTextViewMouseProcessor">
            <summary>
            Backend for the <see cref="P:JetBrains.TextControl.ITextControlWindow.MouseMove"/>, <see cref="P:JetBrains.TextControl.ITextControlWindow.MouseDown"/>, <see cref="P:JetBrains.TextControl.ITextControlWindow.MouseUp"/> events.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.VsTextViewMouseProcessor.Factory">
            <summary>
            Mouse processor factory creates a mouse processor for each VS text view.
            </summary>
            (DK) RSRP-329395 Ctrl+Click does not work.
            The cause of this issue is that our mouse processor did not receive MouseDown/MouseUp events. The root cause is described below.
            Microsoft.VisualStudio.Text.Utilities.WpfMouseProcessor keeps an ordered list of mouse processors and calls them in that order. 
            The code of all its event handlers looks like follows:
            
              public void UIElement_MouseDown(object sender, MouseButtonEventArgs e)
              {
                foreach (IMouseProcessor processor in _mouseProcessors)
                {
                  processor.PreprocessMouseDown(e);
                  if (e.Handled) break;
                }
                if (!e.Handled)
                  this.DefaultMouseDownHandler(sender, e);
                foreach (IMouseProcessor processor in _mouseProcessors)
                  processor.PostprocessMouseDown(e);
              }
            
            Furthermore, MSDN says "If you mark MouseLeftButtonDown/MouseRightButtonDown handled, you are essentially marking Mouse.MouseDown handled 
            for all further listeners along the route, and on all related events." 
            
            There are more than 10 mouse processors in VS. The order of the processor depends on [Order(Before|After="Name")] attribute of its factory (IMouseProcessorProvider).
            We cannot ensure that our processor is the first in the list, as we aren't able to know the names of all processors. 
            If at least one of them marks MouseLeftButtonDown as handled we will not receive MouseDown/Up (which we preprocessed before).
            
            The solution is to override POSTprocess of MouseLeft/Right/Down/Up in our VsTextViewMouseProcessor to ensure that we always get mouse events.
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.VsTextViewSink">
            <summary>
            Monitors vs' creation of text views and maintains the <see cref="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.VsTextViewSink.VsTextViewsUnugarded"/> collection.
            This class is created by MEF, and its lifetime does not agree to the Shell lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.VsTextViewSink.VsTextViewsUnugarded">
            <summary>
            Lists the VS text controls (views).
            As this collection directly reflects the VS state, even at times when the Shell is not running, it's not guarded.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.VsTextViewSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.TextControl.AttachTextControlsToTextViews.VsTextViewSink.Microsoft#VisualStudio#Text#Editor#IWpfTextViewCreationListener#TextViewCreated(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Called when a text view having matchine roles is created over a text data model having a matching content type.
                        Exporters must specify at least one ContentTypeAttribute and one TextViewRole, and should mark their export using the following attribute:
                        [Export(typeof(TextViewCreationListener))], along with [ContentType()] and [TextViewRole()].
            </summary>
            <param name="textView">The newly created text view.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.UI.VsAvalonStatusBarShimDevTen">
            <summary>
            An extension to the <see cref="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim"/> class with DevTen-specific functions.
            </summary>
            <seealso cref="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim"/>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.UI.VsAvalonStatusBarShimDevTen.TrySubclassDevTenBeta2StatusDockPanelInWindow(JetBrains.DataFlow.Lifetime,System.IntPtr,JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.StatusBar.JetStatusBarIndicator},JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext,JetBrains.UI.PopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.Theming.ITheming)">
            <summary>
            Works in DevTen Beta2+ for its status bars, see <see cref="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindDevTenBeta2StatusDockPanelInHwnd(System.IntPtr)"/> for comments.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.UI.VsAvalonStatusBarShimDevTen.SubclassDevTenBeta2StatusDockPanel(JetBrains.DataFlow.Lifetime,System.Windows.Controls.Panel,JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.StatusBar.JetStatusBarIndicator},JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext,JetBrains.UI.PopupMenu.JetPopupMenus,JetBrains.Application.Interop.NativeHook.IWindowsHookManager,JetBrains.UI.Theming.ITheming)">
            <summary>
            Works in DevTen Beta2+ for its status bars, see <see cref="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindDevTenBeta2StatusDockPanelInHwnd(System.IntPtr)"/> for comments.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.SinceVs10.UI.VsAvalonStatusBarShimDevTen.AddItemsHostToStatusDockPanel(JetBrains.DataFlow.Lifetime,System.Windows.Controls.Panel,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to the status line of a window. Places a panel for our items in between the status bar and resize grip.
            Must be executed on the UI thread.
            </summary>
            <param name="lifetime"></param>
            <param name="statusdock">The dock panel of the window status line.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.SinceVs10.UI.VsStatusBarIndicatorsDevTen">
            <summary>
            The status bar support part which inserts indicators into the DevEnv status bar by subclassing it as a WPF status bar and inserting own elements.
            </summary>
        </member>
    </members>
</doc>
