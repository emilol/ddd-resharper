<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.VisualStudio.VsctToCtoCompiler</name>
    </assembly>
    <members>
        <member name="M:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoBinaryWriter.WriteAlign(System.Int32)">
            <summary>
            The method is used in the old cto-file format (CtoConstants.OldCtoFileSignature). It is kept for information only.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoBinaryWriter.BeginChunk">
            <summary>
            Microsoft VSCTLibrary uses BeginChunk and EndChunk methods to control the compression.
            Data inside a chunk are written to the temporary buffer, when EndChunk is called the whole chunk is passed to the compressor.
            We don't need chunks for a while, but their implementation is below.
            </summary>
            <remarks>
            A side effect of chunks is that data inside chunks don't cross boundaries of cto-file blocks.
            </remarks>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoPseudoCompressedStream">
            <summary>
            VS Command Table Object (.cto) file compressor.
            </summary>
            <remarks>
            <para>CTO is a binary format.</para>
            <para>Original MS cto-files produced by VSCT.exe or VSCTLibrary are compressed. Compression is implemented in native code, so we don't know which compression method is used.
            Fortunately cto-file format allows uncompressed data, the only thing we have to do is to implement the cto-file structure.</para>
            <para>Cto-file consists of the file header followed by one or more data blocks.</para>
            <para>The cto-file header is a 20-bytes structure (see <see cref="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoFileHeader"/>).
            NextTableOffset should be the size of the header. FileSize is an uncompressed size of data written to the file.</para>
            <para>Each data block starts with a 16-byte block header (see <see cref="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoPseudoCompressedStream.BlockHeader"/>). 
            If original (uncompressed) and packed sizes are equal, the block contains uncompressed data. If Crc32 field is 0, no crc-check is performed. Max block size seems to be 64K.</para>
            <para>A block header with all fields set to zero serves as an end of file mark.</para>
            </remarks>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.CtoGenerator.CtoPseudoCompressedStream.Length">
            <summary>
            NOTE: That's not a file length, that's an uncompressed data length without file and block headers.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.Install.VsPackageEmitsVsCommandTable">
            <summary>
            Emits the Visual Studio Command Table, which produces the .cto file to be embedded with the package, as required by the <see cref="T:JetBrains.VsIntegration.Shell.ActionManagement.VsActionManager"/> to function properly.
            </summary>
        </member>
        <member name="M:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.Install.VsPackageEmitsVsCommandTable.EmitVsCommandTable(JetBrains.VsIntegration.Shell.Build.VsEnvironmentInformationArtifact,JetBrains.UI.Icons.IThemedIconManager,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageClassEmitters.PackageInfo,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsActionsForBuild,JetBrains.VsIntegration.Shell.Install.VsPackageAssembly.VsPackageActionIcons,JetBrains.Util.ILogger)">
            <summary>
            Emit VSCT file (like source code for CTO) and a CS file with mappings for VsPackage at runtime
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsctConfiguration.DynamicCommandSetGuid">
            <summary>
            Command set GUID for the dynamic commands to be registered by the product at runtime.
            Not used by this tool but for writing the GUID into the generated code file.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsctConfiguration.GroupsCommandSetGuid">
            <summary>
            Command set GUID for the VS Command Groups that are generated to accomodate commands (created from IExecutableActions) in menus (created from IActionGroups).
            The IDs are entirely autogenerated by this tool.
            </summary>
        </member>
        <member name="P:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsctConfiguration.Log">
            <summary>
            The logger into which the errors, warnings and progress messages should be reported.
            </summary>
        </member>
        <member name="F:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsctBuilder.myNamesMangling">
            <summary>
            Maps an unmangled name to its mangled version. The main use is preventing names collision after mangling.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsGuidSymbol">
            <summary>
            VSCT aliases for GUIDs of the GUID:ID pairs.
            Associates a GUID with a name.
            </summary>
        </member>
        <member name="T:JetBrains.Platform.VisualStudio.VsctToCtoCompiler.VsctRevised.VsctXmlWriter">
            <summary>
            Menu.guid - GuidSymbol.name
            Group.guid - GuidSymbol.name
            Button.guid - GuidSymbol.name
            Bitmap.guid - GuidSymbol.name
            CommandPlacement.guid - GuidSymbol.name
            Menu.id - Group.Parent.id
            Group.id - CommandPlacement.Parent.id
            Button.id - CommandPlacement.id
            GuidSymbol.IDSymbol.name - Group.id
            GuidSymbol.IDSymbol.name - Button.id
            
            Special names:
              Menu.guid=guidCmdSetActions
              Group.guid=guidCmdSetGroups
              IDSymbol.name=cmdidOrphanedActionsContainer
              
            </summary>
        </member>
    </members>
</doc>
