<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PsiGen</name>
    </assembly>
    <members>
        <member name="M:JetBrains.ReSharper.PsiGen.Generator.IGeneratorHelper.GenerateLookaheadCheck(System.Collections.Generic.HashSet{JetBrains.ReSharper.PsiGen.Rules.TerminalOccurence},JetBrains.ReSharper.PsiGen.Generator.CodeWriter)">
            Generates an expression which checks whether a lookahead in a given set
            of terminals
            
            @param first   set of terminals
            @param printer
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Generator.IGeneratorHelper.GenerateMatch(JetBrains.ReSharper.PsiGen.Terminal,System.String,JetBrains.ReSharper.PsiGen.Generator.CodeWriter)">
            Generates statement that advances lexer
            
            @param specialChecking
            @param outputStream
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Multilevel.ComplexParsingLevel.MyParserBodyGenerator.GenerateParserBody(JetBrains.ReSharper.PsiGen.Generator.IGeneratorHelper,JetBrains.ReSharper.PsiGen.Generator.CodeWriter)">
             Generates parser <i>body</i> for this level
            
             @param helper
             @param printer
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Nonterminal.CapitalizeName(System.String)">
             inserts underscores between words and converts <code>name</code> to uppercase.
            
             @param name
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Nonterminal.GenerateParserFunction(JetBrains.ReSharper.PsiGen.IParserBodyGenerator,System.Boolean,JetBrains.ReSharper.PsiGen.Generator.IGeneratorHelper,JetBrains.ReSharper.PsiGen.Generator.CodeWriter)">
             Generates c parsing function which will return c TreeElement corresponding to this Nonterminal.
             Actual body of the function is generated by <code>parserBodyGenerator</code>.
            
             @param parserBodyGenerator
             @param generateInterfaceParser if true, this parsing function will not create c TreeElement by itself.
             @param helper
             @param printer
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.Rule.labels(System.Collections.Generic.List{JetBrains.ReSharper.PsiGen.Label})">
            Adds all labels that are defined in the rule to the list
            
            @param list 
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.Rule.firstHasEpsilon">
            Determines whether this rule's FIRST contains an epsilon string
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.Rule.getPhantoms">
            Returns an ordered list of "phantoms" that are hanged on this rule's creation
            
            @return null if no phantoms can be reasonably hanged by this rule parsing
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.Rule.First(System.Collections.Generic.HashSet{JetBrains.ReSharper.PsiGen.Rules.TerminalOccurence})">
            Calculates a FIRST set (without an epsilon string)
            
            @param result a set of TerminalOccurence
            @see TerminalOccurence
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.Rule.PsiFirst(System.Collections.Generic.HashSet{JetBrains.ReSharper.PsiGen.Symbol})">
            Adds set of Symbols (terminals or nonterminals) that may start parsing result
            of the rule.
            
            @param result 
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.ReSharper.PsiGen.Rules.Rule.updateTails(System.Collections.Generic.HashSet{JetBrains.ReSharper.PsiGen.NonterminalTail})" -->
        <member name="M:JetBrains.ReSharper.PsiGen.Rules.OrRule.generateGetChildRole(JetBrains.ReSharper.PsiGen.Generator.CodeWriter)">
             Generates getChildRole for OrRule.
            
             @param printer
        </member>
        <member name="M:JetBrains.ReSharper.PsiGen.TerminalSet.Append(JetBrains.ReSharper.PsiGen.Rules.TerminalOccurence)">
            Appends c singleton set containing this terminal (and nothing else)
            
            @param t 
        </member>
    </members>
</doc>
