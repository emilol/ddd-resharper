<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Features.Diagramming</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons">
             <summary>
              <para>
                <para>Autogenerated identifier classes and identifier objects to Themed Icons registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/>.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <c>Id</c> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>This code was compile-time generated to support Themed Icons in the JetBrains application.</para>
              <para>It has two primary goals: load the icons of this assembly to be registered with <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> so that they were WPF-accessible and theme-sensitive; and emit early-bound accessors for referencing icons in codebehind in a compile-time-validated manner.</para>
              <h1>XAML</h1>
              <para>For performance reasons, the icons are not individually exposed with application resources. There is a custom markup extension to bind an image source in markup.</para>
              <para>To use an icon from XAML, set an <see cref="T:System.Windows.Media.ImageSource"/> property to the <see cref="T:JetBrains.UI.Icons.ThemedIconExtension"/> markup extension, which takes an icon identifier class (nested in <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class) as a parameter.</para>
              <para>Example:</para>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+Aggregation}" /&gt;</code>
              <h1>Attributes</h1>
              <para>Sometimes you have to reference an icon from a type attriute when you're defining objects in code. Typical examples are Options pages and Tool Windows.</para>
              <para>To avoid the use of string IDs which are not validated very well, we've emitted identifier classes to be used with <c>typeof()</c> expression, one per each icon. Use the attribute overload which takes a <see cref="T:System.Type"/> for an image, and choose your icon class from nested classes in the <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
              <para>Example:</para>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.Aggregation))]</code>
              <h1>CodeBehind</h1>
              <para>In codebehind, we have two distinct tasks: (a) specify some icon in the APIs and (b) render icon images onscreen.</para>
              <para>On the APIs stage you should only manipulate icon identifier objects (of type <see cref="T:JetBrains.UI.Icons.IconId"/>, statically defined in <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> in <c>Id</c> fields). Icon identifier classes (nested in <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>) should be turned into icon identifier objects as early as possible. Rendering is about getting an <see cref="T:System.Windows.Media.ImageSource"/> to assign to WPF, or <see cref="T:System.Drawing.Bitmap"/> to use with GDI+ / Windows Forms.</para>
              <para>You should turn an identifier object into a rendered image as late as possible. The identifier is static and lightweight and does not depend on the current theme, while the image is themed and has to be loaded or generated/rasterized. You need an <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> instance to get the image out of an icon identifier object. Once you got the image, you should take care to change it with theme changes â€” either by using a live image property, or by listening to the theme change event. See <see cref="T:JetBrains.UI.Icons.IThemedIconManager"/> and its extensions for the related facilities.</para>
              <para>Example:</para>
              <code>// Getting IconId identifier object to use with APIs
            IconId iconid = FeaturesDiagrammingThemedIcons.Aggregation.Id;</code>
              <code>// Getting IconId out of an Icon Identifier Class type
            IconId iconid = CompiledIconClassAttribute.TryGetCompiledIconClassId(typeof(FeaturesDiagrammingThemedIcons.Aggregation), OnError.Throw);</code>
              <code>// Getting image for screen rendering by IconId
            themediconmanager.Icons[icnoid]</code>
              <code>// Getting image for screen rendering by Icon Identifier Class
            themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.Aggregation&gt;()</code>
              <h1>Icons Origin</h1>
              <para>This code was generated by a pre-compile build task from a set of input files which are XAML files adhering to a certain convention, as convenient for exporting them from the Illustrator workspace, plus separate PNG files with raster icons. In the projects, these files are designated with <c>ThemedIconsXamlV3</c> and <c>ThemedIconPng</c> build actions and do not themselves get into the output assembly. All of such files are processed, vector images for different themes of the same icon are split and combined into the single list of icons in this assembly. This list is then written into the genearted XAML file (compiled into BAML within assembly), and serves as the source for this generated code.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Aggregation">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Aggregation Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Aggregation.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+Aggregation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.Aggregation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.Aggregation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.Aggregation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Aggregation.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Aggregation Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Aggregation"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+Aggregation}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.Aggregation))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.Aggregation.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.Aggregation&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingFolder">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GroupingFolder Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingFolder.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingFolder.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GroupingFolder Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingFolder"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingFolder}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingFolder))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingFolder.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingFolder&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNamespace">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GroupingNamespace Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNamespace.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingNamespace}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingNamespace))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingNamespace.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingNamespace&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNamespace.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GroupingNamespace Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNamespace"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingNamespace}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingNamespace))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingNamespace.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingNamespace&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNone">
             <summary>
              <para>
                <para>Autogenerated identifier class for the GroupingNone Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNone.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingNone}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingNone))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingNone.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingNone&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNone.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the GroupingNone Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.GroupingNone"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+GroupingNone}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.GroupingNone))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.GroupingNone.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.GroupingNone&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Return">
             <summary>
              <para>
                <para>Autogenerated identifier class for the Return Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Return.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+Return}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.Return))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.Return.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.Return&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Return.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the Return Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.Return"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+Return}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.Return))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.Return.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.Return&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.TypeLayout">
             <summary>
              <para>
                <para>Autogenerated identifier class for the TypeLayout Themed Icon.</para>
                <para>Identifier classes should be used in attributes, XAML, or generic parameters. Where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected, use the identifier object in the <see cref="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.TypeLayout.Id"/> field of the identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+TypeLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.TypeLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.TypeLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.TypeLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.TypeLayout.Id">
             <summary>
              <para>
                <para>Autogenerated identifier object for the TypeLayout Themed Icon.</para>
                <para>Identifier objects should be used where an <see cref="T:JetBrains.UI.Icons.IconId"/> value is expected. In attributes, XAML, or generic parameters use the containing <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons.TypeLayout"/> identifier class.</para>
              </para>
            </summary>
            <remarks>
              <para>For details on Themed Icons and their use, see Remarks on <see cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/> class.</para>
            </remarks>
            <seealso cref="T:JetBrains.ReSharper.Features.Diagramming.Resources.FeaturesDiagrammingThemedIcons"/>
            <example>
              <code>&lt;Image Source="{icons:ThemedIcon myres:FeaturesDiagrammingThemedIcons+TypeLayout}" /&gt;        &lt;!-- XAML --&gt;</code>
            </example>
            <example>
              <code>[Item(Name="Sample", Icon=typeof(FeaturesDiagrammingThemedIcons.TypeLayout))]        // C# Type attribute</code>
            </example>
            <example>
              <code>IconId iconid = FeaturesDiagrammingThemedIcons.TypeLayout.Id;        // IconId identifier object</code>
            </example>
            <example>
              <code>themediconmanager.GetIcon&lt;FeaturesDiagrammingThemedIcons.TypeLayout&gt;()        // Icon image for rendering</code>
            </example>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.ArchitectureGraphViewer.OpenFromSolution(JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.IArchitecturePersistentGraph,JetBrains.ProjectModel.ISolution,System.Collections.Generic.List{JetBrains.ProjectModel.IProject})">
            <param name="persistentGraph">persistent graph to view</param>
            <param name="solution"></param>
            <param name="selectedProjects"></param>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.ArchitectureGrid">
            <summary>
            Interaction logic for ArchitectureGrid.xaml
            </summary>
            <summary>
            ArchitectureGrid
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.ArchitectureGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.ArchitectureToolboxDescriptor.CheckProjects(System.Collections.Generic.List{JetBrains.ProjectModel.IProject},System.Boolean)">
            <summary>
            checks only selected projects and displayes them in the graph
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridCollapseDirection">
            <summary>
              Specifies different collapse modes of a GridExpander.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridCollapseDirection.None">
            <summary>
              The GridExpander cannot be collapsed or expanded.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridCollapseDirection.Next">
            <summary>
              The column (or row) to the right (or below) the
              splitter's column, will be collapsed.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridCollapseDirection.Previous">
            <summary>
              The column (or row) to the left (or above) the
              splitter's column, will be collapsed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander">
            <summary>
              An updated version of the standard GridExpander control that includes a centered handle
              which allows complete collapsing and expanding of the appropriate grid column or row.
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.DirectionProperty">
            <summary>
              Identifies the Direction dependency property
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.HandleStyleProperty">
            <summary>
              Identifies the HandleStyle dependency property
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.IsAnimatedProperty">
            <summary>
              Identifies the IsAnimated dependency property
            </summary>
        </member>
        <member name="F:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.IsCollapsedProperty">
            <summary>
              Identifies the IsCollapsed dependency property
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.#ctor">
            <summary>
              Initializes a new instance of the GridExpander class,
              which inherits from System.Windows.Controls.GridExpander.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnApplyTemplate">
            <summary>
              This method is called when the tempalte should be applied to the control.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnIsCollapsedChanged(System.Boolean)">
            <summary>
              Handles the property change event of the IsCollapsed property.
            </summary>
            <param name="isCollapsed">The new value for the IsCollapsed property.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnDirectionChanged(JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridCollapseDirection)">
            <summary>
              Handles the property change event of the Direction property.
            </summary>
            <param name="direction">The new value for the Direction property.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnCollapsed(System.EventArgs)">
            <summary>
              Raises the Collapsed event.
            </summary>
            <param name="e">Contains event arguments.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnExpanded(System.EventArgs)">
            <summary>
              Raises the Expanded event.
            </summary>
            <param name="e">Contains event arguments.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.Collapse">
            <summary>
              Collapses the target ColumnDefinition or RowDefinition.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.Expand">
            <summary>
              Expands the target ColumnDefinition or RowDefinition.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.GetCollapseDirection">
            <summary>
              Determine the collapse direction based on the horizontal and vertical alignments
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.GridExpanderButton_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
              Handles the Checked event of either the Vertical or Horizontal
              GridExpanderHandle ToggleButton.
            </summary>
            <param name="sender">An instance of the ToggleButton that fired the event.</param>
            <param name="e">Contains event arguments for the routed event that fired.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.GridExpanderButton_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
              Handles the Unchecked event of either the Vertical or Horizontal
              GridExpanderHandle ToggleButton.
            </summary>
            <param name="sender">An instance of the ToggleButton that fired the event.</param>
            <param name="e">Contains event arguments for the routed event that fired.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnIsCollapsedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
              The IsCollapsed property porperty changed handler.
            </summary>
            <param name="d">GridExpander that changed IsCollapsed.</param>
            <param name="e">An instance of DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.OnDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
              The DirectionProperty property changed handler.
            </summary>
            <param name="d">GridExpander that changed IsCollapsed.</param>
            <param name="e">An instance of DependencyPropertyChangedEventArgs.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.AnimateCollapse(System.Object)">
            <summary>
              Uses DoubleAnimation and a StoryBoard to animated the collapsing
              of the specificed ColumnDefinition or RowDefinition.
            </summary>
            <param name="definition">The RowDefinition or ColumnDefintition that will be collapsed.</param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.AnimateExpand(System.Object)">
            <summary>
              Uses DoubleAnimation and a StoryBoard to animate the expansion
              of the specificed ColumnDefinition or RowDefinition.
            </summary>
            <param name="definition">The RowDefinition or ColumnDefintition that will be expanded.</param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.Direction">
            <summary>
              Gets or sets a value that indicates the direction in which the row/colum
              will be located that is to be expanded and collapsed.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.HandleStyle">
            <summary>
              Gets or sets the style that customizes the appearance of the vertical handle
              that is used to expand and collapse the GridExpander.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.IsAnimated">
            <summary>
              Gets or sets a value that indicates if the collapse and
              expanding actions should be animated.
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.IsCollapsed">
            <summary>
              Gets or sets a value that indicates if the target column is
              currently collapsed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.Toolbox.GridExpander.GridCollapseOrientation">
            <summary>
              An enumeration that specifies the direction the GridExpander will
              be collapased (Rows or Columns).
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.UI.HighlightEdgeStyle">
            <summary>
            This style is for demonstration purposes only and is not fully implemented.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.ArchitectureGraphExtentions.CreateEdgeFromProjectModel(JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.Graph.IProjectModelGraph,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.IArchitectureElementBuilder,JetBrains.ProjectModel.IProject)">
            <summary>
            Creates Edge and correctly adds it to graph.
            </summary>
            <param name="graph"></param>
            <param name="element"></param>
            <param name="builder"></param>
            <param name="targetProject"></param>
            <returns>Return added edge, if something fails - return null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.ArchitectureGraphExtentions.CreateNodeFromProjectModel(JetBrains.UI.Diagramming.API.IDiagramGraph,JetBrains.ProjectModel.IProjectModelElement,JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.IArchitectureElementBuilder)">
            <summary>
            Creates Node and correctly adds it to graph.
            </summary>
            <param name="graph"></param>
            <param name="element"></param>
            <param name="builder"></param>
            <returns>Return created node, if something fails - return null</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Core.ArchitectureDiagrams.Graph.ArchitecturePersistentGraph.RemoveEdge(JetBrains.UI.Diagramming.API.IDiagramGraphEdge)">
            <summary>
            Remove edge from graph  and if edge.Source exist from edge.Source
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.AddOrNavigateDeclaredElementController.ExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,JetBrains.DataFlow.ISignal{System.Boolean})">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Types.DiagramTypeChooser">
            <summary>
            Customizes the <see cref="T:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.CompletionPickerEdit"/> for choosing types.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.DiagramTypeChooser.TryGetTypeElement(System.String)">
            <summary>
            Tries to look up a declared element for its FQ Name in the current <see cref="P:JetBrains.ReSharper.Feature.Services.UI.CompletionPicker.DeclaredElementChooser.Language"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.DiagramTypeChooser.CreateCompletionController(JetBrains.DataFlow.Lifetime,JetBrains.ProjectModel.ISolution,JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.LibrariesFlag,JetBrains.Application.IShellLocks,JetBrains.ReSharper.Features.Diagramming.Types.TypeDependenciesDiagramDescriptor)">
            <summary>
            Creates the chooser-specific completion controller.
            </summary>
            <param name="lifetime"></param>
            <param name="solution"></param>
            <param name="librariesFlag"></param>
            <param name="locks"></param>
            <param name="typeDependenciesDiagramDescriptor"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.DiagramTypeChooser.InitCompletion(System.Func{JetBrains.ReSharper.Feature.Services.Navigation.Goto.ProvidersAPI.ICompletionGotoController})">
            <summary>
            Inits the plain completion support.
            </summary>
            <param name="FCreateCompletionController"></param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator"/> class.
            
            </summary>
            
            <remarks>
            The <see cref="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Wrapped"/> property will be initialized with a <see cref="T:yWorks.yFiles.UI.Drawing.ShapeNodeStyle"/>.
            
            </remarks>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.#ctor(yWorks.yFiles.UI.Drawing.INodeStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator"/> class.
                        using the provided style for the <see cref="P:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecorator.Wrapped"/> property.
            
            </summary>
            <param name="decoratedStyle">The decorated style.</param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.ButtonStyle">
            <summary>
            Gets or sets the style to use for the <see cref="T:System.Windows.Controls.Primitives.ToggleButton"/>.
            
            </summary>
            
            <remarks>
            The default value of <see langword="null"/> will make the implementation use the
                        style obtained from the <see cref="T:yWorks.Canvas.CanvasControl"/>
                        using the <see cref="F:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer.CollapseButtonStyleKey"/>.
            
            </remarks>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.ButtonLocationParameter">
            <summary>
            An <see cref="T:yWorks.yFiles.UI.Model.ILabelModelParameter"/> that determines the placement of the button for toggling the
                        expanded state.
            
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.Insets">
            <summary>
            Yields the insets to use for the <see cref="T:yWorks.yFiles.UI.Drawing.IInsetsProvider`1"/> that will be reported
                        by the <see cref="T:yWorks.yFiles.UI.Drawing.CollapsibleNodeStyleDecoratorRenderer"/>'s <see cref="T:yWorks.Support.ILookup"/>.
            
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.MyCollapsibleNodeStyleDecorator.Wrapped">
            <summary>
            The wrapped node style that will be used to perform the actual rendering of the node.
            
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDependenciesDiagramDescriptor.FullRefresh">
            <summary>
              rebuilds the store, creates a new graph, and relayouts all this
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDependenciesDiagramDescriptor.UpdateCanvas(System.Int32,System.Boolean)">
            <summary>
              updates the yfiles wrapper according to the myTypeDependenciesGraph graph
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDependenciesDummyEdgeConverter.AddFirstSeparateEdge(yWorks.yFiles.UI.Model.IAddDummyEdgeCallback,yWorks.yFiles.UI.Model.IFoldedGraph,yWorks.yFiles.UI.Model.IEdge,yWorks.yFiles.UI.Model.INode,System.Boolean,yWorks.yFiles.UI.Model.INode,System.Boolean)">
            <summary>
            Adds the first separate edge to the source and target node pair using the <see cref="M:yWorks.yFiles.UI.Model.IAddDummyEdgeCallback.AddAsSeparateEdge(yWorks.yFiles.UI.Model.IPort,yWorks.yFiles.UI.Model.IPort)"/> method.
            
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.AssemblyGroupNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.AssemblyGroupNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.ITypeElementNode.GetPsiSourceFile">
            <summary>
            gets cached psi source file, no readlock required
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.Impl.TypesRelationEdge.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.Impl.TypesRelationEdge.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.ProjectFolderGroupNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.Graph.ProjectFolderGroupNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.NamespaceGroupNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeDiagrams.NamespaceGroupNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.TypeElementsDependencies.TypeElementsDependenciesStore.AddDependency(JetBrains.ReSharper.Psi.ITypeElement,JetBrains.ReSharper.Features.Diagramming.Types.TypeElementsDependencies.TypeElementsDependency)">
            <summary>
            This method is thread safe
            </summary>
            <param name="sourceTypeElement"></param>
            <param name="dependency"></param>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.TypeElementsDependencies.TypeElementsDependenciesStore.DisplayTypeElements">
            <summary>
            these elements will be used while building the graph against this store
            </summary>
        </member>
        <member name="P:JetBrains.ReSharper.Features.Diagramming.Types.TypeDependenciesDiagramWrapper.GraphControl">
            <summary>
            can be null in tests
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Types.UI.TypeDependenciesControl">
            <summary>
            TypeDependenciesControl
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Types.UI.TypeDependenciesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Features.Diagramming.Architecture.UI.ArchitectureGraphControl">
            <summary>
            ArchitectureGraphControl
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Features.Diagramming.Architecture.UI.ArchitectureGraphControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
