<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.ReSharper.Intentions.CSharp</name>
    </assembly>
    <members>
        <member name="T:JetBrains.ReSharper.Intentions.CSharp.Options.CsharpContextActionsPage">
            <summary>
              Context actions.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.CreateMemberInfo(JetBrains.ReSharper.Psi.Tree.ITreeNode)">
            <summary>
              Creates the member info.
            </summary>
            <param name="element">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.IsSupportedArgument(JetBrains.Util.Pair{System.String,JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.MemberInfo})">
            <summary>
              Determines whether [is supported argument] [the specified pair].
            </summary>
            <param name="pair">The pair.</param>
            <returns>
              <c>true</c>
              if [is supported argument] [the specified pair]; otherwise,
              <c>false</c>
              .
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.ParameterName">
            <summary>
              Gets the name of the parameter.
            </summary>
            <value>
              The name of the parameter.
            </value>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.ConditionalExpressionFormat">
            <summary>
              Gets the conditional expression format.
            </summary>
            <value>
              The conditional expression format.
            </value>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.IfStatementFormat">
            <summary>
              Gets if statement format.
            </summary>
            <value>If statement format.</value>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.SurroundIfStatementFormat">
            <summary>
              Gets the surround if statement format.
            </summary>
            <value>
              The surround if statement format.
            </value>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Misc.Check.CheckArgumentActionBase.SingleIfStatementFormat">
            <summary>
              Gets the single if statement format.
            </summary>
            <value>
              The single if statement format.
            </value>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckArrayIndexValueActionBase.IsSupportedArgument(JetBrains.Util.Pair{System.String,JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.MemberInfo})">
            <summary>
              Determines whether [is supported argument] [the specified pair].
            </summary>
            <param name="pair">The pair.</param>
            <returns>
              <c>true</c>
              if [is supported argument] [the specified pair]; otherwise,
              <c>false</c>
              .
            </returns>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckStringIndexValueActionBase.IsSupportedArgument(JetBrains.Util.Pair{System.String,JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.MemberInfo})">
            <summary>
              Determines whether [is supported argument] [the specified pair].
            </summary>
            <param name="pair">The pair.</param>
            <returns>
              <c>true</c>
              if [is supported argument] [the specified pair]; otherwise,
              <c>false</c>
              .
            </returns>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.Check.CheckStringIndexValueActionBase.SupportedType">
            <summary>
              Gets the type of the supported.
            </summary>
            <value>
              The type of the supported.
            </value>
        </member>
        <member name="P:JetBrains.ReSharper.Intentions.CSharp.ContextActions.NonI18n.UseEnvironmentNewLineAction.Text">
            <summary>Gets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.Util.PsiUtil.FindLoopWhereHeaderContains(JetBrains.ReSharper.Psi.CSharp.Tree.ICSharpTreeNode)">
            <summary>
            Checks whether expression is directly or indirectly (lambda) embeded inside loop header.   
            </summary>
            <param name="expression"></param>
            <returns>Returns loop that contains expression in its header</returns>
        </member>
        <member name="M:JetBrains.ReSharper.Intentions.CSharp.ContextActions.RemoveParenthesisAction.CanUseAssociativityToRemoveParentheses(JetBrains.ReSharper.Psi.CSharp.Tree.IParenthesizedExpression)">
            <summary>
            Check if we can omit parentheses in situations like '1 + (2 + 3)' or '"aa" + ("bb" + "cc")'
            when we can proof binary operator is associative.
            </summary>
        </member>
    </members>
</doc>
